{"version":3,"file":"pluginStore.js","sources":["../src/pluginStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport type { PluginData, StateObject, UpdateTypeDetail } from './CogsState';\r\nimport type { CogsPlugin } from './plugins';\r\n\r\ntype PluginRegistryStore = {\r\n  stateHandlers: Map<string, StateObject<any>>; // stateKey -> handler\r\n  registerStateHandler: (stateKey: string, handler: StateObject<any>) => void;\r\n  registeredPlugins: readonly CogsPlugin<any, any, any, any, any>[];\r\n  setRegisteredPlugins: (\r\n    plugins: readonly CogsPlugin<any, any, any, any, any>[]\r\n  ) => void;\r\n\r\n  // Store options keyed by stateKey and pluginName\r\n  pluginOptions: Map<string, Map<string, any>>; // stateKey -> pluginName -> options\r\n  setPluginOptionsForState: (\r\n    stateKey: string,\r\n    pluginOptions: Record<string, any>\r\n  ) => void;\r\n\r\n  // Get all plugin configs for a specific stateKey\r\n  getPluginConfigsForState: (stateKey: string) => Array<{\r\n    plugin: CogsPlugin<any, any, any, any, any>;\r\n    options: any;\r\n  }>;\r\n  updateSubscribers: Set<(update: UpdateTypeDetail) => void>;\r\n  subscribeToUpdates: (\r\n    callback: (update: UpdateTypeDetail) => void\r\n  ) => () => void;\r\n  notifyUpdate: (update: UpdateTypeDetail) => void;\r\n  formUpdateSubscribers: Set<\r\n    (event: {\r\n      stateKey: string;\r\n      type: 'focus' | 'blur' | 'input';\r\n      path: string[];\r\n      value?: any;\r\n    }) => void\r\n  >;\r\n  subscribeToFormUpdates: (\r\n    callback: (event: {\r\n      stateKey: string;\r\n      type: 'focus' | 'blur' | 'input';\r\n      path: string[];\r\n      value?: any;\r\n    }) => void\r\n  ) => () => void;\r\n  notifyFormUpdate: (event: {\r\n    stateKey: string;\r\n    type: 'focus' | 'blur' | 'input';\r\n    path: string[];\r\n    value?: any;\r\n  }) => void;\r\n  hookResults: Map<string, Map<string, any>>; // stateKey -> pluginName -> hook\r\n  setHookResult: (stateKey: string, pluginName: string, data: any) => void;\r\n  getHookResult: (stateKey: string, pluginName: string) => any | undefined;\r\n  removeHookResult: (stateKey: string, pluginName: string) => void;\r\n};\r\n\r\nexport const pluginStore = create<PluginRegistryStore>((set, get) => ({\r\n  stateHandlers: new Map(),\r\n  registerStateHandler: (stateKey, handler) =>\r\n    set((state) => {\r\n      const newMap = new Map(state.stateHandlers);\r\n      newMap.set(stateKey, handler);\r\n      console.log('addign handler', stateKey, handler);\r\n      return { stateHandlers: newMap };\r\n    }),\r\n  registeredPlugins: [],\r\n  pluginOptions: new Map(),\r\n\r\n  setRegisteredPlugins: (plugins) => set({ registeredPlugins: plugins }),\r\n\r\n  setPluginOptionsForState: (stateKey, pluginOptions) =>\r\n    set((state) => {\r\n      const newMap = new Map(state.pluginOptions);\r\n      const statePluginMap = new Map();\r\n\r\n      // Store each plugin's options\r\n      Object.entries(pluginOptions).forEach(([pluginName, options]) => {\r\n        // Only store if this is actually a registered plugin\r\n        if (state.registeredPlugins.some((p) => p.name === pluginName)) {\r\n          statePluginMap.set(pluginName, options);\r\n        }\r\n      });\r\n\r\n      if (statePluginMap.size > 0) {\r\n        newMap.set(stateKey, statePluginMap);\r\n      }\r\n\r\n      return { pluginOptions: newMap };\r\n    }),\r\n\r\n  getPluginConfigsForState: (stateKey) => {\r\n    const state = get();\r\n    const stateOptions = state.pluginOptions.get(stateKey);\r\n    if (!stateOptions) return [];\r\n\r\n    return state.registeredPlugins\r\n      .map((plugin) => {\r\n        const options = stateOptions.get(plugin.name);\r\n        if (options !== undefined) {\r\n          return { plugin, options };\r\n        }\r\n        return null;\r\n      })\r\n      .filter(Boolean) as Array<{\r\n      plugin: CogsPlugin<any, any, any, any, any>;\r\n      options: any;\r\n    }>;\r\n  },\r\n  updateSubscribers: new Set(),\r\n  subscribeToUpdates: (callback) => {\r\n    const subscribers = get().updateSubscribers;\r\n    subscribers.add(callback);\r\n    // Return an unsubscribe function\r\n    return () => {\r\n      get().updateSubscribers.delete(callback);\r\n    };\r\n  },\r\n  notifyUpdate: (update) => {\r\n    // Call all registered subscribers with the update details\r\n    get().updateSubscribers.forEach((callback) => callback(update));\r\n  },\r\n  formUpdateSubscribers: new Set(),\r\n  subscribeToFormUpdates: (callback) => {\r\n    const subscribers = get().formUpdateSubscribers;\r\n    subscribers.add(callback);\r\n    return () => {\r\n      get().formUpdateSubscribers.delete(callback);\r\n    };\r\n  },\r\n  notifyFormUpdate: (event) => {\r\n    get().formUpdateSubscribers.forEach((callback) => callback(event));\r\n  },\r\n  hookResults: new Map(),\r\n\r\n  setHookResult: (stateKey, pluginName, data) =>\r\n    set((state) => {\r\n      const next = new Map(state.hookResults);\r\n      const byPlugin = new Map(next.get(stateKey) ?? new Map());\r\n      if (data === undefined) byPlugin.delete(pluginName);\r\n      else byPlugin.set(pluginName, data);\r\n      if (byPlugin.size > 0) next.set(stateKey, byPlugin);\r\n      else next.delete(stateKey);\r\n      return { hookResults: next };\r\n    }),\r\n\r\n  getHookResult: (stateKey, pluginName) =>\r\n    get().hookResults.get(stateKey)?.get(pluginName),\r\n\r\n  removeHookResult: (stateKey, pluginName) =>\r\n    set((state) => {\r\n      const next = new Map(state.hookResults);\r\n      const byPlugin = new Map(next.get(stateKey) ?? new Map());\r\n      byPlugin.delete(pluginName);\r\n      if (byPlugin.size > 0) next.set(stateKey, byPlugin);\r\n      else next.delete(stateKey);\r\n      return { hookResults: next };\r\n    }),\r\n}));\r\n"],"names":["pluginStore","create","set","get","stateKey","handler","state","newMap","plugins","pluginOptions","statePluginMap","pluginName","options","p","stateOptions","plugin","callback","update","event","data","next","byPlugin"],"mappings":"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"}