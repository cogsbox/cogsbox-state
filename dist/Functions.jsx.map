{"version":3,"file":"Functions.jsx","sources":["../src/Functions.tsx"],"sourcesContent":["import { type FormOptsType } from './CogsState';\r\nimport React from 'react';\r\nimport { getGlobalStore, ValidationError } from './store';\r\nimport { get } from 'http';\r\n\r\nexport type ValidationWrapperProps = {\r\n  formOpts?: FormOptsType;\r\n  path: string[];\r\n  stateKey: string;\r\n  children: React.ReactNode;\r\n};\r\n\r\nexport function ValidationWrapper({\r\n  formOpts,\r\n  path,\r\n  stateKey,\r\n  children,\r\n}: ValidationWrapperProps) {\r\n  const { getInitialOptions, getShadowMetadata, getShadowValue } =\r\n    getGlobalStore.getState();\r\n  const thisStateOpts = getInitialOptions(stateKey!);\r\n\r\n  const shadowMeta = getShadowMetadata(stateKey!, path);\r\n  const validationState = shadowMeta?.validation;\r\n\r\n  const status = validationState?.status || 'NOT_VALIDATED';\r\n\r\n  const errors = (validationState?.errors || []).map((err) => ({\r\n    ...err,\r\n    path: path,\r\n  })) as ValidationError[];\r\n  const errorMessages = errors\r\n    .filter((err) => err.severity === 'error')\r\n    .map((err) => err.message);\r\n  const warningMessages = errors\r\n    .filter((err) => err.severity === 'warning')\r\n    .map((err) => err.message);\r\n\r\n  // Use first error, or first warning if no errors\r\n  const message = errorMessages[0] || warningMessages[0];\r\n\r\n  return (\r\n    <>\r\n      {thisStateOpts?.formElements?.validation &&\r\n      !formOpts?.validation?.disable ? (\r\n        thisStateOpts.formElements!.validation!({\r\n          children: (\r\n            <React.Fragment key={path.toString()}>{children}</React.Fragment>\r\n          ),\r\n          status, // Now passes the new ValidationStatus type\r\n          message: formOpts?.validation?.hideMessage\r\n            ? ''\r\n            : formOpts?.validation?.message || message || '',\r\n\r\n          hasErrors: errorMessages.length > 0,\r\n          hasWarnings: warningMessages.length > 0,\r\n          allErrors: errors,\r\n          path: path,\r\n          getData: () => getShadowValue(stateKey!, path),\r\n        })\r\n      ) : (\r\n        <React.Fragment key={path.toString()}>{children}</React.Fragment>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"names":["ValidationWrapper","formOpts","path","stateKey","children","getInitialOptions","getShadowMetadata","getShadowValue","getGlobalStore","thisStateOpts","validationState","status","errors","err","errorMessages","warningMessages","message","jsx","Fragment","React"],"mappings":";;;AAYO,SAASA,EAAkB;AAAA,EAChC,UAAAC;AAAA,EACA,MAAAC;AAAA,EACA,UAAAC;AAAA,EACA,UAAAC;AACF,GAA2B;AACzB,QAAM,EAAE,mBAAAC,GAAmB,mBAAAC,GAAmB,gBAAAC,EAAA,IAC5CC,EAAe,SAAA,GACXC,IAAgBJ,EAAkBF,CAAS,GAG3CO,IADaJ,EAAkBH,GAAWD,CAAI,GAChB,YAE9BS,IAASD,GAAiB,UAAU,iBAEpCE,KAAUF,GAAiB,UAAU,CAAA,GAAI,IAAI,CAACG,OAAS;AAAA,IAC3D,GAAGA;AAAA,IACH,MAAAX;AAAA,EAAA,EACA,GACIY,IAAgBF,EACnB,OAAO,CAACC,MAAQA,EAAI,aAAa,OAAO,EACxC,IAAI,CAACA,MAAQA,EAAI,OAAO,GACrBE,IAAkBH,EACrB,OAAO,CAACC,MAAQA,EAAI,aAAa,SAAS,EAC1C,IAAI,CAACA,MAAQA,EAAI,OAAO,GAGrBG,IAAUF,EAAc,CAAC,KAAKC,EAAgB,CAAC;AAErD,SACE,gBAAAE,EAAAC,GAAA,EACG,UAAAT,GAAe,cAAc,cAC9B,CAACR,GAAU,YAAY,UACrBQ,EAAc,aAAc,WAAY;AAAA,IACtC,4BACGU,EAAM,UAAN,EAAsC,UAAAf,KAAlBF,EAAK,UAAsB;AAAA,IAElD,QAAAS;AAAA;AAAA,IACA,SAASV,GAAU,YAAY,cAC3B,KACAA,GAAU,YAAY,WAAWe,KAAW;AAAA,IAEhD,WAAWF,EAAc,SAAS;AAAA,IAClC,aAAaC,EAAgB,SAAS;AAAA,IACtC,WAAWH;AAAA,IACX,MAAAV;AAAA,IACA,SAAS,MAAMK,EAAeJ,GAAWD,CAAI;AAAA,EAAA,CAC9C,IAED,gBAAAe,EAACE,EAAM,UAAN,EAAsC,UAAAf,EAAA,GAAlBF,EAAK,SAAA,CAAsB,GAEpD;AAEJ;"}