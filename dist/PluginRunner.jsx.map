{"version":3,"file":"PluginRunner.jsx","sources":["../src/PluginRunner.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState, useRef, useReducer } from 'react';\r\nimport { pluginStore } from './pluginStore';\r\nimport { isDeepEqual } from './utility';\r\nimport { createMetadataContext } from './plugins';\r\nimport type { CogsPlugin } from './plugins';\r\nimport type { StateObject, UpdateTypeDetail } from './CogsState';\r\nimport { FormEventType } from './store';\r\n\r\nconst { setHookResult, removeHookResult } = pluginStore.getState();\r\n\r\nconst PluginInstance = React.memo(\r\n  ({\r\n    stateKey,\r\n    plugin,\r\n    options,\r\n    stateHandler,\r\n  }: {\r\n    stateKey: string;\r\n    plugin: CogsPlugin<any, any, any, any>;\r\n    options: any;\r\n    stateHandler: StateObject<any>;\r\n  }) => {\r\n    const [isInitialMount, setIsInitialMount] = useState(true);\r\n\r\n    // Create metadata context\r\n    const metadataContext = useMemo(\r\n      () => createMetadataContext(stateKey, plugin.name),\r\n      [stateKey, plugin.name]\r\n    );\r\n\r\n    // Create the full context for useHook\r\n    const hookContext = useMemo(\r\n      () => ({\r\n        stateKey,\r\n        cogsState: stateHandler,\r\n        ...metadataContext,\r\n        options,\r\n        pluginName: plugin.name,\r\n        isInitialMount,\r\n      }),\r\n      [\r\n        stateKey,\r\n        stateHandler,\r\n        metadataContext,\r\n        options,\r\n        plugin.name,\r\n        isInitialMount,\r\n      ]\r\n    );\r\n\r\n    // Call the plugin's hook\r\n    const hookData = plugin.useHook ? plugin.useHook(hookContext) : undefined;\r\n\r\n    useEffect(() => {\r\n      setIsInitialMount(false);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      if (plugin.useHook) setHookResult(stateKey, plugin.name, hookData);\r\n      else removeHookResult(stateKey, plugin.name);\r\n      return () => removeHookResult(stateKey, plugin.name);\r\n    }, [stateKey, plugin.name, !!plugin.useHook, hookData]);\r\n\r\n    // Handle transformState\r\n    const lastProcessedOptionsRef = useRef<any>();\r\n    const [isInitialTransform, setIsInitialTransform] = useState(true);\r\n\r\n    useEffect(() => {\r\n      if (plugin.transformState) {\r\n        if (!isDeepEqual(options, lastProcessedOptionsRef.current)) {\r\n          plugin.transformState({\r\n            stateKey,\r\n            cogsState: stateHandler,\r\n            ...metadataContext,\r\n            options,\r\n            hookData,\r\n            isInitialTransform,\r\n          });\r\n          lastProcessedOptionsRef.current = options;\r\n          setIsInitialTransform(false);\r\n        }\r\n      }\r\n    }, [\r\n      stateKey,\r\n      stateHandler,\r\n      metadataContext,\r\n      plugin,\r\n      options,\r\n      hookData,\r\n      isInitialTransform,\r\n    ]);\r\n\r\n    // Handle onUpdate\r\n    const hookDataRef = useRef(hookData);\r\n    hookDataRef.current = hookData;\r\n\r\n    useEffect(() => {\r\n      if (!plugin.onUpdate) return;\r\n\r\n      const handleUpdate = (update: UpdateTypeDetail) => {\r\n        if (update.stateKey === stateKey) {\r\n          plugin.onUpdate!({\r\n            stateKey,\r\n            cogsState: stateHandler,\r\n            ...metadataContext,\r\n            update,\r\n            path: update.path,\r\n            options,\r\n            hookData: hookDataRef.current,\r\n          });\r\n        }\r\n      };\r\n\r\n      const unsubscribe = pluginStore\r\n        .getState()\r\n        .subscribeToUpdates(handleUpdate);\r\n      return unsubscribe;\r\n    }, [stateKey, stateHandler, metadataContext, plugin, options]);\r\n\r\n    // Handle onFormUpdate\r\n    useEffect(() => {\r\n      if (!plugin.onFormUpdate) return;\r\n\r\n      const handleFormUpdate = (\r\n        event: FormEventType & { stateKey: string }\r\n      ) => {\r\n        if (event.stateKey === stateKey) {\r\n          const path = event.path;\r\n          plugin.onFormUpdate!({\r\n            stateKey,\r\n            cogsState: stateHandler,\r\n            ...metadataContext,\r\n            path,\r\n            event: {\r\n              type: event.type,\r\n              value: event.value,\r\n              path,\r\n            },\r\n            options,\r\n            hookData: hookDataRef.current,\r\n          });\r\n        }\r\n      };\r\n\r\n      const unsubscribe = pluginStore\r\n        .getState()\r\n        .subscribeToFormUpdates(handleFormUpdate);\r\n      return unsubscribe;\r\n    }, [stateKey, stateHandler, metadataContext, plugin, options]);\r\n\r\n    return null;\r\n  }\r\n);\r\n/**\r\n * The main orchestrator component. It reads from the central pluginStore\r\n * and renders a `PluginInstance` controller for each active plugin.\r\n */\r\nexport function PluginRunner({ children }: { children: React.ReactNode }) {\r\n  // A simple way to force a re-render when the store changes.\r\n  const [, forceUpdate] = useReducer((c) => c + 1, 0);\r\n\r\n  // Subscribe to the store. When plugins or their options are added/removed,\r\n  // this component will re-render to update the list of PluginInstances.\r\n  useEffect(() => {\r\n    const unsubscribe = pluginStore.subscribe(forceUpdate);\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const { pluginOptions, stateHandlers, registeredPlugins } =\r\n    pluginStore.getState();\r\n\r\n  return (\r\n    <>\r\n      {/*\r\n        This declarative mapping is the core of the solution.\r\n        React will now manage adding and removing `PluginInstance` components\r\n        as the application state changes, ensuring hooks are handled safely.\r\n      */}\r\n      {Array.from(pluginOptions.entries()).map(([stateKey, pluginMap]) => {\r\n        const stateHandler = stateHandlers.get(stateKey);\r\n        if (!stateHandler) {\r\n          return null; // Don't render a runner if the state handler isn't ready.\r\n        }\r\n\r\n        return Array.from(pluginMap.entries()).map(([pluginName, options]) => {\r\n          const plugin = registeredPlugins.find((p) => p.name === pluginName);\r\n          if (!plugin) {\r\n            return null; // Don't render if the plugin is not in the registered list.\r\n          }\r\n\r\n          // Render a dedicated, memoized controller for this specific plugin configuration.\r\n          return (\r\n            <PluginInstance\r\n              key={`${stateKey}:${pluginName}`}\r\n              stateKey={stateKey}\r\n              plugin={plugin}\r\n              options={options}\r\n              stateHandler={stateHandler}\r\n            />\r\n          );\r\n        });\r\n      })}\r\n\r\n      {children}\r\n    </>\r\n  );\r\n}\r\n"],"names":["setHookResult","removeHookResult","pluginStore","PluginInstance","React","stateKey","plugin","options","stateHandler","isInitialMount","setIsInitialMount","useState","metadataContext","useMemo","createMetadataContext","hookContext","hookData","useEffect","lastProcessedOptionsRef","useRef","isInitialTransform","setIsInitialTransform","isDeepEqual","hookDataRef","handleUpdate","update","handleFormUpdate","event","path","PluginRunner","children","forceUpdate","useReducer","pluginOptions","stateHandlers","registeredPlugins","jsxs","Fragment","pluginMap","pluginName","p","jsx"],"mappings":"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"}