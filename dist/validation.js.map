{"version":3,"file":"validation.js","sources":["../src/validation.ts"],"sourcesContent":["// in utils.ts\r\n\r\nimport { UpdateTypeDetail } from './CogsState'; // Adjust path as needed\r\nimport { getGlobalStore } from './store';\r\nimport { isDeepEqual } from './utility';\r\nimport { ZodType } from 'zod';\r\n\r\n/**\r\n * THIS IS THE CORRECTED FUNCTION.\r\n */\r\nexport function runValidation(\r\n  operation: UpdateTypeDetail,\r\n  trigger: 'onBlur' | 'onChange' | 'programmatic'\r\n) {\r\n  const {\r\n    getInitialOptions,\r\n    getShadowMetadata,\r\n    setShadowMetadata,\r\n    notifyPathSubscribers,\r\n  } = getGlobalStore.getState();\r\n  const { stateKey, path, newValue, updateType } = operation;\r\n\r\n  if (updateType !== 'update') {\r\n    return;\r\n  }\r\n\r\n  const validationOptions = getInitialOptions(stateKey)?.validation;\r\n  if (!validationOptions) return;\r\n\r\n  const currentMeta = getShadowMetadata(stateKey, path) || {};\r\n  const fieldSchema = currentMeta.typeInfo?.schema as ZodType | undefined;\r\n  const currentStatus = currentMeta.validation?.status;\r\n\r\n  let shouldValidate = false;\r\n  let severity: 'error' | 'warning' = 'error';\r\n\r\n  if (trigger === 'onBlur' && validationOptions.onBlur) {\r\n    shouldValidate = true;\r\n    severity = validationOptions.onBlur;\r\n  } else if (trigger === 'onChange' && validationOptions.onChange) {\r\n    shouldValidate = true;\r\n    severity = validationOptions.onChange;\r\n  } else if (trigger === 'onChange' && currentStatus === 'INVALID') {\r\n    shouldValidate = true;\r\n    severity = 'warning';\r\n  } else if (trigger === 'programmatic') {\r\n    if (validationOptions.onBlur || validationOptions.onChange) {\r\n      shouldValidate = true;\r\n\r\n      severity =\r\n        validationOptions.onBlur || validationOptions.onChange || 'error';\r\n    }\r\n  }\r\n\r\n  if (!shouldValidate || !fieldSchema) {\r\n    return;\r\n  }\r\n\r\n  // The rest of the function is the same.\r\n  const result = fieldSchema.safeParse(newValue);\r\n  const newValidationState = {\r\n    status: result.success ? 'VALID' : 'INVALID',\r\n    errors: result.success\r\n      ? []\r\n      : [\r\n          {\r\n            source: 'client',\r\n            message: result.error.issues[0]?.message || 'Invalid value',\r\n            severity: severity,\r\n          },\r\n        ],\r\n    lastValidated: Date.now(),\r\n  };\r\n\r\n  if (!isDeepEqual(currentMeta.validation, newValidationState)) {\r\n    setShadowMetadata(stateKey, path, {\r\n      ...currentMeta,\r\n      validation: newValidationState,\r\n    });\r\n    notifyPathSubscribers([stateKey, ...path].join('.'), {\r\n      type: 'VALIDATION_UPDATE',\r\n    });\r\n  }\r\n}\r\n"],"names":["runValidation","operation","trigger","getInitialOptions","getShadowMetadata","setShadowMetadata","notifyPathSubscribers","getGlobalStore","stateKey","path","newValue","updateType","validationOptions","currentMeta","fieldSchema","currentStatus","shouldValidate","severity","result","newValidationState","isDeepEqual"],"mappings":";;AAUO,SAASA,EACdC,GACAC,GACA;AACA,QAAM;AAAA,IACJ,mBAAAC;AAAA,IACA,mBAAAC;AAAA,IACA,mBAAAC;AAAA,IACA,uBAAAC;AAAA,EAAA,IACEC,EAAe,SAAA,GACb,EAAE,UAAAC,GAAU,MAAAC,GAAM,UAAAC,GAAU,YAAAC,MAAeV;AAEjD,MAAIU,MAAe;AACjB;AAGF,QAAMC,IAAoBT,EAAkBK,CAAQ,GAAG;AACvD,MAAI,CAACI,EAAmB;AAExB,QAAMC,IAAcT,EAAkBI,GAAUC,CAAI,KAAK,CAAA,GACnDK,IAAcD,EAAY,UAAU,QACpCE,IAAgBF,EAAY,YAAY;AAE9C,MAAIG,IAAiB,IACjBC,IAAgC;AAoBpC,MAlBIf,MAAY,YAAYU,EAAkB,UAC5CI,IAAiB,IACjBC,IAAWL,EAAkB,UACpBV,MAAY,cAAcU,EAAkB,YACrDI,IAAiB,IACjBC,IAAWL,EAAkB,YACpBV,MAAY,cAAca,MAAkB,aACrDC,IAAiB,IACjBC,IAAW,aACFf,MAAY,mBACjBU,EAAkB,UAAUA,EAAkB,cAChDI,IAAiB,IAEjBC,IACEL,EAAkB,UAAUA,EAAkB,YAAY,UAI5D,CAACI,KAAkB,CAACF;AACtB;AAIF,QAAMI,IAASJ,EAAY,UAAUJ,CAAQ,GACvCS,IAAqB;AAAA,IACzB,QAAQD,EAAO,UAAU,UAAU;AAAA,IACnC,QAAQA,EAAO,UACX,KACA;AAAA,MACE;AAAA,QACE,QAAQ;AAAA,QACR,SAASA,EAAO,MAAM,OAAO,CAAC,GAAG,WAAW;AAAA,QAC5C,UAAAD;AAAA,MAAA;AAAA,IACF;AAAA,IAEN,eAAe,KAAK,IAAA;AAAA,EAAI;AAG1B,EAAKG,EAAYP,EAAY,YAAYM,CAAkB,MACzDd,EAAkBG,GAAUC,GAAM;AAAA,IAChC,GAAGI;AAAA,IACH,YAAYM;AAAA,EAAA,CACb,GACDb,EAAsB,CAACE,GAAU,GAAGC,CAAI,EAAE,KAAK,GAAG,GAAG;AAAA,IACnD,MAAM;AAAA,EAAA,CACP;AAEL;"}