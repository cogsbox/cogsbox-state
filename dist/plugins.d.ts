import { z } from 'zod';
import { default as React } from 'react';
import { StateObject, UpdateTypeDetail } from './CogsState';

export type KeyedTypes<TMap extends Record<string, any>> = {
    __key: 'keyed';
    map: {
        [K in keyof TMap]: TMap[K];
    };
};
export declare const keyedSchema: <TMap extends Record<string, any>>() => z.ZodType<KeyedTypes<TMap>>;
type InferZodObject<T extends Record<string, z.ZodTypeAny>> = {
    [K in keyof T]: z.infer<T[K]>;
};
export type InferPerKeyValueMap<TMap extends Record<string, Record<string, z.ZodTypeAny>>> = {
    [K in keyof TMap]: InferZodObject<TMap[K]>;
};
type ExtractFieldExtensions<THookReturn, TBase> = THookReturn extends {
    __fieldMetaExtensions: infer E;
} ? TBase & E : TBase;
type DeconstructedCogsMethods<TStateSlice = any> = {
    initialiseState: (data: TStateSlice) => void;
    applyOperation: (patch: any, meta?: {
        dontUpdate?: boolean;
    }) => void;
    addZodErrors: (errors: any[]) => void;
    getState: () => TStateSlice;
    setOptions: (options: any) => void;
};
export declare function toDeconstructedMethods(stateHandler: StateObject<any>): {
    initialiseState: (data: any) => void;
    applyOperation: (patch: any, meta?: {
        dontUpdate?: boolean;
    }) => void;
    addZodErrors: (errors: any[]) => void;
    getState: () => any;
    setOptions: (opts: any) => void;
};
export type UseHookParams<TOptions, TPluginMetaData, TFieldMetaData, TStateSlice = any> = DeconstructedCogsMethods<TStateSlice> & {
    stateKey: string;
    getPluginMetaData: () => TPluginMetaData | undefined;
    setPluginMetaData: (data: Partial<TPluginMetaData>) => void;
    removePluginMetaData: () => void;
    getFieldMetaData: (path: string[]) => TFieldMetaData | undefined;
    setFieldMetaData: (path: string[], data: Partial<TFieldMetaData>) => void;
    removeFieldMetaData: (path: string[]) => void;
    options: TOptions;
    pluginName: string;
    isInitialMount: boolean;
};
export type TransformStateParams<TOptions, THookReturn, TPluginMetaData, TFieldMetaData, TStateSlice = any> = DeconstructedCogsMethods<TStateSlice> & {
    stateKey: string;
    getPluginMetaData: () => TPluginMetaData | undefined;
    setPluginMetaData: (data: Partial<TPluginMetaData>) => void;
    removePluginMetaData: () => void;
    getFieldMetaData: (path: string[]) => ExtractFieldExtensions<THookReturn, TFieldMetaData> | undefined;
    setFieldMetaData: (path: string[], data: Partial<ExtractFieldExtensions<THookReturn, TFieldMetaData>>) => void;
    removeFieldMetaData: (path: string[]) => void;
    options: TOptions;
    hookData?: THookReturn;
    previousState?: TStateSlice;
    isInitialTransform: boolean;
    pluginName: string;
};
export type OnUpdateParams<TOptions, THookReturn, TPluginMetaData, TFieldMetaData, TStateSlice = any> = DeconstructedCogsMethods<TStateSlice> & {
    stateKey: string;
    getPluginMetaData: () => TPluginMetaData | undefined;
    setPluginMetaData: (data: Partial<TPluginMetaData>) => void;
    removePluginMetaData: () => void;
    getFieldMetaData: (path: string[]) => ExtractFieldExtensions<THookReturn, TFieldMetaData> | undefined;
    setFieldMetaData: (path: string[], data: Partial<ExtractFieldExtensions<THookReturn, TFieldMetaData>>) => void;
    removeFieldMetaData: (path: string[]) => void;
    update: UpdateTypeDetail;
    path?: string[];
    options: TOptions;
    hookData?: THookReturn;
    previousValue?: any;
    nextValue?: any;
    updateSource?: 'user' | 'plugin' | 'system';
    pluginName: string;
};
export type OnFormUpdateParams<TOptions, THookReturn, TPluginMetaData, TFieldMetaData, TStateSlice = any> = DeconstructedCogsMethods<TStateSlice> & {
    stateKey: string;
    getPluginMetaData: () => TPluginMetaData | undefined;
    setPluginMetaData: (data: Partial<TPluginMetaData>) => void;
    removePluginMetaData: () => void;
    getFieldMetaData: (path: string[]) => ExtractFieldExtensions<THookReturn, TFieldMetaData> | undefined;
    setFieldMetaData: (path: string[], data: Partial<ExtractFieldExtensions<THookReturn, TFieldMetaData>>) => void;
    removeFieldMetaData: (path: string[]) => void;
    path: string[];
    event: {
        type: 'focus' | 'blur' | 'input';
        value?: any;
        path: string[];
    };
    options: TOptions;
    hookData?: THookReturn;
    formState?: 'pristine' | 'dirty' | 'submitting' | 'submitted';
    pluginName: string;
};
export type FormWrapperParams<TOptions, THookReturn, TPluginMetaData, TFieldMetaData, TStateSlice = any> = {
    element: React.ReactNode;
    path: string[];
    stateKey: string;
    options: TOptions;
    hookData?: THookReturn;
    fieldType?: string;
    wrapperDepth?: number;
    initialiseState: (data: TStateSlice) => void;
    applyOperation: (patch: any, meta?: {
        dontUpdate?: boolean;
    }) => void;
    addZodErrors: (errors: any[]) => void;
    getState: () => TStateSlice;
    setOptions: (options: any) => void;
    getPluginMetaData: () => TPluginMetaData | undefined;
    setPluginMetaData: (data: Partial<TPluginMetaData>) => void;
    removePluginMetaData: () => void;
    getFieldMetaData: (path: string[]) => ExtractFieldExtensions<THookReturn, TFieldMetaData> | undefined;
    setFieldMetaData: (path: string[], data: Partial<ExtractFieldExtensions<THookReturn, TFieldMetaData>>) => void;
    removeFieldMetaData: (path: string[]) => void;
    pluginName: string;
};
export type CogsPlugin<TName extends string, TOptions, THookReturn, TPluginMetaData, TFieldMetaData> = {
    name: TName;
    useHook?: (params: UseHookParams<TOptions, TPluginMetaData, TFieldMetaData, any>) => THookReturn;
    transformState?: (params: TransformStateParams<TOptions, THookReturn, TPluginMetaData, TFieldMetaData, any>) => void;
    onUpdate?: (params: OnUpdateParams<TOptions, THookReturn, TPluginMetaData, TFieldMetaData, any>) => void;
    onFormUpdate?: (params: OnFormUpdateParams<TOptions, THookReturn, TPluginMetaData, TFieldMetaData, any>) => void;
    formWrapper?: (params: FormWrapperParams<TOptions, THookReturn, TPluginMetaData, TFieldMetaData, any>) => React.ReactNode;
};
export type ExtractPluginOptions<TPlugins extends readonly CogsPlugin<any, any, any, any, any>[]> = {
    [P in TPlugins[number] as P['name']]?: P extends CogsPlugin<any, infer O, any, any, any> ? O : never;
};
export declare function createMetadataContext<TPluginMetaData, TFieldMetaData>(stateKey: string, pluginName: string): {
    getPluginMetaData: () => TPluginMetaData | undefined;
    setPluginMetaData: (data: Partial<TPluginMetaData>) => void;
    removePluginMetaData: () => void;
    getFieldMetaData: (path: string[]) => TFieldMetaData | undefined;
    setFieldMetaData: (path: string[], data: Partial<TFieldMetaData>) => void;
    removeFieldMetaData: (path: string[]) => void;
};
export declare function createPluginContext<TOptionsSchema extends z.ZodTypeAny, TPluginMetaDataSchema extends z.ZodTypeAny = z.ZodTypeAny, TFieldMetaDataSchema extends z.ZodTypeAny = z.ZodTypeAny>(schemas: {
    options: TOptionsSchema;
    pluginMetaData?: TPluginMetaDataSchema;
    fieldMetaData?: TFieldMetaDataSchema;
}): {
    createPlugin: <TName extends string>(name: TName) => {
        name: TName;
        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
    } & {
        transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
            name: TName;
            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
        } & {
            onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                name: TName;
                useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
            } & {
                onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            } & {
                formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            };
        } & {
            onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                name: TName;
                useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
            } & {
                onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            } & {
                formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            };
        } & {
            formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                name: TName;
                useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
            } & {
                onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            } & {
                onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            };
        };
    } & {
        onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
            name: TName;
            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
        } & {
            transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                name: TName;
                useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
            } & {
                onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            } & {
                formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            };
        } & {
            onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                name: TName;
                useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
            } & {
                transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            } & {
                formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            };
        } & {
            formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                name: TName;
                useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
            } & {
                transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            } & {
                onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            };
        };
    } & {
        onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
            name: TName;
            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
        } & {
            transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                name: TName;
                useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
            } & {
                onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            } & {
                formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            };
        } & {
            onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                name: TName;
                useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
            } & {
                transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            } & {
                formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            };
        } & {
            formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                name: TName;
                useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
            } & {
                transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            } & {
                onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            };
        };
    } & {
        formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
            name: TName;
            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
        } & {
            transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                name: TName;
                useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
            } & {
                onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            } & {
                onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            };
        } & {
            onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                name: TName;
                useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
            } & {
                transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            } & {
                onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            };
        } & {
            onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                name: TName;
                useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
            } & {
                transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            } & {
                onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => never) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, never, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    };
                };
            };
        };
    } & {
        useHook<THookReturn>(hookFn: (params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>>) => THookReturn): {
            name: TName;
            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
        } & {
            transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                name: TName;
                useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
            } & {
                onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                } & {
                    formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                };
            } & {
                onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                } & {
                    formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                };
            } & {
                formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                } & {
                    onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                };
            };
        } & {
            onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                name: TName;
                useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
            } & {
                transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                } & {
                    formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                };
            } & {
                onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                } & {
                    formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                };
            } & {
                formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                } & {
                    onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                };
            };
        } & {
            onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                name: TName;
                useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
            } & {
                transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                } & {
                    formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                };
            } & {
                onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                } & {
                    formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                };
            } & {
                formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                } & {
                    onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                };
            };
        } & {
            formWrapper(fn: (params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode): {
                name: TName;
                useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
            } & {
                transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                } & {
                    onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                };
            } & {
                onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                } & {
                    onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                };
            } & {
                onFormUpdate(fn: (params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                    name: TName;
                    useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                    transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                    formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                } & {
                    transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                } & {
                    onUpdate(fn: (params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                        name: TName;
                        useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                        transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                        formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                    } & {
                        transformState(fn: (params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void): {
                            name: TName;
                            useHook?: ((params: UseHookParams<z.core.output<TOptionsSchema>, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => THookReturn) | undefined;
                            transformState?: ((params: TransformStateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onUpdate?: ((params: OnUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            onFormUpdate?: ((params: OnFormUpdateParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => void) | undefined;
                            formWrapper?: ((params: FormWrapperParams<z.core.output<TOptionsSchema>, THookReturn, z.core.output<TPluginMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TPluginMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, z.core.output<TFieldMetaDataSchema extends z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>> ? TFieldMetaDataSchema : z.ZodType<unknown, unknown, z.core.$ZodTypeInternals<unknown, unknown>>>, any>) => React.ReactNode) | undefined;
                        };
                    };
                };
            };
        };
    };
};
export {};
//# sourceMappingURL=plugins.d.ts.map