{"version":3,"file":"plugins.js","sources":["../src/plugins.ts"],"sourcesContent":["import { UpdateTypeDetail, StateObject, PluginData } from './CogsState';\r\nimport { useState, useEffect } from 'react';\r\ntype Prettify<T> = { [K in keyof T]: T[K] } & {};\r\n\r\n// Your refined, more explicit version.\r\nexport type KeyedTypes<TMap extends Record<string, any>> = {\r\n  __key: 'keyed';\r\n  map: { [K in keyof TMap]: TMap[K] };\r\n};\r\ntype PluginContext<TState> = {\r\n  [K in keyof TState]: {\r\n    stateKey: K;\r\n    cogsState: StateObject<TState[K]>;\r\n  };\r\n}[keyof TState];\r\n\r\nexport type CogsPlugin<\r\n  TName extends string,\r\n  TState = any,\r\n  TOptions = any,\r\n  THookReturn = any,\r\n> = {\r\n  name: TName;\r\n  useHook?: (context: PluginContext<TState>, options: TOptions) => THookReturn;\r\n  transformState?: (\r\n    context: PluginContext<TState>,\r\n    options: TOptions,\r\n    hook?: THookReturn\r\n  ) => void;\r\n  onUpdate?: (\r\n    stateKey: keyof TState,\r\n    update: UpdateTypeDetail,\r\n    options: TOptions,\r\n    hook?: THookReturn\r\n  ) => void;\r\n};\r\n\r\nexport type ExtractPluginOptions<\r\n  TPlugins extends readonly CogsPlugin<any, any, any>[],\r\n> = {\r\n  [P in TPlugins[number] as P['name']]?: P extends CogsPlugin<any, infer O, any>\r\n    ? O\r\n    : never;\r\n};\r\n\r\n// The improved builder that makes onUpdate optional\r\nexport function createPluginContext<\r\n  TState extends Record<string, any>,\r\n  TOptions = unknown,\r\n>() {\r\n  function createPlugin<TName extends string>(name: TName) {\r\n    // Helper to create the final plugin object\r\n    const createPluginObject = <THookReturn = any>(\r\n      hookFn?: (\r\n        context: PluginContext<TState>,\r\n        options: TOptions\r\n      ) => THookReturn,\r\n      transformFn?: (\r\n        context: PluginContext<TState>,\r\n        options: TOptions,\r\n        ...args: THookReturn extends never ? [] : [hookData: THookReturn]\r\n      ) => void,\r\n      updateHandler?: (\r\n        context: PluginContext<TState>,\r\n        update: UpdateTypeDetail,\r\n        options: TOptions,\r\n        ...args: THookReturn extends never ? [] : [hookData: THookReturn]\r\n      ) => void\r\n    ): Prettify<CogsPlugin<TName, TState, TOptions, THookReturn>> => {\r\n      return {\r\n        name,\r\n        useHook: hookFn as any,\r\n        transformState: transformFn as any,\r\n        onUpdate: updateHandler as any,\r\n      };\r\n    };\r\n\r\n    const make = <THookReturn = never>(\r\n      hookFn?: (\r\n        context: PluginContext<TState>,\r\n        options: TOptions\r\n      ) => THookReturn\r\n    ) => {\r\n      // Return the plugin directly if no methods are chained\r\n      const plugin = createPluginObject<THookReturn>(hookFn);\r\n\r\n      return Object.assign(plugin, {\r\n        transformState(\r\n          transformFn: (\r\n            context: PluginContext<TState>,\r\n            options: TOptions,\r\n            ...args: THookReturn extends never ? [] : [hookData: THookReturn]\r\n          ) => void\r\n        ) {\r\n          // Create plugin with transform, still allowing optional onUpdate\r\n          const pluginWithTransform = createPluginObject<THookReturn>(\r\n            hookFn,\r\n            transformFn\r\n          );\r\n\r\n          return Object.assign(pluginWithTransform, {\r\n            onUpdate(\r\n              updateHandler: (\r\n                context: PluginContext<TState>,\r\n                update: UpdateTypeDetail,\r\n                options: TOptions,\r\n                ...args: THookReturn extends never\r\n                  ? []\r\n                  : [hookData: THookReturn]\r\n              ) => void\r\n            ) {\r\n              return createPluginObject<THookReturn>(\r\n                hookFn,\r\n                transformFn,\r\n                updateHandler\r\n              );\r\n            },\r\n          });\r\n        },\r\n        onUpdate(\r\n          updateHandler: (\r\n            context: PluginContext<TState>,\r\n            update: UpdateTypeDetail,\r\n            options: TOptions,\r\n            ...args: THookReturn extends never ? [] : [hookData: THookReturn]\r\n          ) => void\r\n        ) {\r\n          return createPluginObject<THookReturn>(\r\n            hookFn,\r\n            undefined,\r\n            updateHandler\r\n          );\r\n        },\r\n      });\r\n    };\r\n\r\n    // For starting without useHook\r\n    const basePlugin = createPluginObject();\r\n\r\n    return Object.assign(basePlugin, {\r\n      useHook<THookReturn>(\r\n        hookFn: (\r\n          context: PluginContext<TState>,\r\n          options: TOptions\r\n        ) => THookReturn\r\n      ) {\r\n        return make<THookReturn>(hookFn);\r\n      },\r\n      transformState(\r\n        transformFn: (context: PluginContext<TState>, options: TOptions) => void\r\n      ) {\r\n        const pluginWithTransform = createPluginObject(\r\n          undefined,\r\n          transformFn as any\r\n        );\r\n\r\n        return Object.assign(pluginWithTransform, {\r\n          onUpdate(\r\n            updateHandler: (\r\n              context: PluginContext<TState>,\r\n              update: UpdateTypeDetail,\r\n              options: TOptions\r\n            ) => void\r\n          ) {\r\n            return createPluginObject(\r\n              undefined,\r\n              transformFn as any,\r\n              updateHandler as any\r\n            );\r\n          },\r\n        });\r\n      },\r\n      onUpdate(\r\n        updateHandler: (\r\n          context: PluginContext<TState>,\r\n          update: UpdateTypeDetail,\r\n          options: TOptions\r\n        ) => void\r\n      ) {\r\n        return createPluginObject(undefined, undefined, updateHandler as any);\r\n      },\r\n    });\r\n  }\r\n\r\n  return { createPlugin };\r\n}\r\n\r\nexport const PluginExecutor = ({\r\n  plugin,\r\n  pluginOptions,\r\n  cogsContext,\r\n  pluginDataRef,\r\n}: {\r\n  plugin: CogsPlugin<any, any, any, any>;\r\n  pluginOptions: any;\r\n  cogsContext: PluginContext<any>;\r\n  pluginDataRef: React.MutableRefObject<PluginData[]>;\r\n}) => {\r\n  // 1. Call `useHook` at the top level of this component. This is safe.\r\n  const hookData = plugin.useHook\r\n    ? plugin.useHook(cogsContext, pluginOptions)\r\n    : undefined;\r\n\r\n  // 2. Manage the `transformState` logic within a useEffect.\r\n  // This runs after render when dependencies change.\r\n  useEffect(() => {\r\n    if (plugin.transformState) {\r\n      console.log(`▶️ Running transformState for plugin: \"${plugin.name}\"`);\r\n      plugin.transformState(cogsContext, pluginOptions, hookData);\r\n    }\r\n  }, [plugin, pluginOptions, cogsContext, hookData]); // Reruns if these change\r\n\r\n  // 3. Use an effect to register this plugin's data for the `onUpdate` callback.\r\n  // The cleanup function ensures the data is removed when the plugin is no longer active.\r\n  useEffect(() => {\r\n    const currentPluginData = {\r\n      plugin,\r\n      options: pluginOptions,\r\n      hookData,\r\n    };\r\n\r\n    // Add this plugin's data to the shared ref\r\n    pluginDataRef.current.push(currentPluginData);\r\n\r\n    // The effect's cleanup function\r\n    return () => {\r\n      pluginDataRef.current = pluginDataRef.current.filter(\r\n        (p) => p.plugin.name !== plugin.name\r\n      );\r\n    };\r\n  }, [plugin, pluginOptions, hookData, pluginDataRef]);\r\n\r\n  // This component renders nothing to the DOM\r\n  return null;\r\n};\r\n\r\n// --- DEMO USAGE - ALL THESE NOW WORK ---\r\n\r\ntype MyGlobalState = {\r\n  user: { test: string };\r\n  address: { city: string; country: string };\r\n};\r\n\r\nconst { createPlugin } = createPluginContext<MyGlobalState, { id: string }>();\r\n\r\n// Works with just transformState (no onUpdate required!)\r\nconst analyticsPlugin = createPlugin('analyticsPlugin').transformState(\r\n  ({ stateKey, cogsState }, opts) => {\r\n    if (stateKey === 'user') {\r\n      cogsState.$update({ test: 'This works!' });\r\n    }\r\n    if (stateKey === 'address') {\r\n      cogsState.$update({ city: 'London', country: 'UK' });\r\n    }\r\n  }\r\n);\r\n\r\n// Works with all three methods\r\nconst fullPlugin = createPlugin('fullPlugin')\r\n  .useHook(({ stateKey, cogsState }, options) => {\r\n    const [updateCount, setUpdateCount] = useState(0);\r\n    return {\r\n      count: updateCount,\r\n      increment: () => setUpdateCount((c) => c + 1),\r\n    };\r\n  })\r\n  .transformState(({ stateKey, cogsState }, options, hookData) => {\r\n    if (hookData) {\r\n      console.log(\r\n        `[Logger] RENDER: Key '${stateKey}' has been updated ${hookData.count} times.`\r\n      );\r\n    }\r\n  })\r\n  .onUpdate(({ stateKey, cogsState }, update, options, hookData) => {\r\n    if (hookData) {\r\n      console.log(`[Logger] UPDATE: Key '${stateKey}' just changed.`);\r\n      hookData.increment();\r\n    }\r\n  });\r\n\r\n// Works with just useHook\r\nconst hookOnlyPlugin = createPlugin('hookOnly').useHook((context, options) => {\r\n  return { id: 'test' };\r\n});\r\n\r\n// Works with no methods at all (though not very useful)\r\nconst emptyPlugin = createPlugin('empty');\r\n"],"names":["createPluginContext","createPlugin","name","createPluginObject","hookFn","transformFn","updateHandler","make","plugin","pluginWithTransform","basePlugin","PluginExecutor","pluginOptions","cogsContext","pluginDataRef","hookData","useEffect","currentPluginData","p","stateKey","cogsState","opts","options","updateCount","setUpdateCount","useState","c","update","context"],"mappings":"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"}