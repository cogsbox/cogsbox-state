{"version":3,"file":"plugins.js","sources":["../src/plugins.ts"],"sourcesContent":["import { UpdateTypeDetail, StateObject, PluginData } from './CogsState';\r\nimport { useState, useEffect } from 'react';\r\ntype Prettify<T> = { [K in keyof T]: T[K] } & {};\r\n\r\n// Your refined, more explicit version.\r\nexport type KeyedTypes<TMap extends Record<string, any>> = {\r\n  __key: 'keyed';\r\n  map: { [K in keyof TMap]: TMap[K] };\r\n};\r\nexport type PluginContext<TState, TMetaData> = {\r\n  [K in keyof TState]: {\r\n    stateKey: K;\r\n    cogsState: StateObject<TState[K]>;\r\n    getPluginMetaData: () => TMetaData | undefined;\r\n    /** Sets/merges the metadata for this plugin at the current state path */\r\n    setPluginMetaData: (data: Partial<TMetaData>) => void;\r\n    /** Removes all metadata for this plugin at the current state path */\r\n    removePluginMetaData: () => void;\r\n  };\r\n}[keyof TState];\r\n\r\nexport type CogsPlugin<\r\n  TName extends string,\r\n  TState = any,\r\n  TOptions = any,\r\n  THookReturn = any,\r\n  TPluginMetaData = any,\r\n> = {\r\n  name: TName;\r\n  useHook?: (\r\n    context: PluginContext<TState, TPluginMetaData>,\r\n    options: TOptions\r\n  ) => THookReturn;\r\n  transformState?: (\r\n    context: PluginContext<TState, TPluginMetaData>,\r\n    options: TOptions,\r\n    hook?: THookReturn\r\n  ) => void;\r\n  onUpdate?: (\r\n    stateKey: keyof TState,\r\n    update: UpdateTypeDetail,\r\n    options: TOptions,\r\n    hook?: THookReturn\r\n  ) => void;\r\n  onFormUpdate?: (\r\n    stateKey: keyof TState,\r\n    event: { type: 'focus' | 'blur' | 'input'; path: string; value?: any },\r\n    options: TOptions,\r\n    hook?: THookReturn\r\n  ) => void;\r\n};\r\n\r\nexport type ExtractPluginOptions<\r\n  TPlugins extends readonly CogsPlugin<any, any, any>[],\r\n> = {\r\n  [P in TPlugins[number] as P['name']]?: P extends CogsPlugin<any, infer O, any>\r\n    ? O\r\n    : never;\r\n};\r\nexport function createPluginContext<\r\n  TState extends Record<string, any>,\r\n  TOptions = unknown,\r\n  TPluginMetaData extends Record<string, any> = {},\r\n>() {\r\n  function createPlugin<TName extends string>(name: TName) {\r\n    // Helper to create the final plugin object\r\n    const createPluginObject = <THookReturn = any>(\r\n      hookFn?: (\r\n        context: PluginContext<TState, TPluginMetaData>,\r\n        options: TOptions\r\n      ) => THookReturn,\r\n      transformFn?: (\r\n        context: PluginContext<TState, TPluginMetaData>,\r\n        options: TOptions,\r\n        ...args: THookReturn extends never ? [] : [hookData: THookReturn]\r\n      ) => void,\r\n      updateHandler?: (\r\n        context: PluginContext<TState, TPluginMetaData>,\r\n        update: UpdateTypeDetail,\r\n        options: TOptions,\r\n        ...args: THookReturn extends never ? [] : [hookData: THookReturn]\r\n      ) => void,\r\n      formUpdateHandler?: (\r\n        context: PluginContext<TState, TPluginMetaData>,\r\n        event: { type: 'focus' | 'blur' | 'input'; path: string; value?: any },\r\n        options: TOptions,\r\n        ...args: THookReturn extends never ? [] : [hookData: THookReturn]\r\n      ) => void\r\n    ): Prettify<CogsPlugin<TName, TState, TOptions, THookReturn>> => {\r\n      return {\r\n        name,\r\n        useHook: hookFn as any,\r\n        transformState: transformFn as any,\r\n        onUpdate: updateHandler as any,\r\n        onFormUpdate: formUpdateHandler as any,\r\n      };\r\n    };\r\n\r\n    const make = <THookReturn = never>(\r\n      hookFn?: (\r\n        context: PluginContext<TState, TPluginMetaData>,\r\n        options: TOptions\r\n      ) => THookReturn\r\n    ) => {\r\n      const plugin = createPluginObject<THookReturn>(hookFn);\r\n\r\n      return Object.assign(plugin, {\r\n        transformState(\r\n          transformFn: (\r\n            context: PluginContext<TState, TPluginMetaData>,\r\n            options: TOptions,\r\n            ...args: THookReturn extends never ? [] : [hookData: THookReturn]\r\n          ) => void\r\n        ) {\r\n          const pluginWithTransform = createPluginObject<THookReturn>(\r\n            hookFn,\r\n            transformFn\r\n          );\r\n\r\n          return Object.assign(pluginWithTransform, {\r\n            onUpdate(\r\n              updateHandler: (\r\n                context: PluginContext<TState, TPluginMetaData>,\r\n                update: UpdateTypeDetail,\r\n                options: TOptions,\r\n                ...args: THookReturn extends never\r\n                  ? []\r\n                  : [hookData: THookReturn]\r\n              ) => void\r\n            ) {\r\n              const pluginWithUpdate = createPluginObject<THookReturn>(\r\n                hookFn,\r\n                transformFn,\r\n                updateHandler\r\n              );\r\n\r\n              return Object.assign(pluginWithUpdate, {\r\n                onFormUpdate(\r\n                  formUpdateHandler: (\r\n                    context: PluginContext<TState, TPluginMetaData>,\r\n                    event: {\r\n                      type: 'focus' | 'blur' | 'input';\r\n                      path: string;\r\n                      value?: any;\r\n                    },\r\n                    options: TOptions,\r\n                    ...args: THookReturn extends never\r\n                      ? []\r\n                      : [hookData: THookReturn]\r\n                  ) => void\r\n                ) {\r\n                  return createPluginObject<THookReturn>(\r\n                    hookFn,\r\n                    transformFn,\r\n                    updateHandler,\r\n                    formUpdateHandler\r\n                  );\r\n                },\r\n              });\r\n            },\r\n            onFormUpdate(\r\n              formUpdateHandler: (\r\n                context: PluginContext<TState, TPluginMetaData>,\r\n                event: {\r\n                  type: 'focus' | 'blur' | 'input';\r\n                  path: string;\r\n                  value?: any;\r\n                },\r\n                options: TOptions,\r\n                ...args: THookReturn extends never\r\n                  ? []\r\n                  : [hookData: THookReturn]\r\n              ) => void\r\n            ) {\r\n              return createPluginObject<THookReturn>(\r\n                hookFn,\r\n                transformFn,\r\n                undefined,\r\n                formUpdateHandler\r\n              );\r\n            },\r\n          });\r\n        },\r\n        onUpdate(\r\n          updateHandler: (\r\n            context: PluginContext<TState, TPluginMetaData>,\r\n            update: UpdateTypeDetail,\r\n            options: TOptions,\r\n            ...args: THookReturn extends never ? [] : [hookData: THookReturn]\r\n          ) => void\r\n        ) {\r\n          const pluginWithUpdate = createPluginObject<THookReturn>(\r\n            hookFn,\r\n            undefined,\r\n            updateHandler\r\n          );\r\n\r\n          return Object.assign(pluginWithUpdate, {\r\n            onFormUpdate(\r\n              formUpdateHandler: (\r\n                context: PluginContext<TState, TPluginMetaData>,\r\n                event: {\r\n                  type: 'focus' | 'blur' | 'input';\r\n                  path: string;\r\n                  value?: any;\r\n                },\r\n                options: TOptions,\r\n                ...args: THookReturn extends never\r\n                  ? []\r\n                  : [hookData: THookReturn]\r\n              ) => void\r\n            ) {\r\n              return createPluginObject<THookReturn>(\r\n                hookFn,\r\n                undefined,\r\n                updateHandler,\r\n                formUpdateHandler\r\n              );\r\n            },\r\n          });\r\n        },\r\n        onFormUpdate(\r\n          formUpdateHandler: (\r\n            context: PluginContext<TState, TPluginMetaData>,\r\n            event: {\r\n              type: 'focus' | 'blur' | 'input';\r\n              path: string;\r\n              value?: any;\r\n            },\r\n            options: TOptions,\r\n            ...args: THookReturn extends never ? [] : [hookData: THookReturn]\r\n          ) => void\r\n        ) {\r\n          return createPluginObject<THookReturn>(\r\n            hookFn,\r\n            undefined,\r\n            undefined,\r\n            formUpdateHandler\r\n          );\r\n        },\r\n      });\r\n    };\r\n\r\n    // For starting without useHook\r\n    const basePlugin = createPluginObject();\r\n\r\n    return Object.assign(basePlugin, {\r\n      useHook<THookReturn>(\r\n        hookFn: (\r\n          context: PluginContext<TState, TPluginMetaData>,\r\n          options: TOptions\r\n        ) => THookReturn\r\n      ) {\r\n        return make<THookReturn>(hookFn);\r\n      },\r\n      transformState(\r\n        transformFn: (\r\n          context: PluginContext<TState, TPluginMetaData>,\r\n          options: TOptions\r\n        ) => void\r\n      ) {\r\n        const pluginWithTransform = createPluginObject(\r\n          undefined,\r\n          transformFn as any\r\n        );\r\n\r\n        return Object.assign(pluginWithTransform, {\r\n          onUpdate(\r\n            updateHandler: (\r\n              context: PluginContext<TState, TPluginMetaData>,\r\n              update: UpdateTypeDetail,\r\n              options: TOptions\r\n            ) => void\r\n          ) {\r\n            const pluginWithUpdate = createPluginObject(\r\n              undefined,\r\n              transformFn as any,\r\n              updateHandler as any\r\n            );\r\n\r\n            return Object.assign(pluginWithUpdate, {\r\n              onFormUpdate(\r\n                formUpdateHandler: (\r\n                  context: PluginContext<TState, TPluginMetaData>,\r\n                  event: {\r\n                    type: 'focus' | 'blur' | 'input';\r\n                    path: string;\r\n                    value?: any;\r\n                  },\r\n                  options: TOptions\r\n                ) => void\r\n              ) {\r\n                return createPluginObject(\r\n                  undefined,\r\n                  transformFn as any,\r\n                  updateHandler as any,\r\n                  formUpdateHandler as any\r\n                );\r\n              },\r\n            });\r\n          },\r\n          onFormUpdate(\r\n            formUpdateHandler: (\r\n              context: PluginContext<TState, TPluginMetaData>,\r\n              event: {\r\n                type: 'focus' | 'blur' | 'input';\r\n                path: string;\r\n                value?: any;\r\n              },\r\n              options: TOptions\r\n            ) => void\r\n          ) {\r\n            return createPluginObject(\r\n              undefined,\r\n              transformFn as any,\r\n              undefined,\r\n              formUpdateHandler as any\r\n            );\r\n          },\r\n        });\r\n      },\r\n      onUpdate(\r\n        updateHandler: (\r\n          context: PluginContext<TState, TPluginMetaData>,\r\n          update: UpdateTypeDetail,\r\n          options: TOptions\r\n        ) => void\r\n      ) {\r\n        const pluginWithUpdate = createPluginObject(\r\n          undefined,\r\n          undefined,\r\n          updateHandler as any\r\n        );\r\n\r\n        return Object.assign(pluginWithUpdate, {\r\n          onFormUpdate(\r\n            formUpdateHandler: (\r\n              context: PluginContext<TState, TPluginMetaData>,\r\n              event: {\r\n                type: 'focus' | 'blur' | 'input';\r\n                path: string;\r\n                value?: any;\r\n              },\r\n              options: TOptions\r\n            ) => void\r\n          ) {\r\n            return createPluginObject(\r\n              undefined,\r\n              undefined,\r\n              updateHandler as any,\r\n              formUpdateHandler as any\r\n            );\r\n          },\r\n        });\r\n      },\r\n      onFormUpdate(\r\n        formUpdateHandler: (\r\n          context: PluginContext<TState, TPluginMetaData>,\r\n          event: {\r\n            type: 'focus' | 'blur' | 'input';\r\n            path: string;\r\n            value?: any;\r\n          },\r\n          options: TOptions\r\n        ) => void\r\n      ) {\r\n        return createPluginObject(\r\n          undefined,\r\n          undefined,\r\n          undefined,\r\n          formUpdateHandler as any\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  return { createPlugin };\r\n}\r\n\r\n// --- DEMO USAGE - ALL THESE NOW WORK ---\r\n\r\ntype MyGlobalState = {\r\n  user: { test: string };\r\n  address: { city: string; country: string };\r\n};\r\n\r\nconst { createPlugin } = createPluginContext<MyGlobalState, { id: string }>();\r\n\r\n// Works with just transformState (no onUpdate required!)\r\nconst analyticsPlugin = createPlugin('analyticsPlugin').transformState(\r\n  ({ stateKey, cogsState }, opts) => {\r\n    if (stateKey === 'user') {\r\n      cogsState.$update({ test: 'This works!' });\r\n    }\r\n    if (stateKey === 'address') {\r\n      cogsState.$update({ city: 'London', country: 'UK' });\r\n    }\r\n  }\r\n);\r\n\r\n// Works with all three methods\r\nconst fullPlugin = createPlugin('fullPlugin')\r\n  .useHook(({ stateKey, cogsState }, options) => {\r\n    const [updateCount, setUpdateCount] = useState(0);\r\n    return {\r\n      count: updateCount,\r\n      increment: () => setUpdateCount((c) => c + 1),\r\n    };\r\n  })\r\n  .transformState(({ stateKey, cogsState }, options, hookData) => {\r\n    if (hookData) {\r\n      console.log(\r\n        `[Logger] RENDER: Key '${stateKey}' has been updated ${hookData.count} times.`\r\n      );\r\n    }\r\n  })\r\n  .onUpdate(({ stateKey, cogsState }, update, options, hookData) => {\r\n    if (hookData) {\r\n      console.log(`[Logger] UPDATE: Key '${stateKey}' just changed.`);\r\n      hookData.increment();\r\n    }\r\n  });\r\n\r\n// Works with just useHook\r\nconst hookOnlyPlugin = createPlugin('hookOnly').useHook((context, options) => {\r\n  return { id: 'test' };\r\n});\r\n\r\n// Works with no methods at all (though not very useful)\r\nconst emptyPlugin = createPlugin('empty');\r\n"],"names":["createPluginContext","createPlugin","name","createPluginObject","hookFn","transformFn","updateHandler","formUpdateHandler","make","plugin","pluginWithTransform","pluginWithUpdate","basePlugin","stateKey","cogsState","opts","options","updateCount","setUpdateCount","useState","c","hookData","update","context"],"mappings":"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"}