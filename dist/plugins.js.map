{"version":3,"file":"plugins.js","sources":["../src/plugins.ts"],"sourcesContent":["import { UpdateTypeDetail, StateObject } from './CogsState';\r\n\r\n// Plugin type definition\r\n\r\n// Plugin type definition - NO CHANGES NEEDED HERE\r\nexport type CogsPlugin<\r\n  TState extends unknown = any,\r\n  TOptions = any,\r\n  THookReturn = any,\r\n> = {\r\n  useHook?: (state: StateObject<TState>, options: TOptions) => THookReturn;\r\n  transformState?: (\r\n    state: StateObject<TState>,\r\n    options: TOptions,\r\n    hookData?: THookReturn\r\n  ) => void;\r\n  onUpdate?: (\r\n    update: UpdateTypeDetail,\r\n    options: TOptions,\r\n    hookData?: THookReturn\r\n  ) => void;\r\n};\r\n\r\n// Plugin runtime data\r\nexport type PluginData = {\r\n  plugin: CogsPlugin;\r\n  options: any;\r\n  hookData?: any;\r\n};\r\n\r\n// ===================================================================\r\n// CORRECTED PLUGIN BUILDER\r\n// ===================================================================\r\nexport function createPluginContext<TState extends Record<string, any>>() {\r\n  return {\r\n    createPlugin<TOptions>() {\r\n      const createBuilder = <THookReturn = never>(\r\n        // The hook function is now correctly typed with TState\r\n        hookFn?: (state: StateObject<TState>, options: TOptions) => THookReturn\r\n      ) => ({\r\n        // The <TState> generic is REMOVED from transformState\r\n        transformState(\r\n          transformFn: (\r\n            state: StateObject<TState>, // <-- This is now correctly inferred\r\n            options: TOptions,\r\n            ...args: THookReturn extends never ? [] : [hookData: THookReturn]\r\n          ) => void\r\n        ) {\r\n          return {\r\n            onUpdate(\r\n              updateHandler: (\r\n                update: UpdateTypeDetail,\r\n                options: TOptions,\r\n                ...args: THookReturn extends never\r\n                  ? []\r\n                  : [hookData: THookReturn]\r\n              ) => void\r\n              // The return type is now fully typed\r\n            ) {\r\n              const plugin: CogsPlugin<TState, TOptions, THookReturn> = {\r\n                transformState: (state, options, hookData?) =>\r\n                  transformFn(\r\n                    state,\r\n                    options,\r\n                    ...((hookData !== undefined ? [hookData] : []) as any)\r\n                  ),\r\n                onUpdate: (update, options, hookData?) =>\r\n                  updateHandler(\r\n                    update,\r\n                    options,\r\n                    ...((hookData !== undefined ? [hookData] : []) as any)\r\n                  ),\r\n              };\r\n\r\n              if (hookFn) {\r\n                plugin.useHook = hookFn;\r\n              }\r\n\r\n              return plugin;\r\n            },\r\n          };\r\n        },\r\n      });\r\n\r\n      return {\r\n        useHook<THookReturn>(\r\n          // The hook function is now correctly typed with TState\r\n          hookFn: (state: StateObject<TState>, options: TOptions) => THookReturn\r\n        ) {\r\n          return createBuilder(hookFn);\r\n        },\r\n        ...createBuilder(),\r\n      };\r\n    },\r\n  };\r\n}\r\nconst test = createPluginContext<{ test: 'fsdafsdfds' }>()\r\n  .createPlugin<{\r\n    test: string;\r\n    test2: number;\r\n  }>()\r\n  .useHook((state, options) => {\r\n    console.log('test', state, options);\r\n    return { thisishoojoy: () => true };\r\n  })\r\n  .transformState((state, options, hookData) => {\r\n    console.log('test', state, options, hookData);\r\n\r\n    hookData.thisishoojoy();\r\n    return state;\r\n  })\r\n  .onUpdate((update, options, hookData) => {\r\n    console.log('test', update, options, hookData);\r\n  });\r\n"],"names":["createPluginContext","createBuilder","hookFn","transformFn","updateHandler","plugin","state","options","hookData","update"],"mappings":"AAiCO,SAASA,IAA0D;AACxE,SAAO;AAAA,IACL,eAAyB;AACvB,YAAMC,IAAgB,CAEpBC,OACI;AAAA;AAAA,QAEJ,eACEC,GAKA;AACA,iBAAO;AAAA,YACL,SACEC,GAQA;AACA,oBAAMC,IAAoD;AAAA,gBACxD,gBAAgB,CAACC,GAAOC,GAASC,MAC/BL;AAAA,kBACEG;AAAA,kBACAC;AAAA,kBACA,GAAKC,MAAa,SAAY,CAACA,CAAQ,IAAI,CAAA;AAAA,gBAAC;AAAA,gBAEhD,UAAU,CAACC,GAAQF,GAASC,MAC1BJ;AAAA,kBACEK;AAAA,kBACAF;AAAA,kBACA,GAAKC,MAAa,SAAY,CAACA,CAAQ,IAAI,CAAA;AAAA,gBAAC;AAAA,cAC9C;AAGJ,qBAAIN,MACFG,EAAO,UAAUH,IAGZG;AAAA,YACT;AAAA,UAAA;AAAA,QAEJ;AAAA,MAAA;AAGF,aAAO;AAAA,QACL,QAEEH,GACA;AACA,iBAAOD,EAAcC,CAAM;AAAA,QAC7B;AAAA,QACA,GAAGD,EAAA;AAAA,MAAc;AAAA,IAErB;AAAA,EAAA;AAEJ;AACaD,IACV,aAAA,EAIA,QAAQ,CAACM,GAAOC,OACf,QAAQ,IAAI,QAAQD,GAAOC,CAAO,GAC3B,EAAE,cAAc,MAAM,GAAA,EAC9B,EACA,eAAe,CAACD,GAAOC,GAASC,OAC/B,QAAQ,IAAI,QAAQF,GAAOC,GAASC,CAAQ,GAE5CA,EAAS,aAAA,GACFF,EACR,EACA,SAAS,CAACG,GAAQF,GAASC,MAAa;AACvC,UAAQ,IAAI,QAAQC,GAAQF,GAASC,CAAQ;AAC/C,CAAC;"}