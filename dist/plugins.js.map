{"version":3,"file":"plugins.js","sources":["../src/plugins.ts"],"sourcesContent":["import { UpdateTypeDetail, StateObject, PluginData } from './CogsState';\r\nimport { useState, useEffect } from 'react';\r\ntype Prettify<T> = { [K in keyof T]: T[K] } & {};\r\n\r\n// Your refined, more explicit version.\r\nexport type KeyedTypes<TMap extends Record<string, any>> = {\r\n  __key: 'keyed';\r\n  map: { [K in keyof TMap]: TMap[K] };\r\n};\r\nexport type PluginContext<TState, TMetaData> = {\r\n  [K in keyof TState]: {\r\n    stateKey: K;\r\n    cogsState: StateObject<TState[K]>;\r\n    getPluginMetaData: () => TMetaData | undefined;\r\n    /** Sets/merges the metadata for this plugin at the current state path */\r\n    setPluginMetaData: (data: Partial<TMetaData>) => void;\r\n    /** Removes all metadata for this plugin at the current state path */\r\n    removePluginMetaData: () => void;\r\n  };\r\n}[keyof TState];\r\n\r\nexport type CogsPlugin<\r\n  TName extends string,\r\n  TState = any,\r\n  TOptions = any,\r\n  THookReturn = any,\r\n  TPluginMetaData = any,\r\n> = {\r\n  name: TName;\r\n  useHook?: (\r\n    context: PluginContext<TState, TPluginMetaData>,\r\n    options: TOptions\r\n  ) => THookReturn;\r\n  transformState?: (\r\n    context: PluginContext<TState, TPluginMetaData>,\r\n    options: TOptions,\r\n    hook?: THookReturn\r\n  ) => void;\r\n  onUpdate?: (\r\n    stateKey: keyof TState,\r\n    update: UpdateTypeDetail,\r\n    options: TOptions,\r\n    hook?: THookReturn\r\n  ) => void;\r\n  onFormUpdate?: (\r\n    stateKey: keyof TState,\r\n    event: { type: 'focus' | 'blur' | 'input'; path: string; value?: any },\r\n    options: TOptions,\r\n    hook?: THookReturn\r\n  ) => void;\r\n  formWrapper?: (\r\n    element: React.ReactNode,\r\n    context: PluginContext<TState, TPluginMetaData>,\r\n    options: TOptions,\r\n    hook?: THookReturn\r\n  ) => React.ReactNode;\r\n};\r\n\r\nexport type ExtractPluginOptions<\r\n  TPlugins extends readonly CogsPlugin<any, any, any>[],\r\n> = {\r\n  [P in TPlugins[number] as P['name']]?: P extends CogsPlugin<any, infer O, any>\r\n    ? O\r\n    : never;\r\n};\r\nexport function createPluginContext<\r\n  TState extends Record<string, any>,\r\n  TOptions = unknown,\r\n  TPluginMetaData extends Record<string, any> = {},\r\n>() {\r\n  function createPlugin<TName extends string>(name: TName) {\r\n    // Helpers\r\n    type HookArgs<THookReturn> = THookReturn extends never\r\n      ? []\r\n      : [hookData: THookReturn];\r\n\r\n    type TransformFn<THookReturn> = (\r\n      context: PluginContext<TState, TPluginMetaData>,\r\n      options: TOptions,\r\n      ...args: HookArgs<THookReturn>\r\n    ) => void;\r\n\r\n    type UpdateFn<THookReturn> = (\r\n      context: PluginContext<TState, TPluginMetaData>,\r\n      update: UpdateTypeDetail,\r\n      options: TOptions,\r\n      ...args: HookArgs<THookReturn>\r\n    ) => void;\r\n\r\n    type FormUpdateFn<THookReturn> = (\r\n      context: PluginContext<TState, TPluginMetaData>,\r\n      event: { type: 'focus' | 'blur' | 'input'; path: string; value?: any },\r\n      options: TOptions,\r\n      ...args: HookArgs<THookReturn>\r\n    ) => void;\r\n\r\n    type FormWrapperFn<THookReturn> = (\r\n      element: React.ReactNode,\r\n      context: PluginContext<TState, TPluginMetaData>,\r\n      options: TOptions,\r\n      ...args: HookArgs<THookReturn>\r\n    ) => React.ReactNode;\r\n\r\n    type Plugin<THookReturn> = Prettify<\r\n      CogsPlugin<TName, TState, TOptions, THookReturn>\r\n    >;\r\n\r\n    // Your runtime object factory (unchanged behavior)\r\n    const createPluginObject = <THookReturn = never>(\r\n      hookFn?: (\r\n        context: PluginContext<TState, TPluginMetaData>,\r\n        options: TOptions\r\n      ) => THookReturn,\r\n      transformFn?: TransformFn<THookReturn>,\r\n      updateHandler?: UpdateFn<THookReturn>,\r\n      formUpdateHandler?: FormUpdateFn<THookReturn>,\r\n      formWrapper?: FormWrapperFn<THookReturn>\r\n    ): Plugin<THookReturn> => {\r\n      return {\r\n        name,\r\n        useHook: hookFn as any,\r\n        transformState: transformFn as any,\r\n        onUpdate: updateHandler as any,\r\n        onFormUpdate: formUpdateHandler as any,\r\n        formWrapper: formWrapper as any,\r\n      };\r\n    };\r\n\r\n    // Typed fluent API result\r\n    type BuildRet<\r\n      THookReturn,\r\n      HasTransform extends boolean,\r\n      HasUpdate extends boolean,\r\n      HasFormUpdate extends boolean,\r\n      HasWrapper extends boolean,\r\n    > = Plugin<THookReturn> &\r\n      (HasTransform extends true\r\n        ? {}\r\n        : {\r\n            transformState(\r\n              fn: TransformFn<THookReturn>\r\n            ): BuildRet<\r\n              THookReturn,\r\n              true,\r\n              HasUpdate,\r\n              HasFormUpdate,\r\n              HasWrapper\r\n            >;\r\n          }) &\r\n      (HasUpdate extends true\r\n        ? {}\r\n        : {\r\n            onUpdate(\r\n              fn: UpdateFn<THookReturn>\r\n            ): BuildRet<\r\n              THookReturn,\r\n              HasTransform,\r\n              true,\r\n              HasFormUpdate,\r\n              HasWrapper\r\n            >;\r\n          }) &\r\n      (HasFormUpdate extends true\r\n        ? {}\r\n        : {\r\n            onFormUpdate(\r\n              fn: FormUpdateFn<THookReturn>\r\n            ): BuildRet<THookReturn, HasTransform, HasUpdate, true, HasWrapper>;\r\n          }) &\r\n      (HasWrapper extends true\r\n        ? {}\r\n        : {\r\n            formWrapper(\r\n              fn: FormWrapperFn<THookReturn>\r\n            ): BuildRet<\r\n              THookReturn,\r\n              HasTransform,\r\n              HasUpdate,\r\n              HasFormUpdate,\r\n              true\r\n            >;\r\n          });\r\n\r\n    // Single builder: keeps runtime exactly the same, improves types only\r\n    function createBuilder<\r\n      THookReturn = never,\r\n      HasTransform extends boolean = false,\r\n      HasUpdate extends boolean = false,\r\n      HasFormUpdate extends boolean = false,\r\n      HasWrapper extends boolean = false,\r\n    >(\r\n      hookFn?: (\r\n        context: PluginContext<TState, TPluginMetaData>,\r\n        options: TOptions\r\n      ) => THookReturn,\r\n      transformFn?: TransformFn<THookReturn>,\r\n      updateHandler?: UpdateFn<THookReturn>,\r\n      formUpdateHandler?: FormUpdateFn<THookReturn>,\r\n      formWrapper?: FormWrapperFn<THookReturn>\r\n    ): BuildRet<\r\n      THookReturn,\r\n      HasTransform,\r\n      HasUpdate,\r\n      HasFormUpdate,\r\n      HasWrapper\r\n    > {\r\n      const plugin = createPluginObject<THookReturn>(\r\n        hookFn,\r\n        transformFn,\r\n        updateHandler,\r\n        formUpdateHandler,\r\n        formWrapper\r\n      );\r\n\r\n      // Attach only the remaining chain methods (typed)\r\n      const methods = {} as Partial<\r\n        BuildRet<\r\n          THookReturn,\r\n          HasTransform,\r\n          HasUpdate,\r\n          HasFormUpdate,\r\n          HasWrapper\r\n        >\r\n      >;\r\n\r\n      if (!transformFn) {\r\n        (methods as any).transformState = (fn: TransformFn<THookReturn>) =>\r\n          createBuilder<\r\n            THookReturn,\r\n            true,\r\n            HasUpdate,\r\n            HasFormUpdate,\r\n            HasWrapper\r\n          >(hookFn, fn, updateHandler, formUpdateHandler, formWrapper);\r\n      }\r\n\r\n      if (!updateHandler) {\r\n        (methods as any).onUpdate = (fn: UpdateFn<THookReturn>) =>\r\n          createBuilder<\r\n            THookReturn,\r\n            HasTransform,\r\n            true,\r\n            HasFormUpdate,\r\n            HasWrapper\r\n          >(hookFn, transformFn, fn, formUpdateHandler, formWrapper);\r\n      }\r\n\r\n      if (!formUpdateHandler) {\r\n        (methods as any).onFormUpdate = (fn: FormUpdateFn<THookReturn>) =>\r\n          createBuilder<THookReturn, HasTransform, HasUpdate, true, HasWrapper>(\r\n            hookFn,\r\n            transformFn,\r\n            updateHandler,\r\n            fn,\r\n            formWrapper\r\n          );\r\n      }\r\n\r\n      if (!formWrapper) {\r\n        (methods as any).formWrapper = (fn: FormWrapperFn<THookReturn>) =>\r\n          createBuilder<\r\n            THookReturn,\r\n            HasTransform,\r\n            HasUpdate,\r\n            HasFormUpdate,\r\n            true\r\n          >(hookFn, transformFn, updateHandler, formUpdateHandler, fn);\r\n      }\r\n\r\n      return Object.assign(plugin, methods) as BuildRet<\r\n        THookReturn,\r\n        HasTransform,\r\n        HasUpdate,\r\n        HasFormUpdate,\r\n        HasWrapper\r\n      >;\r\n    }\r\n\r\n    // Base fluent object + typed useHook that flips THookReturn\r\n    const start = Object.assign(\r\n      createBuilder<never, false, false, false, false>(),\r\n      {\r\n        useHook<THookReturn>(\r\n          hookFn: (\r\n            context: PluginContext<TState, TPluginMetaData>,\r\n            options: TOptions\r\n          ) => THookReturn\r\n        ) {\r\n          return createBuilder<THookReturn, false, false, false, false>(hookFn);\r\n        },\r\n      }\r\n    ) as BuildRet<never, false, false, false, false> & {\r\n      useHook<THookReturn>(\r\n        hookFn: (\r\n          context: PluginContext<TState, TPluginMetaData>,\r\n          options: TOptions\r\n        ) => THookReturn\r\n      ): BuildRet<THookReturn, false, false, false, false>;\r\n    };\r\n\r\n    return start;\r\n  }\r\n\r\n  return { createPlugin };\r\n}\r\n// --- DEMO USAGE - ALL THESE NOW WORK ---\r\n\r\ntype MyGlobalState = {\r\n  user: { test: string };\r\n  address: { city: string; country: string };\r\n};\r\n\r\nconst { createPlugin } = createPluginContext<MyGlobalState, { id: string }>();\r\n\r\n// Works with just transformState (no onUpdate required!)\r\nconst analyticsPlugin = createPlugin('analyticsPlugin').transformState(\r\n  ({ stateKey, cogsState }, opts) => {\r\n    if (stateKey === 'user') {\r\n      cogsState.$update({ test: 'This works!' });\r\n    }\r\n    if (stateKey === 'address') {\r\n      cogsState.$update({ city: 'London', country: 'UK' });\r\n    }\r\n  }\r\n);\r\n\r\n// Works with all three methods\r\nconst fullPlugin = createPlugin('fullPlugin')\r\n  .useHook(({ stateKey, cogsState }, options) => {\r\n    const [updateCount, setUpdateCount] = useState(0);\r\n    return {\r\n      count: updateCount,\r\n      increment: () => setUpdateCount((c) => c + 1),\r\n    };\r\n  })\r\n  .transformState(({ stateKey, cogsState }, options, hookData) => {\r\n    if (hookData) {\r\n      console.log(\r\n        `[Logger] RENDER: Key '${stateKey}' has been updated ${hookData.count} times.`\r\n      );\r\n    }\r\n  })\r\n  .onUpdate(({ stateKey, cogsState }, update, options, hookData) => {\r\n    if (hookData) {\r\n      console.log(`[Logger] UPDATE: Key '${stateKey}' just changed.`);\r\n      hookData.increment();\r\n    }\r\n  });\r\n\r\n// Works with just useHook\r\nconst hookOnlyPlugin = createPlugin('hookOnly').useHook((context, options) => {\r\n  return { id: 'test' };\r\n});\r\n\r\n// Works with no methods at all (though not very useful)\r\nconst emptyPlugin = createPlugin('empty');\r\n"],"names":["createPluginContext","createPlugin","name","createPluginObject","hookFn","transformFn","updateHandler","formUpdateHandler","formWrapper","createBuilder","plugin","methods","fn","stateKey","cogsState","opts","options","updateCount","setUpdateCount","useState","c","hookData","update","context"],"mappings":";AAiEO,SAASA,IAIZ;AACF,WAASC,EAAmCC,GAAa;AAsCvD,UAAMC,IAAqB,CACzBC,GAIAC,GACAC,GACAC,GACAC,OAEO;AAAA,MACL,MAAAN;AAAA,MACA,SAASE;AAAA,MACT,gBAAgBC;AAAA,MAChB,UAAUC;AAAA,MACV,cAAcC;AAAA,MACd,aAAAC;AAAA,IAAA;AA4DJ,aAASC,EAOPL,GAIAC,GACAC,GACAC,GACAC,GAOA;AACA,YAAME,IAASP;AAAA,QACbC;AAAA,QACAC;AAAA,QACAC;AAAA,QACAC;AAAA,QACAC;AAAA,MAAA,GAIIG,IAAU,CAAA;AAUhB,aAAKN,MACFM,EAAgB,iBAAiB,CAACC,MACjCH,EAMEL,GAAQQ,GAAIN,GAAeC,GAAmBC,CAAW,IAG1DF,MACFK,EAAgB,WAAW,CAACC,MAC3BH,EAMEL,GAAQC,GAAaO,GAAIL,GAAmBC,CAAW,IAGxDD,MACFI,EAAgB,eAAe,CAACC,MAC/BH;AAAA,QACEL;AAAA,QACAC;AAAA,QACAC;AAAA,QACAM;AAAA,QACAJ;AAAA,MAAA,IAIDA,MACFG,EAAgB,cAAc,CAACC,MAC9BH,EAMEL,GAAQC,GAAaC,GAAeC,GAAmBK,CAAE,IAGxD,OAAO,OAAOF,GAAQC,CAAO;AAAA,IAOtC;AAwBA,WArBc,OAAO;AAAA,MACnBF,EAAA;AAAA,MACA;AAAA,QACE,QACEL,GAIA;AACA,iBAAOK,EAAuDL,CAAM;AAAA,QACtE;AAAA,MAAA;AAAA,IACF;AAAA,EAWJ;AAEA,SAAO,EAAE,cAAAH,EAAAA;AACX;AAQA,MAAM,EAAE,cAAAA,EAAA,IAAiBD,EAAA;AAGDC,EAAa,iBAAiB,EAAE;AAAA,EACtD,CAAC,EAAE,UAAAY,GAAU,WAAAC,EAAA,GAAaC,MAAS;AACjC,IAAIF,MAAa,UACfC,EAAU,QAAQ,EAAE,MAAM,cAAA,CAAe,GAEvCD,MAAa,aACfC,EAAU,QAAQ,EAAE,MAAM,UAAU,SAAS,MAAM;AAAA,EAEvD;AACF;AAGmBb,EAAa,YAAY,EACzC,QAAQ,CAAC,EAAE,UAAAY,GAAU,WAAAC,EAAA,GAAaE,MAAY;AAC7C,QAAM,CAACC,GAAaC,CAAc,IAAIC,EAAS,CAAC;AAChD,SAAO;AAAA,IACL,OAAOF;AAAA,IACP,WAAW,MAAMC,EAAe,CAACE,MAAMA,IAAI,CAAC;AAAA,EAAA;AAEhD,CAAC,EACA,eAAe,CAAC,EAAE,UAAAP,GAAU,WAAAC,EAAA,GAAaE,GAASK,MAAa;AAC9D,EAAIA,KACF,QAAQ;AAAA,IACN,yBAAyBR,CAAQ,sBAAsBQ,EAAS,KAAK;AAAA,EAAA;AAG3E,CAAC,EACA,SAAS,CAAC,EAAE,UAAAR,GAAU,WAAAC,EAAA,GAAaQ,GAAQN,GAASK,MAAa;AAChE,EAAIA,MACF,QAAQ,IAAI,yBAAyBR,CAAQ,iBAAiB,GAC9DQ,EAAS,UAAA;AAEb,CAAC;AAGoBpB,EAAa,UAAU,EAAE,QAAQ,CAACsB,GAASP,OACzD,EAAE,IAAI,OAAA,EACd;AAGmBf,EAAa,OAAO;"}