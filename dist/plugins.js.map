{"version":3,"file":"plugins.js","sources":["../src/plugins.ts"],"sourcesContent":["import { z } from 'zod';\r\nimport type React from 'react';\r\nimport { StateObject, UpdateTypeDetail } from './CogsState';\r\nimport { getGlobalStore } from './store';\r\n\r\ntype Prettify<T> = { [K in keyof T]: T[K] } & {};\r\n\r\nexport type KeyedTypes<TMap extends Record<string, any>> = {\r\n  __key: 'keyed';\r\n  map: { [K in keyof TMap]: TMap[K] };\r\n};\r\n\r\nexport const keyedSchema = <TMap extends Record<string, any>>() =>\r\n  z.object({\r\n    __key: z.literal('keyed'),\r\n    map: z.any(),\r\n  }) as z.ZodType<KeyedTypes<TMap>>;\r\n\r\n// Helpers: turn a zod object shape into its inferred value shape\r\ntype InferZodObject<T extends Record<string, z.ZodTypeAny>> = {\r\n  [K in keyof T]: z.infer<T[K]>;\r\n};\r\nexport type InferPerKeyValueMap<\r\n  TMap extends Record<string, Record<string, z.ZodTypeAny>>,\r\n> = {\r\n  [K in keyof TMap]: InferZodObject<TMap[K]>;\r\n};\r\n\r\n// Deconstructed cogs methods (no TState)\r\ntype DeconstructedCogsMethods<TStateSlice = any> = {\r\n  initialiseState: (data: TStateSlice) => void;\r\n  initialiseShadowState: (data: any) => void;\r\n  applyOperation: (patch: any, meta?: { dontUpdate?: boolean }) => void;\r\n  addZodErrors: (errors: any[]) => void;\r\n  getState: () => TStateSlice;\r\n  setOptions: (options: any) => void;\r\n};\r\n\r\nexport function toDeconstructedMethods(stateHandler: StateObject<any>) {\r\n  return {\r\n    initialiseState: (data: any) => {\r\n      stateHandler.$update(data);\r\n    },\r\n    initialiseShadowState: (data: any) => {\r\n      stateHandler.$initializeAndMergeShadowState(data);\r\n    },\r\n    applyOperation: (patch: any, meta?: { dontUpdate?: boolean }) =>\r\n      stateHandler.$applyOperation(patch, meta),\r\n    addZodErrors: (errors: any[]) => stateHandler.$addZodValidation(errors),\r\n    getState: () => stateHandler.$get(),\r\n    setOptions: (opts: any) => {\r\n      stateHandler.$setOptions(opts);\r\n    },\r\n  };\r\n}\r\n\r\n// Simplified: All params use the same TFieldMetaData type\r\nexport type UseHookParams<\r\n  TOptions,\r\n  TPluginMetaData,\r\n  TFieldMetaData,\r\n  TStateSlice = any,\r\n> = DeconstructedCogsMethods<TStateSlice> & {\r\n  stateKey: string;\r\n\r\n  getPluginMetaData: () => TPluginMetaData | undefined;\r\n  setPluginMetaData: (data: Partial<TPluginMetaData>) => void;\r\n  removePluginMetaData: () => void;\r\n\r\n  getFieldMetaData: (path: string[]) => TFieldMetaData | undefined;\r\n  setFieldMetaData: (path: string[], data: Partial<TFieldMetaData>) => void;\r\n  removeFieldMetaData: (path: string[]) => void;\r\n\r\n  options: TOptions;\r\n  pluginName: string;\r\n  isInitialMount: boolean;\r\n};\r\n\r\nexport type TransformStateParams<\r\n  TOptions,\r\n  THookReturn,\r\n  TPluginMetaData,\r\n  TFieldMetaData,\r\n  TStateSlice = any,\r\n> = DeconstructedCogsMethods<TStateSlice> & {\r\n  stateKey: string;\r\n\r\n  getPluginMetaData: () => TPluginMetaData | undefined;\r\n  setPluginMetaData: (data: Partial<TPluginMetaData>) => void;\r\n  removePluginMetaData: () => void;\r\n\r\n  getFieldMetaData: (path: string[]) => TFieldMetaData | undefined;\r\n  setFieldMetaData: (path: string[], data: Partial<TFieldMetaData>) => void;\r\n  removeFieldMetaData: (path: string[]) => void;\r\n\r\n  options: TOptions;\r\n  hookData?: THookReturn;\r\n  previousState?: TStateSlice;\r\n  isInitialTransform: boolean;\r\n  pluginName: string;\r\n};\r\n\r\nexport type OnUpdateParams<\r\n  TOptions,\r\n  THookReturn,\r\n  TPluginMetaData,\r\n  TFieldMetaData,\r\n  TStateSlice = any,\r\n> = DeconstructedCogsMethods<TStateSlice> & {\r\n  stateKey: string;\r\n\r\n  getPluginMetaData: () => TPluginMetaData | undefined;\r\n  setPluginMetaData: (data: Partial<TPluginMetaData>) => void;\r\n  removePluginMetaData: () => void;\r\n\r\n  getFieldMetaData: (path: string[]) => TFieldMetaData | undefined;\r\n  setFieldMetaData: (path: string[], data: Partial<TFieldMetaData>) => void;\r\n  removeFieldMetaData: (path: string[]) => void;\r\n\r\n  update: UpdateTypeDetail;\r\n  path?: string[];\r\n\r\n  options: TOptions;\r\n  hookData?: THookReturn;\r\n\r\n  previousValue?: any;\r\n  nextValue?: any;\r\n  updateSource?: 'user' | 'plugin' | 'system';\r\n\r\n  pluginName: string;\r\n};\r\n\r\nexport type OnFormUpdateParams<\r\n  TOptions,\r\n  THookReturn,\r\n  TPluginMetaData,\r\n  TFieldMetaData,\r\n  TStateSlice = any,\r\n> = DeconstructedCogsMethods<TStateSlice> & {\r\n  stateKey: string;\r\n\r\n  getPluginMetaData: () => TPluginMetaData | undefined;\r\n  setPluginMetaData: (data: Partial<TPluginMetaData>) => void;\r\n  removePluginMetaData: () => void;\r\n\r\n  getFieldMetaData: (path: string[]) => TFieldMetaData | undefined;\r\n  setFieldMetaData: (path: string[], data: Partial<TFieldMetaData>) => void;\r\n  removeFieldMetaData: (path: string[]) => void;\r\n\r\n  path: string[];\r\n  event: {\r\n    type: 'focus' | 'blur' | 'input';\r\n    value?: any;\r\n    path: string[];\r\n  };\r\n\r\n  options: TOptions;\r\n  hookData?: THookReturn;\r\n\r\n  formState?: 'pristine' | 'dirty' | 'submitting' | 'submitted';\r\n  pluginName: string;\r\n};\r\n\r\nexport type FormWrapperParams<\r\n  TOptions,\r\n  THookReturn,\r\n  TPluginMetaData,\r\n  TFieldMetaData,\r\n  TStateSlice = any,\r\n> = {\r\n  element: React.ReactNode;\r\n  path: string[];\r\n  stateKey: string;\r\n  options: TOptions;\r\n  hookData?: THookReturn;\r\n  fieldType?: string;\r\n  wrapperDepth?: number;\r\n\r\n  // Deconstructed methods\r\n  initialiseState: (data: TStateSlice) => void;\r\n  initialiseShadowState: (data: any) => void;\r\n  applyOperation: (patch: any, meta?: { dontUpdate?: boolean }) => void;\r\n  addZodErrors: (errors: any[]) => void;\r\n  getState: () => TStateSlice;\r\n  setOptions: (options: any) => void;\r\n\r\n  getPluginMetaData: () => TPluginMetaData | undefined;\r\n  setPluginMetaData: (data: Partial<TPluginMetaData>) => void;\r\n  removePluginMetaData: () => void;\r\n\r\n  getFieldMetaData: (path: string[]) => TFieldMetaData | undefined;\r\n  setFieldMetaData: (path: string[], data: Partial<TFieldMetaData>) => void;\r\n  removeFieldMetaData: (path: string[]) => void;\r\n\r\n  pluginName: string;\r\n};\r\n\r\n// Unified plugin definition\r\nexport type CogsPlugin<\r\n  TName extends string,\r\n  TOptions,\r\n  THookReturn,\r\n  TPluginMetaData,\r\n  TFieldMetaData,\r\n> = {\r\n  name: TName;\r\n\r\n  useHook?: (\r\n    params: UseHookParams<TOptions, TPluginMetaData, TFieldMetaData, any>\r\n  ) => THookReturn;\r\n\r\n  transformState?: (\r\n    params: TransformStateParams<\r\n      TOptions,\r\n      THookReturn,\r\n      TPluginMetaData,\r\n      TFieldMetaData,\r\n      any\r\n    >\r\n  ) => void;\r\n\r\n  onUpdate?: (\r\n    params: OnUpdateParams<\r\n      TOptions,\r\n      THookReturn,\r\n      TPluginMetaData,\r\n      TFieldMetaData,\r\n      any\r\n    >\r\n  ) => void;\r\n\r\n  onFormUpdate?: (\r\n    params: OnFormUpdateParams<\r\n      TOptions,\r\n      THookReturn,\r\n      TPluginMetaData,\r\n      TFieldMetaData,\r\n      any\r\n    >\r\n  ) => void;\r\n\r\n  formWrapper?: (\r\n    params: FormWrapperParams<\r\n      TOptions,\r\n      THookReturn,\r\n      TPluginMetaData,\r\n      TFieldMetaData,\r\n      any\r\n    >\r\n  ) => React.ReactNode;\r\n};\r\n\r\n// Extract plugin options helper\r\nexport type ExtractPluginOptions<\r\n  TPlugins extends readonly CogsPlugin<any, any, any, any, any>[],\r\n> = {\r\n  [P in TPlugins[number] as P['name']]?: P extends CogsPlugin<\r\n    any,\r\n    infer O,\r\n    any,\r\n    any,\r\n    any\r\n  >\r\n    ? O\r\n    : never;\r\n};\r\n\r\n// Metadata helpers\r\nexport function createMetadataContext<TPluginMetaData, TFieldMetaData>(\r\n  stateKey: string,\r\n  pluginName: string\r\n) {\r\n  return {\r\n    getPluginMetaData: (): TPluginMetaData | undefined =>\r\n      getGlobalStore\r\n        .getState()\r\n        .getPluginMetaDataMap(stateKey, [])\r\n        ?.get(pluginName) as TPluginMetaData | undefined,\r\n\r\n    setPluginMetaData: (data: Partial<TPluginMetaData>) =>\r\n      getGlobalStore\r\n        .getState()\r\n        .setPluginMetaData(stateKey, [], pluginName, data),\r\n\r\n    removePluginMetaData: () =>\r\n      getGlobalStore.getState().removePluginMetaData(stateKey, [], pluginName),\r\n\r\n    getFieldMetaData: (path: string[]): TFieldMetaData | undefined =>\r\n      getGlobalStore\r\n        .getState()\r\n        .getPluginMetaDataMap(stateKey, path)\r\n        ?.get(pluginName) as TFieldMetaData | undefined,\r\n\r\n    setFieldMetaData: (path: string[], data: Partial<TFieldMetaData>) =>\r\n      getGlobalStore\r\n        .getState()\r\n        .setPluginMetaData(stateKey, path, pluginName, data),\r\n\r\n    removeFieldMetaData: (path: string[]) =>\r\n      getGlobalStore\r\n        .getState()\r\n        .removePluginMetaData(stateKey, path, pluginName),\r\n  };\r\n}\r\n\r\ntype ZodObjOutput<T extends z.ZodObject<any>> = {\r\n  [K in keyof T['shape']]: z.output<T['shape'][K]>;\r\n};\r\ntype OutputOf<T extends z.ZodTypeAny> =\r\n  T extends z.ZodObject<any> ? Prettify<ZodObjOutput<T>> : z.output<T>;\r\n\r\nexport function createPluginContext<\r\n  O extends z.ZodTypeAny,\r\n  PM extends z.ZodTypeAny | undefined = undefined,\r\n  FM extends z.ZodTypeAny | undefined = undefined,\r\n>(schemas: { options: O; pluginMetaData?: PM; fieldMetaData?: FM }) {\r\n  // Crucial: compute from the generic params, not from an object-indexed optional type\r\n  type Options = OutputOf<O>;\r\n  type PluginMetaData = PM extends z.ZodTypeAny ? OutputOf<PM> : unknown;\r\n  type FieldMetaData = FM extends z.ZodTypeAny ? OutputOf<FM> : unknown;\r\n\r\n  function createPlugin<TName extends string>(name: TName) {\r\n    type TransformFn<THookReturn> = (\r\n      params: TransformStateParams<\r\n        Options,\r\n        THookReturn,\r\n        PluginMetaData,\r\n        FieldMetaData\r\n      >\r\n    ) => void;\r\n\r\n    type UpdateFn<THookReturn> = (\r\n      params: OnUpdateParams<\r\n        Options,\r\n        THookReturn,\r\n        PluginMetaData,\r\n        FieldMetaData\r\n      >\r\n    ) => void;\r\n\r\n    type FormUpdateFn<THookReturn> = (\r\n      params: OnFormUpdateParams<\r\n        Options,\r\n        THookReturn,\r\n        PluginMetaData,\r\n        FieldMetaData\r\n      >\r\n    ) => void;\r\n\r\n    type FormWrapperFn<THookReturn> = (\r\n      params: FormWrapperParams<\r\n        Options,\r\n        THookReturn,\r\n        PluginMetaData,\r\n        FieldMetaData\r\n      >\r\n    ) => React.ReactNode;\r\n\r\n    type Plugin<THookReturn> = Prettify<\r\n      CogsPlugin<TName, Options, THookReturn, PluginMetaData, FieldMetaData>\r\n    >;\r\n\r\n    const createPluginObject = <THookReturn = never>(\r\n      hookFn?: (\r\n        params: UseHookParams<Options, PluginMetaData, FieldMetaData>\r\n      ) => THookReturn,\r\n      transformFn?: TransformFn<THookReturn>,\r\n      updateHandler?: UpdateFn<THookReturn>,\r\n      formUpdateHandler?: FormUpdateFn<THookReturn>,\r\n      formWrapper?: FormWrapperFn<THookReturn>\r\n    ): Plugin<THookReturn> => {\r\n      return {\r\n        name,\r\n        useHook: hookFn as any,\r\n        transformState: transformFn as any,\r\n        onUpdate: updateHandler as any,\r\n        onFormUpdate: formUpdateHandler as any,\r\n        formWrapper: formWrapper as any,\r\n      };\r\n    };\r\n\r\n    type BuildRet<\r\n      THookReturn,\r\n      HasTransform extends boolean,\r\n      HasUpdate extends boolean,\r\n      HasFormUpdate extends boolean,\r\n      HasWrapper extends boolean,\r\n    > = Plugin<THookReturn> &\r\n      (HasTransform extends true\r\n        ? {}\r\n        : {\r\n            transformState(\r\n              fn: TransformFn<THookReturn>\r\n            ): BuildRet<\r\n              THookReturn,\r\n              true,\r\n              HasUpdate,\r\n              HasFormUpdate,\r\n              HasWrapper\r\n            >;\r\n          }) &\r\n      (HasUpdate extends true\r\n        ? {}\r\n        : {\r\n            onUpdate(\r\n              fn: UpdateFn<THookReturn>\r\n            ): BuildRet<\r\n              THookReturn,\r\n              HasTransform,\r\n              true,\r\n              HasFormUpdate,\r\n              HasWrapper\r\n            >;\r\n          }) &\r\n      (HasFormUpdate extends true\r\n        ? {}\r\n        : {\r\n            onFormUpdate(\r\n              fn: FormUpdateFn<THookReturn>\r\n            ): BuildRet<THookReturn, HasTransform, HasUpdate, true, HasWrapper>;\r\n          }) &\r\n      (HasWrapper extends true\r\n        ? {}\r\n        : {\r\n            formWrapper(\r\n              fn: FormWrapperFn<THookReturn>\r\n            ): BuildRet<\r\n              THookReturn,\r\n              HasTransform,\r\n              HasUpdate,\r\n              HasFormUpdate,\r\n              true\r\n            >;\r\n          });\r\n\r\n    function createBuilder<\r\n      THookReturn = never,\r\n      HasTransform extends boolean = false,\r\n      HasUpdate extends boolean = false,\r\n      HasFormUpdate extends boolean = false,\r\n      HasWrapper extends boolean = false,\r\n    >(\r\n      hookFn?: (\r\n        params: UseHookParams<Options, PluginMetaData, FieldMetaData>\r\n      ) => THookReturn,\r\n      transformFn?: TransformFn<THookReturn>,\r\n      updateHandler?: UpdateFn<THookReturn>,\r\n      formUpdateHandler?: FormUpdateFn<THookReturn>,\r\n      formWrapper?: FormWrapperFn<THookReturn>\r\n    ): BuildRet<\r\n      THookReturn,\r\n      HasTransform,\r\n      HasUpdate,\r\n      HasFormUpdate,\r\n      HasWrapper\r\n    > {\r\n      const plugin = createPluginObject<THookReturn>(\r\n        hookFn,\r\n        transformFn,\r\n        updateHandler,\r\n        formUpdateHandler,\r\n        formWrapper\r\n      );\r\n\r\n      const methods = {} as Partial<\r\n        BuildRet<\r\n          THookReturn,\r\n          HasTransform,\r\n          HasUpdate,\r\n          HasFormUpdate,\r\n          HasWrapper\r\n        >\r\n      >;\r\n\r\n      if (!transformFn) {\r\n        (methods as any).transformState = (fn: TransformFn<THookReturn>) =>\r\n          createBuilder<\r\n            THookReturn,\r\n            true,\r\n            HasUpdate,\r\n            HasFormUpdate,\r\n            HasWrapper\r\n          >(hookFn, fn, updateHandler, formUpdateHandler, formWrapper);\r\n      }\r\n      if (!updateHandler) {\r\n        (methods as any).onUpdate = (fn: UpdateFn<THookReturn>) =>\r\n          createBuilder<\r\n            THookReturn,\r\n            HasTransform,\r\n            true,\r\n            HasFormUpdate,\r\n            HasWrapper\r\n          >(hookFn, transformFn, fn, formUpdateHandler, formWrapper);\r\n      }\r\n      if (!formUpdateHandler) {\r\n        (methods as any).onFormUpdate = (fn: FormUpdateFn<THookReturn>) =>\r\n          createBuilder<THookReturn, HasTransform, HasUpdate, true, HasWrapper>(\r\n            hookFn,\r\n            transformFn,\r\n            updateHandler,\r\n            fn,\r\n            formWrapper\r\n          );\r\n      }\r\n      if (!formWrapper) {\r\n        (methods as any).formWrapper = (fn: FormWrapperFn<THookReturn>) =>\r\n          createBuilder<\r\n            THookReturn,\r\n            HasTransform,\r\n            HasUpdate,\r\n            HasFormUpdate,\r\n            true\r\n          >(hookFn, transformFn, updateHandler, formUpdateHandler, fn);\r\n      }\r\n\r\n      return Object.assign(plugin, methods) as BuildRet<\r\n        THookReturn,\r\n        HasTransform,\r\n        HasUpdate,\r\n        HasFormUpdate,\r\n        HasWrapper\r\n      >;\r\n    }\r\n\r\n    const start = Object.assign(\r\n      createBuilder<never, false, false, false, false>(),\r\n      {\r\n        useHook<THookReturn>(\r\n          hookFn: (\r\n            params: UseHookParams<Options, PluginMetaData, FieldMetaData>\r\n          ) => THookReturn\r\n        ) {\r\n          return createBuilder<THookReturn, false, false, false, false>(hookFn);\r\n        },\r\n      }\r\n    ) as BuildRet<never, false, false, false, false> & {\r\n      useHook<THookReturn>(\r\n        hookFn: (\r\n          params: UseHookParams<Options, PluginMetaData, FieldMetaData>\r\n        ) => THookReturn\r\n      ): BuildRet<THookReturn, false, false, false, false>;\r\n    };\r\n\r\n    return start;\r\n  }\r\n\r\n  return { createPlugin };\r\n}\r\n"],"names":["keyedSchema","z","toDeconstructedMethods","stateHandler","data","patch","meta","errors","opts","createMetadataContext","stateKey","pluginName","getGlobalStore","path","createPluginContext","schemas","createPlugin","name","createPluginObject","hookFn","transformFn","updateHandler","formUpdateHandler","formWrapper","createBuilder","plugin","methods","fn"],"mappings":";;AAYO,MAAMA,IAAc,MACzBC,EAAE,OAAO;AAAA,EACP,OAAOA,EAAE,QAAQ,OAAO;AAAA,EACxB,KAAKA,EAAE,IAAA;AACT,CAAC;AAsBI,SAASC,EAAuBC,GAAgC;AACrE,SAAO;AAAA,IACL,iBAAiB,CAACC,MAAc;AAC9B,MAAAD,EAAa,QAAQC,CAAI;AAAA,IAC3B;AAAA,IACA,uBAAuB,CAACA,MAAc;AACpC,MAAAD,EAAa,+BAA+BC,CAAI;AAAA,IAClD;AAAA,IACA,gBAAgB,CAACC,GAAYC,MAC3BH,EAAa,gBAAgBE,GAAOC,CAAI;AAAA,IAC1C,cAAc,CAACC,MAAkBJ,EAAa,kBAAkBI,CAAM;AAAA,IACtE,UAAU,MAAMJ,EAAa,KAAA;AAAA,IAC7B,YAAY,CAACK,MAAc;AACzB,MAAAL,EAAa,YAAYK,CAAI;AAAA,IAC/B;AAAA,EAAA;AAEJ;AAsNO,SAASC,EACdC,GACAC,GACA;AACA,SAAO;AAAA,IACL,mBAAmB,MACjBC,EACG,WACA,qBAAqBF,GAAU,CAAA,CAAE,GAChC,IAAIC,CAAU;AAAA,IAEpB,mBAAmB,CAACP,MAClBQ,EACG,SAAA,EACA,kBAAkBF,GAAU,CAAA,GAAIC,GAAYP,CAAI;AAAA,IAErD,sBAAsB,MACpBQ,EAAe,SAAA,EAAW,qBAAqBF,GAAU,CAAA,GAAIC,CAAU;AAAA,IAEzE,kBAAkB,CAACE,MACjBD,EACG,SAAA,EACA,qBAAqBF,GAAUG,CAAI,GAClC,IAAIF,CAAU;AAAA,IAEpB,kBAAkB,CAACE,GAAgBT,MACjCQ,EACG,WACA,kBAAkBF,GAAUG,GAAMF,GAAYP,CAAI;AAAA,IAEvD,qBAAqB,CAACS,MACpBD,EACG,WACA,qBAAqBF,GAAUG,GAAMF,CAAU;AAAA,EAAA;AAExD;AAQO,SAASG,EAIdC,GAAkE;AAMlE,WAASC,EAAmCC,GAAa;AAyCvD,UAAMC,IAAqB,CACzBC,GAGAC,GACAC,GACAC,GACAC,OAEO;AAAA,MACL,MAAAN;AAAA,MACA,SAASE;AAAA,MACT,gBAAgBC;AAAA,MAChB,UAAUC;AAAA,MACV,cAAcC;AAAA,MACd,aAAAC;AAAA,IAAA;AA0DJ,aAASC,EAOPL,GAGAC,GACAC,GACAC,GACAC,GAOA;AACA,YAAME,IAASP;AAAA,QACbC;AAAA,QACAC;AAAA,QACAC;AAAA,QACAC;AAAA,QACAC;AAAA,MAAA,GAGIG,IAAU,CAAA;AAUhB,aAAKN,MACFM,EAAgB,iBAAiB,CAACC,MACjCH,EAMEL,GAAQQ,GAAIN,GAAeC,GAAmBC,CAAW,IAE1DF,MACFK,EAAgB,WAAW,CAACC,MAC3BH,EAMEL,GAAQC,GAAaO,GAAIL,GAAmBC,CAAW,IAExDD,MACFI,EAAgB,eAAe,CAACC,MAC/BH;AAAA,QACEL;AAAA,QACAC;AAAA,QACAC;AAAA,QACAM;AAAA,QACAJ;AAAA,MAAA,IAGDA,MACFG,EAAgB,cAAc,CAACC,MAC9BH,EAMEL,GAAQC,GAAaC,GAAeC,GAAmBK,CAAE,IAGxD,OAAO,OAAOF,GAAQC,CAAO;AAAA,IAOtC;AAqBA,WAnBc,OAAO;AAAA,MACnBF,EAAA;AAAA,MACA;AAAA,QACE,QACEL,GAGA;AACA,iBAAOK,EAAuDL,CAAM;AAAA,QACtE;AAAA,MAAA;AAAA,IACF;AAAA,EAUJ;AAEA,SAAO,EAAE,cAAAH,EAAA;AACX;"}