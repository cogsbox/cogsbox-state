{"version":3,"file":"TRPCValidationLink.js","sources":["../src/TRPCValidationLink.ts"],"sourcesContent":["import { observable } from \"@trpc/server/observable\";\r\nimport type { AnyRouter } from \"@trpc/server\";\r\nimport type { TRPCLink } from \"@trpc/client\";\r\nimport type { Operation } from \"@trpc/client\";\r\nimport type { TRPCClientError } from \"@trpc/client\";\r\nimport { getGlobalStore } from \"./store\";\r\nimport type { Observer } from \"@trpc/server/observable\";\r\nexport const useCogsTrpcValidationLink = <TRouter extends AnyRouter>() => {\r\n    const addValidationError = getGlobalStore.getState().addValidationError;\r\n\r\n    const TrpcValidationLink = (): TRPCLink<TRouter> => {\r\n        return (opts) => {\r\n            return ({ next, op }: { next: any; op: Operation }) => {\r\n                return observable(\r\n                    (observer: Observer<any, TRPCClientError<TRouter>>) => {\r\n                        const unsubscribe = next(op).subscribe({\r\n                            next(value: unknown) {\r\n                                observer.next(value);\r\n                            },\r\n                            error(err: TRPCClientError<TRouter>) {\r\n                                console.log(\"link error1\", err);\r\n                                try {\r\n                                    const errorObject = JSON.parse(err.message);\r\n                                    console.log(\"link error2\", errorObject);\r\n\r\n                                    if (Array.isArray(errorObject)) {\r\n                                        errorObject.forEach(\r\n                                            (error: {\r\n                                                path: string[];\r\n                                                message: string;\r\n                                            }) => {\r\n                                                const fullpath = `${op.path}.${error.path.join(\".\")}`;\r\n                                                addValidationError(\r\n                                                    fullpath,\r\n                                                    error.message,\r\n                                                );\r\n                                            },\r\n                                        );\r\n                                    } else if (\r\n                                        typeof errorObject === \"object\" &&\r\n                                        errorObject !== null\r\n                                    ) {\r\n                                        Object.entries(errorObject).forEach(\r\n                                            ([key, value]) => {\r\n                                                const fullpath = `${op.path}.${key}`;\r\n                                                addValidationError(\r\n                                                    fullpath,\r\n                                                    value as string,\r\n                                                );\r\n                                            },\r\n                                        );\r\n                                    }\r\n                                } catch (e) {\r\n                                    // Silently handle parse errors\r\n                                }\r\n\r\n                                observer.error(err);\r\n                            },\r\n                            complete() {\r\n                                observer.complete();\r\n                            },\r\n                        });\r\n                        return unsubscribe;\r\n                    },\r\n                );\r\n            };\r\n        };\r\n    };\r\n    return TrpcValidationLink;\r\n};\r\n"],"names":["useCogsTrpcValidationLink","addValidationError","getGlobalStore","opts","next","op","observable","observer","value","err","errorObject","error","fullpath","key"],"mappings":";;AAOO,MAAMA,IAA4B,MAAiC;AAChE,QAAAC,IAAqBC,EAAe,SAAA,EAAW;AA4D9C,SA1DoB,MAChB,CAACC,MACG,CAAC,EAAE,MAAAC,GAAM,IAAAC,QACLC;AAAA,IACH,CAACC,MACuBH,EAAKC,CAAE,EAAE,UAAU;AAAA,MACnC,KAAKG,GAAgB;AACjB,QAAAD,EAAS,KAAKC,CAAK;AAAA,MACvB;AAAA,MACA,MAAMC,GAA+B;AACzB,gBAAA,IAAI,eAAeA,CAAG;AAC1B,YAAA;AACA,gBAAMC,IAAc,KAAK,MAAMD,EAAI,OAAO;AAClC,kBAAA,IAAI,eAAeC,CAAW,GAElC,MAAM,QAAQA,CAAW,IACbA,EAAA;AAAA,YACR,CAACC,MAGK;AACI,oBAAAC,IAAW,GAAGP,EAAG,IAAI,IAAIM,EAAM,KAAK,KAAK,GAAG,CAAC;AACnD,cAAAV;AAAA,gBACIW;AAAA,gBACAD,EAAM;AAAA,cACV;AAAA,YAAA;AAAA,UAER,IAEA,OAAOD,KAAgB,YACvBA,MAAgB,QAET,OAAA,QAAQA,CAAW,EAAE;AAAA,YACxB,CAAC,CAACG,GAAKL,CAAK,MAAM;AACd,oBAAMI,IAAW,GAAGP,EAAG,IAAI,IAAIQ,CAAG;AAClC,cAAAZ;AAAA,gBACIW;AAAA,gBACAJ;AAAA,cACJ;AAAA,YAAA;AAAA,UAER;AAAA,gBAEI;AAAA,QAAA;AAIZ,QAAAD,EAAS,MAAME,CAAG;AAAA,MACtB;AAAA,MACA,WAAW;AACP,QAAAF,EAAS,SAAS;AAAA,MAAA;AAAA,IACtB,CACH;AAAA,EAGT;AAKhB;"}