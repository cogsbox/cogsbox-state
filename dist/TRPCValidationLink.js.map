{"version":3,"file":"TRPCValidationLink.js","sources":["../src/TRPCValidationLink.ts"],"sourcesContent":["import { observable } from \"@trpc/server/observable\";\r\nimport type { AnyRouter } from \"@trpc/server\";\r\nimport type { TRPCLink } from \"@trpc/client\";\r\nimport type { Operation } from \"@trpc/client\";\r\nimport type { TRPCClientError } from \"@trpc/client\";\r\nimport { getGlobalStore } from \"./store\";\r\nimport type { Observer } from \"@trpc/server/observable\";\r\nexport const useCogsTrpcValidationLink = <TRouter extends AnyRouter>() => {\r\n  const addValidationError = getGlobalStore.getState().addValidationError;\r\n\r\n  const TrpcValidationLink = (): TRPCLink<TRouter> => {\r\n    return (opts) => {\r\n      return ({ next, op }: { next: any; op: Operation }) => {\r\n        return observable(\r\n          (observer: Observer<any, TRPCClientError<TRouter>>) => {\r\n            const unsubscribe = next(op).subscribe({\r\n              next(value: unknown) {\r\n                observer.next(value);\r\n              },\r\n              error(err: TRPCClientError<TRouter>) {\r\n                try {\r\n                  const errorObject = JSON.parse(err.message);\r\n\r\n                  if (Array.isArray(errorObject)) {\r\n                    errorObject.forEach(\r\n                      (error: { path: string[]; message: string }) => {\r\n                        const fullpath = `${op.path}.${error.path.join(\".\")}`;\r\n                        // In your TRPC link\r\n\r\n                        addValidationError(fullpath, error.message);\r\n                      }\r\n                    );\r\n                  } else if (\r\n                    typeof errorObject === \"object\" &&\r\n                    errorObject !== null\r\n                  ) {\r\n                    Object.entries(errorObject).forEach(([key, value]) => {\r\n                      const fullpath = `${op.path}.${key}`;\r\n                      addValidationError(fullpath, value as string);\r\n                    });\r\n                  }\r\n                } catch (e) {\r\n                  // Silently handle parse errors\r\n                }\r\n\r\n                observer.error(err);\r\n              },\r\n              complete() {\r\n                observer.complete();\r\n              },\r\n            });\r\n            return unsubscribe;\r\n          }\r\n        );\r\n      };\r\n    };\r\n  };\r\n  return TrpcValidationLink;\r\n};\r\n"],"names":["useCogsTrpcValidationLink","addValidationError","getGlobalStore","opts","next","op","observable","observer","value","err","errorObject","error","fullpath","key"],"mappings":";;AAOO,MAAMA,IAA4B,MAAiC;AAClE,QAAAC,IAAqBC,EAAe,SAAA,EAAW;AAiD9C,SA/CoB,MAClB,CAACC,MACC,CAAC,EAAE,MAAAC,GAAM,IAAAC,QACPC;AAAA,IACL,CAACC,MACqBH,EAAKC,CAAE,EAAE,UAAU;AAAA,MACrC,KAAKG,GAAgB;AACnB,QAAAD,EAAS,KAAKC,CAAK;AAAA,MACrB;AAAA,MACA,MAAMC,GAA+B;AAC/B,YAAA;AACF,gBAAMC,IAAc,KAAK,MAAMD,EAAI,OAAO;AAEtC,UAAA,MAAM,QAAQC,CAAW,IACfA,EAAA;AAAA,YACV,CAACC,MAA+C;AACxC,oBAAAC,IAAW,GAAGP,EAAG,IAAI,IAAIM,EAAM,KAAK,KAAK,GAAG,CAAC;AAGhC,cAAAV,EAAAW,GAAUD,EAAM,OAAO;AAAA,YAAA;AAAA,UAE9C,IAEA,OAAOD,KAAgB,YACvBA,MAAgB,QAET,OAAA,QAAQA,CAAW,EAAE,QAAQ,CAAC,CAACG,GAAKL,CAAK,MAAM;AACpD,kBAAMI,IAAW,GAAGP,EAAG,IAAI,IAAIQ,CAAG;AAClC,YAAAZ,EAAmBW,GAAUJ,CAAe;AAAA,UAAA,CAC7C;AAAA,gBAEO;AAAA,QAAA;AAIZ,QAAAD,EAAS,MAAME,CAAG;AAAA,MACpB;AAAA,MACA,WAAW;AACT,QAAAF,EAAS,SAAS;AAAA,MAAA;AAAA,IACpB,CACD;AAAA,EAGL;AAKR;"}