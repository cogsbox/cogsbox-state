{"version":3,"file":"Components.jsx","sources":["../src/Components.tsx"],"sourcesContent":["import { FormElementParams, type FormOptsType } from './CogsState';\r\nimport React, {\r\n  memo,\r\n  RefObject,\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport { formRefStore, getGlobalStore, ValidationError } from './store';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { isDeepEqual } from './utility';\r\nconst {\r\n  getInitialOptions,\r\n\r\n  getShadowMetadata,\r\n  setShadowMetadata,\r\n  getShadowValue,\r\n\r\n  registerComponent,\r\n  unregisterComponent,\r\n\r\n  notifyPathSubscribers,\r\n  subscribeToPath,\r\n} = getGlobalStore.getState();\r\nexport type ValidationWrapperProps = {\r\n  formOpts?: FormOptsType;\r\n  path: string[];\r\n  stateKey: string;\r\n  children: React.ReactNode;\r\n};\r\n\r\nexport function ValidationWrapper({\r\n  formOpts,\r\n  path,\r\n  stateKey,\r\n  children,\r\n}: ValidationWrapperProps) {\r\n  const { getInitialOptions, getShadowMetadata, getShadowValue } =\r\n    getGlobalStore.getState();\r\n  const thisStateOpts = getInitialOptions(stateKey!);\r\n\r\n  const shadowMeta = getShadowMetadata(stateKey!, path);\r\n  const validationState = shadowMeta?.validation;\r\n\r\n  const status = validationState?.status || 'NOT_VALIDATED';\r\n\r\n  const errors = (validationState?.errors || []).map((err) => ({\r\n    ...err,\r\n    path: path,\r\n  })) as ValidationError[];\r\n  const errorMessages = errors\r\n    .filter((err) => err.severity === 'error')\r\n    .map((err) => err.message);\r\n  const warningMessages = errors\r\n    .filter((err) => err.severity === 'warning')\r\n    .map((err) => err.message);\r\n\r\n  // Use first error, or first warning if no errors\r\n  const message = errorMessages[0] || warningMessages[0];\r\n\r\n  return (\r\n    <>\r\n      {thisStateOpts?.formElements?.validation &&\r\n      !formOpts?.validation?.disable ? (\r\n        thisStateOpts.formElements!.validation!({\r\n          children: (\r\n            <React.Fragment key={path.toString()}>{children}</React.Fragment>\r\n          ),\r\n          status, // Now passes the new ValidationStatus type\r\n          message: formOpts?.validation?.hideMessage\r\n            ? ''\r\n            : formOpts?.validation?.message || message || '',\r\n\r\n          hasErrors: errorMessages.length > 0,\r\n          hasWarnings: warningMessages.length > 0,\r\n          allErrors: errors,\r\n          path: path,\r\n          getData: () => getShadowValue(stateKey!, path),\r\n        })\r\n      ) : (\r\n        <React.Fragment key={path.toString()}>{children}</React.Fragment>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nexport const MemoizedCogsItemWrapper = memo(\r\n  ListItemWrapper,\r\n  (prevProps, nextProps) => {\r\n    // Re-render if any of these change:\r\n    return (\r\n      prevProps.itemPath.join('.') === nextProps.itemPath.join('.') &&\r\n      prevProps.stateKey === nextProps.stateKey &&\r\n      prevProps.itemComponentId === nextProps.itemComponentId &&\r\n      prevProps.localIndex === nextProps.localIndex\r\n    );\r\n  }\r\n);\r\nexport function ListItemWrapper({\r\n  stateKey,\r\n  itemComponentId,\r\n  itemPath,\r\n  localIndex,\r\n  arraySetter,\r\n  rebuildStateShape,\r\n  renderFn,\r\n}: {\r\n  stateKey: string;\r\n  itemComponentId: string;\r\n  itemPath: string[];\r\n  localIndex: number;\r\n  arraySetter: any;\r\n\r\n  rebuildStateShape: (options: {\r\n    currentState: any;\r\n    path: string[];\r\n    componentId: string;\r\n    meta?: any;\r\n  }) => any;\r\n  renderFn: (\r\n    setter: any,\r\n    index: number,\r\n\r\n    arraySetter: any\r\n  ) => React.ReactNode;\r\n}) {\r\n  const [, forceUpdate] = useState({});\r\n  const { ref: inViewRef, inView } = useInView();\r\n  const elementRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  const imagesLoaded = useImageLoaded(elementRef);\r\n  const hasReportedInitialHeight = useRef(false);\r\n  const fullKey = [stateKey, ...itemPath].join('.');\r\n  useRegisterComponent(stateKey, itemComponentId, forceUpdate);\r\n\r\n  const setRefs = useCallback(\r\n    (element: HTMLDivElement | null) => {\r\n      elementRef.current = element;\r\n      inViewRef(element); // This is the ref from useInView\r\n    },\r\n    [inViewRef]\r\n  );\r\n\r\n  useEffect(() => {\r\n    subscribeToPath(fullKey, (e) => {\r\n      forceUpdate({});\r\n    });\r\n  }, []);\r\n  useEffect(() => {\r\n    if (!inView || !imagesLoaded || hasReportedInitialHeight.current) {\r\n      return;\r\n    }\r\n\r\n    const element = elementRef.current;\r\n    if (element && element.offsetHeight > 0) {\r\n      hasReportedInitialHeight.current = true;\r\n      const newHeight = element.offsetHeight;\r\n\r\n      setShadowMetadata(stateKey, itemPath, {\r\n        virtualizer: {\r\n          itemHeight: newHeight,\r\n          domRef: element,\r\n        },\r\n      });\r\n\r\n      const arrayPath = itemPath.slice(0, -1);\r\n      const arrayPathKey = [stateKey, ...arrayPath].join('.');\r\n      notifyPathSubscribers(arrayPathKey, {\r\n        type: 'ITEMHEIGHT',\r\n        itemKey: itemPath.join('.'),\r\n\r\n        ref: elementRef.current,\r\n      });\r\n    }\r\n  }, [inView, imagesLoaded, stateKey, itemPath]);\r\n\r\n  const itemValue = getShadowValue(stateKey, itemPath);\r\n\r\n  if (itemValue === undefined) {\r\n    return null;\r\n  }\r\n\r\n  const itemSetter = rebuildStateShape({\r\n    currentState: itemValue,\r\n    path: itemPath,\r\n    componentId: itemComponentId,\r\n  });\r\n  const children = renderFn(itemSetter, localIndex, arraySetter);\r\n\r\n  return <div ref={setRefs}>{children}</div>;\r\n}\r\n\r\nexport function FormElementWrapper({\r\n  stateKey,\r\n  path,\r\n  rebuildStateShape,\r\n  renderFn,\r\n  formOpts,\r\n  setState,\r\n}: {\r\n  stateKey: string;\r\n  path: string[];\r\n  rebuildStateShape: (options: {\r\n    path: string[];\r\n    componentId: string;\r\n    meta?: any;\r\n  }) => any;\r\n  renderFn: (params: FormElementParams<any>) => React.ReactNode;\r\n  formOpts?: FormOptsType;\r\n  setState: any;\r\n}) {\r\n  const [componentId] = useState(() => uuidv4());\r\n  const [, forceUpdate] = useState({});\r\n\r\n  const stateKeyPathKey = [stateKey, ...path].join('.');\r\n  useRegisterComponent(stateKey, componentId, forceUpdate);\r\n  const globalStateValue = getShadowValue(stateKey, path);\r\n  const [localValue, setLocalValue] = useState<any>(globalStateValue);\r\n  const isCurrentlyDebouncing = useRef(false);\r\n  const debounceTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !isCurrentlyDebouncing.current &&\r\n      !isDeepEqual(globalStateValue, localValue)\r\n    ) {\r\n      setLocalValue(globalStateValue);\r\n    }\r\n  }, [globalStateValue]);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = getGlobalStore\r\n      .getState()\r\n      .subscribeToPath(stateKeyPathKey, (newValue) => {\r\n        if (!isCurrentlyDebouncing.current && localValue !== newValue) {\r\n          forceUpdate({});\r\n        }\r\n      });\r\n    return () => {\r\n      unsubscribe();\r\n      if (debounceTimeoutRef.current) {\r\n        clearTimeout(debounceTimeoutRef.current);\r\n        isCurrentlyDebouncing.current = false;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const debouncedUpdate = useCallback(\r\n    (newValue: any) => {\r\n      const currentType = typeof globalStateValue;\r\n      if (currentType === 'number' && typeof newValue === 'string') {\r\n        newValue = newValue === '' ? 0 : Number(newValue);\r\n      }\r\n      setLocalValue(newValue);\r\n      isCurrentlyDebouncing.current = true;\r\n\r\n      if (debounceTimeoutRef.current) {\r\n        clearTimeout(debounceTimeoutRef.current);\r\n      }\r\n\r\n      const debounceTime = formOpts?.debounceTime ?? 200;\r\n\r\n      debounceTimeoutRef.current = setTimeout(() => {\r\n        isCurrentlyDebouncing.current = false;\r\n        setState(newValue, path, { updateType: 'update' });\r\n\r\n        // NEW: Check if validation is enabled via features\r\n        const rootMeta = getGlobalStore\r\n          .getState()\r\n          .getShadowMetadata(stateKey, []);\r\n        if (!rootMeta?.features?.validationEnabled) return;\r\n\r\n        const validationOptions = getInitialOptions(stateKey)?.validation;\r\n        const zodSchema =\r\n          validationOptions?.zodSchemaV4 || validationOptions?.zodSchemaV3;\r\n\r\n        if (zodSchema) {\r\n          const fullState = getShadowValue(stateKey, []);\r\n          const result = zodSchema.safeParse(fullState);\r\n          const currentMeta = getShadowMetadata(stateKey, path) || {};\r\n\r\n          if (!result.success) {\r\n            const errors =\r\n              'issues' in result.error\r\n                ? result.error.issues\r\n                : (result.error as any).errors;\r\n\r\n            const pathErrors = errors.filter(\r\n              (error: any) =>\r\n                JSON.stringify(error.path) === JSON.stringify(path)\r\n            );\r\n\r\n            if (pathErrors.length > 0) {\r\n              setShadowMetadata(stateKey, path, {\r\n                ...currentMeta,\r\n                validation: {\r\n                  status: 'INVALID',\r\n                  errors: [\r\n                    {\r\n                      source: 'client',\r\n                      message: pathErrors[0]?.message,\r\n                      severity: 'warning', // Gentle error during typing\r\n                    },\r\n                  ],\r\n                  lastValidated: Date.now(),\r\n                  validatedValue: newValue,\r\n                },\r\n              });\r\n            } else {\r\n              setShadowMetadata(stateKey, path, {\r\n                ...currentMeta,\r\n                validation: {\r\n                  status: 'VALID',\r\n                  errors: [],\r\n                  lastValidated: Date.now(),\r\n                  validatedValue: newValue,\r\n                },\r\n              });\r\n            }\r\n          } else {\r\n            setShadowMetadata(stateKey, path, {\r\n              ...currentMeta,\r\n              validation: {\r\n                status: 'VALID',\r\n                errors: [],\r\n                lastValidated: Date.now(),\r\n                validatedValue: newValue,\r\n              },\r\n            });\r\n          }\r\n        }\r\n      }, debounceTime);\r\n      forceUpdate({});\r\n    },\r\n    [setState, path, formOpts?.debounceTime, stateKey]\r\n  );\r\n\r\n  const handleBlur = useCallback(async () => {\r\n    console.log('handleBlur triggered');\r\n\r\n    // Commit any pending changes\r\n    if (debounceTimeoutRef.current) {\r\n      clearTimeout(debounceTimeoutRef.current);\r\n      debounceTimeoutRef.current = null;\r\n      isCurrentlyDebouncing.current = false;\r\n      setState(localValue, path, { updateType: 'update' });\r\n    }\r\n    const rootMeta = getShadowMetadata(stateKey, []);\r\n    if (!rootMeta?.features?.validationEnabled) return;\r\n    const { getInitialOptions } = getGlobalStore.getState();\r\n    const validationOptions = getInitialOptions(stateKey)?.validation;\r\n    const zodSchema =\r\n      validationOptions?.zodSchemaV4 || validationOptions?.zodSchemaV3;\r\n\r\n    if (!zodSchema) return;\r\n\r\n    // Get the full path including stateKey\r\n\r\n    // Update validation state to \"validating\"\r\n    const currentMeta = getShadowMetadata(stateKey, path);\r\n\r\n    setShadowMetadata(stateKey, path, {\r\n      ...currentMeta,\r\n      validation: {\r\n        status: 'VALIDATING',\r\n        errors: [],\r\n        lastValidated: Date.now(),\r\n        validatedValue: localValue,\r\n      },\r\n    });\r\n\r\n    // Validate full state\r\n    const fullState = getShadowValue(stateKey, []);\r\n    const result = zodSchema.safeParse(fullState);\r\n\r\n    if (!result.success) {\r\n      const errors =\r\n        'issues' in result.error\r\n          ? result.error.issues\r\n          : (result.error as any).errors;\r\n\r\n      // Find errors for this specific path\r\n      const pathErrors = errors.filter((error: any) => {\r\n        // For array paths, we need to translate indices to ULIDs\r\n        if (path.some((p) => p.startsWith('id:'))) {\r\n          // This is an array item path like [\"id:xyz\", \"name\"]\r\n          const parentPath = path[0]!.startsWith('id:')\r\n            ? []\r\n            : path.slice(0, -1);\r\n\r\n          const arrayMeta = getGlobalStore\r\n            .getState()\r\n            .getShadowMetadata(stateKey, parentPath);\r\n\r\n          if (arrayMeta?.arrayKeys) {\r\n            const itemKey = [stateKey, ...path.slice(0, -1)].join('.');\r\n            const itemIndex = arrayMeta.arrayKeys.indexOf(itemKey);\r\n\r\n            // Compare with Zod path\r\n            const zodPath = [...parentPath, itemIndex, ...path.slice(-1)];\r\n            const match =\r\n              JSON.stringify(error.path) === JSON.stringify(zodPath);\r\n\r\n            return match;\r\n          }\r\n        }\r\n\r\n        const directMatch = JSON.stringify(error.path) === JSON.stringify(path);\r\n\r\n        return directMatch;\r\n      });\r\n\r\n      // Update shadow metadata with validation result\r\n      setShadowMetadata(stateKey, path, {\r\n        ...currentMeta,\r\n        validation: {\r\n          status: 'INVALID',\r\n          errors: pathErrors.map((err: any) => ({\r\n            source: 'client' as const,\r\n            message: err.message,\r\n            severity: 'error' as const, // Hard error on blur\r\n          })),\r\n          lastValidated: Date.now(),\r\n          validatedValue: localValue,\r\n        },\r\n      });\r\n    } else {\r\n      // Validation passed\r\n      setShadowMetadata(stateKey, path, {\r\n        ...currentMeta,\r\n        validation: {\r\n          status: 'VALID',\r\n          errors: [],\r\n          lastValidated: Date.now(),\r\n          validatedValue: localValue,\r\n        },\r\n      });\r\n    }\r\n    forceUpdate({});\r\n  }, [stateKey, path, localValue, setState]);\r\n\r\n  const baseState = rebuildStateShape({\r\n    path: path,\r\n    componentId: componentId,\r\n  });\r\n\r\n  const stateWithInputProps = new Proxy(baseState, {\r\n    get(target, prop) {\r\n      if (prop === 'inputProps') {\r\n        return {\r\n          value: localValue ?? '',\r\n          onChange: (e: any) => {\r\n            debouncedUpdate(e.target.value);\r\n          },\r\n          // 5. Wire the new onBlur handler to the input props.\r\n          onBlur: handleBlur,\r\n          ref: formRefStore\r\n            .getState()\r\n            .getFormRef(stateKey + '.' + path.join('.')),\r\n        };\r\n      }\r\n\r\n      return target[prop];\r\n    },\r\n  });\r\n\r\n  return (\r\n    <ValidationWrapper formOpts={formOpts} path={path} stateKey={stateKey}>\r\n      {renderFn(stateWithInputProps)}\r\n    </ValidationWrapper>\r\n  );\r\n}\r\nexport function useRegisterComponent(\r\n  stateKey: string,\r\n  componentId: string,\r\n  forceUpdate: (o: object) => void\r\n) {\r\n  const fullComponentId = `${stateKey}////${componentId}`;\r\n\r\n  useLayoutEffect(() => {\r\n    // Call the safe, centralized function to register\r\n    registerComponent(stateKey, fullComponentId, {\r\n      forceUpdate: () => forceUpdate({}),\r\n      paths: new Set(),\r\n      reactiveType: ['component'],\r\n    });\r\n\r\n    // The cleanup now calls the safe, centralized unregister function\r\n    return () => {\r\n      unregisterComponent(stateKey, fullComponentId);\r\n    };\r\n  }, [stateKey, fullComponentId]); // Dependencies are stable and correct\r\n}\r\n\r\nconst useImageLoaded = (ref: RefObject<HTMLElement>): boolean => {\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  useLayoutEffect(() => {\r\n    if (!ref.current) {\r\n      setLoaded(true);\r\n      return;\r\n    }\r\n\r\n    const images = Array.from(ref.current.querySelectorAll('img'));\r\n\r\n    // If there are no images, we are \"loaded\" immediately.\r\n    if (images.length === 0) {\r\n      setLoaded(true);\r\n      return;\r\n    }\r\n\r\n    let loadedCount = 0;\r\n    const handleImageLoad = () => {\r\n      loadedCount++;\r\n      if (loadedCount === images.length) {\r\n        setLoaded(true);\r\n      }\r\n    };\r\n\r\n    images.forEach((image) => {\r\n      if (image.complete) {\r\n        handleImageLoad();\r\n      } else {\r\n        image.addEventListener('load', handleImageLoad);\r\n        image.addEventListener('error', handleImageLoad);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      images.forEach((image) => {\r\n        image.removeEventListener('load', handleImageLoad);\r\n        image.removeEventListener('error', handleImageLoad);\r\n      });\r\n    };\r\n  }, [ref.current]);\r\n\r\n  return loaded;\r\n};\r\n"],"names":["getInitialOptions","getShadowMetadata","setShadowMetadata","getShadowValue","registerComponent","unregisterComponent","notifyPathSubscribers","subscribeToPath","getGlobalStore","ValidationWrapper","formOpts","path","stateKey","children","thisStateOpts","validationState","status","errors","err","errorMessages","warningMessages","message","jsx","Fragment","React","MemoizedCogsItemWrapper","memo","ListItemWrapper","prevProps","nextProps","itemComponentId","itemPath","localIndex","arraySetter","rebuildStateShape","renderFn","forceUpdate","useState","inViewRef","inView","useInView","elementRef","useRef","imagesLoaded","useImageLoaded","hasReportedInitialHeight","fullKey","useRegisterComponent","setRefs","useCallback","element","useEffect","e","newHeight","arrayPath","arrayPathKey","itemValue","itemSetter","FormElementWrapper","setState","componentId","uuidv4","stateKeyPathKey","globalStateValue","localValue","setLocalValue","isCurrentlyDebouncing","debounceTimeoutRef","isDeepEqual","unsubscribe","newValue","debouncedUpdate","debounceTime","validationOptions","zodSchema","fullState","result","currentMeta","pathErrors","error","handleBlur","p","parentPath","arrayMeta","itemKey","itemIndex","zodPath","baseState","stateWithInputProps","target","prop","formRefStore","fullComponentId","useLayoutEffect","ref","loaded","setLoaded","images","loadedCount","handleImageLoad","image"],"mappings":"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"}