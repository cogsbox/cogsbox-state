{"version":3,"file":"Components.jsx","sources":["../src/Components.tsx"],"sourcesContent":["import {\r\n  FormElementParams,\r\n  StateObject,\r\n  UpdateTypeDetail,\r\n  type FormOptsType,\r\n} from './CogsState';\r\nimport { pluginStore } from './pluginStore';\r\nimport { createMetadataContext, toDeconstructedMethods } from './plugins';\r\nimport React, {\r\n  memo,\r\n  RefObject,\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useRef,\r\n  useState,\r\n  useMemo,\r\n} from 'react';\r\nimport { getGlobalStore, ValidationError, ValidationSeverity } from './store';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { isDeepEqual } from './utility';\r\nimport { runValidation } from './validation';\r\n\r\nconst {\r\n  getInitialOptions,\r\n\r\n  getShadowMetadata,\r\n  setShadowMetadata,\r\n  getShadowValue,\r\n\r\n  registerComponent,\r\n  unregisterComponent,\r\n\r\n  notifyPathSubscribers,\r\n  subscribeToPath,\r\n} = getGlobalStore.getState();\r\nconst { stateHandlers, notifyFormUpdate } = pluginStore.getState();\r\n\r\nexport type ValidationWrapperProps = {\r\n  formOpts?: FormOptsType;\r\n  path: string[];\r\n  stateKey: string;\r\n  children: React.ReactNode;\r\n};\r\n\r\nexport function ValidationWrapper({\r\n  formOpts,\r\n  path,\r\n  stateKey,\r\n  children,\r\n}: ValidationWrapperProps) {\r\n  const { getInitialOptions, getShadowMetadata, getShadowValue } =\r\n    getGlobalStore.getState();\r\n  const thisStateOpts = getInitialOptions(stateKey!);\r\n\r\n  const shadowMeta = getShadowMetadata(stateKey!, path);\r\n  const validationState = shadowMeta?.validation;\r\n\r\n  const status = validationState?.status || 'NOT_VALIDATED';\r\n\r\n  const errors = (validationState?.errors || []).map((err) => ({\r\n    ...err,\r\n    path: path,\r\n  })) as ValidationError[];\r\n  const errorMessages = errors\r\n    .filter((err) => err.severity === 'error')\r\n    .map((err) => err.message);\r\n  const warningMessages = errors\r\n    .filter((err) => err.severity === 'warning')\r\n    .map((err) => err.message);\r\n\r\n  // Use first error, or first warning if no errors\r\n  const message = errorMessages[0] || warningMessages[0];\r\n  const primarySeverity: ValidationSeverity =\r\n    errorMessages.length > 0\r\n      ? 'error'\r\n      : warningMessages.length > 0\r\n        ? 'warning'\r\n        : undefined;\r\n  return (\r\n    <>\r\n      {thisStateOpts?.formElements?.validation &&\r\n      !formOpts?.validation?.disable ? (\r\n        thisStateOpts.formElements!.validation!({\r\n          children: (\r\n            <React.Fragment key={path.toString()}>{children}</React.Fragment>\r\n          ),\r\n          status, // Now passes the new ValidationStatus type\r\n          message: formOpts?.validation?.hideMessage\r\n            ? ''\r\n            : formOpts?.validation?.message || message || '',\r\n          severity: primarySeverity,\r\n          hasErrors: errorMessages.length > 0,\r\n          hasWarnings: warningMessages.length > 0,\r\n          allErrors: errors,\r\n          path: path,\r\n          getData: () => getShadowValue(stateKey!, path),\r\n        })\r\n      ) : (\r\n        <React.Fragment key={path.toString()}>{children}</React.Fragment>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nexport const MemoizedCogsItemWrapper = memo(\r\n  ListItemWrapper,\r\n  (prevProps, nextProps) => {\r\n    // Re-render if any of these change:\r\n    return (\r\n      prevProps.itemPath.join('.') === nextProps.itemPath.join('.') &&\r\n      prevProps.stateKey === nextProps.stateKey &&\r\n      prevProps.itemComponentId === nextProps.itemComponentId &&\r\n      prevProps.localIndex === nextProps.localIndex\r\n    );\r\n  }\r\n);\r\nexport function ListItemWrapper({\r\n  stateKey,\r\n  itemComponentId,\r\n  itemPath,\r\n  localIndex,\r\n  arraySetter,\r\n  rebuildStateShape,\r\n  renderFn,\r\n}: {\r\n  stateKey: string;\r\n  itemComponentId: string;\r\n  itemPath: string[];\r\n  localIndex: number;\r\n  arraySetter: any;\r\n\r\n  rebuildStateShape: (options: {\r\n    currentState: any;\r\n    path: string[];\r\n    componentId: string;\r\n    meta?: any;\r\n  }) => any;\r\n  renderFn: (\r\n    setter: any,\r\n    index: number,\r\n\r\n    arraySetter: any\r\n  ) => React.ReactNode;\r\n}) {\r\n  const [, forceUpdate] = useState({});\r\n  const { ref: inViewRef, inView } = useInView();\r\n  const elementRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  const imagesLoaded = useImageLoaded(elementRef);\r\n  const hasReportedInitialHeight = useRef(false);\r\n  const fullKey = [stateKey, ...itemPath].join('.');\r\n  useRegisterComponent(stateKey, itemComponentId, forceUpdate);\r\n\r\n  const setRefs = useCallback(\r\n    (element: HTMLDivElement | null) => {\r\n      elementRef.current = element;\r\n      inViewRef(element); // This is the ref from useInView\r\n    },\r\n    [inViewRef]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = subscribeToPath(fullKey, (e) => {\r\n      forceUpdate({});\r\n    });\r\n    return () => unsubscribe();\r\n  }, [fullKey]);\r\n  useEffect(() => {\r\n    if (!inView || !imagesLoaded || hasReportedInitialHeight.current) {\r\n      return;\r\n    }\r\n\r\n    const element = elementRef.current;\r\n    if (element && element.offsetHeight > 0) {\r\n      hasReportedInitialHeight.current = true;\r\n      const newHeight = element.offsetHeight;\r\n\r\n      setShadowMetadata(stateKey, itemPath, {\r\n        virtualizer: {\r\n          itemHeight: newHeight,\r\n          domRef: element,\r\n        },\r\n      });\r\n\r\n      const arrayPath = itemPath.slice(0, -1);\r\n      const arrayPathKey = [stateKey, ...arrayPath].join('.');\r\n      notifyPathSubscribers(arrayPathKey, {\r\n        type: 'ITEMHEIGHT',\r\n        itemKey: itemPath.join('.'),\r\n\r\n        ref: elementRef.current,\r\n      });\r\n    }\r\n  }, [inView, imagesLoaded, stateKey, itemPath]);\r\n\r\n  const itemValue = getShadowValue(stateKey, itemPath);\r\n\r\n  if (itemValue === undefined) {\r\n    return null;\r\n  }\r\n\r\n  const itemSetter = rebuildStateShape({\r\n    currentState: itemValue,\r\n    path: itemPath,\r\n    componentId: itemComponentId,\r\n  });\r\n  const children = renderFn(itemSetter, localIndex, arraySetter);\r\n\r\n  return <div ref={setRefs}>{children}</div>;\r\n}\r\n\r\nexport function FormElementWrapper({\r\n  stateKey,\r\n  path,\r\n  rebuildStateShape,\r\n  renderFn,\r\n  formOpts,\r\n  setState,\r\n}: {\r\n  stateKey: string;\r\n  path: string[];\r\n  rebuildStateShape: (options: {\r\n    path: string[];\r\n    componentId: string;\r\n    meta?: any;\r\n  }) => any;\r\n  renderFn: (params: FormElementParams<any>) => React.ReactNode;\r\n  formOpts?: FormOptsType;\r\n  setState: any;\r\n}) {\r\n  const componentId = useRef(uuidv4()).current;\r\n\r\n  const [, forceUpdate] = useState({});\r\n  const formElementRef = useRef<any>(null);\r\n  const stateKeyPathKey = [stateKey, ...path].join('.');\r\n  useRegisterComponent(stateKey, componentId, forceUpdate);\r\n  // Get the shadow node to access typeInfo and schema\r\n  const shadowNode = getGlobalStore.getState().getShadowNode(stateKey, path);\r\n  const typeInfo = shadowNode?._meta?.typeInfo;\r\n\r\n  const globalStateValue = getShadowValue(stateKey, path);\r\n  const [localValue, setLocalValue] = useState<any>(globalStateValue);\r\n  const isCurrentlyDebouncing = useRef(false);\r\n  const debounceTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // 2. Memoize the list of active form wrappers to avoid re-calculating on every render.\r\n  const activeFormWrappers = useMemo(() => {\r\n    return (\r\n      pluginStore\r\n        .getState()\r\n        .getPluginConfigsForState(stateKey)\r\n        // We only care about plugins that have defined a formWrapper\r\n        .filter((config) => typeof config.plugin.formWrapper === 'function')\r\n    );\r\n  }, [stateKey]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !isCurrentlyDebouncing.current &&\r\n      !isDeepEqual(globalStateValue, localValue)\r\n    ) {\r\n      setLocalValue(globalStateValue);\r\n    }\r\n  }, [globalStateValue]);\r\n\r\n  useEffect(() => {\r\n    const { getShadowMetadata, setShadowMetadata } = getGlobalStore.getState();\r\n\r\n    // Initialize clientActivityState if needed\r\n    const currentMeta = getShadowMetadata(stateKey, path) || {};\r\n    if (!currentMeta.clientActivityState) {\r\n      currentMeta.clientActivityState = { elements: new Map() };\r\n    }\r\n\r\n    // Detect element type from the ref\r\n    const detectElementType = () => {\r\n      const el = formElementRef.current;\r\n      if (!el) return 'input';\r\n      const tagName = el.tagName.toLowerCase();\r\n      if (tagName === 'textarea') return 'textarea';\r\n      if (tagName === 'select') return 'select';\r\n      if (tagName === 'input') {\r\n        const type = (el as HTMLInputElement).type;\r\n        if (type === 'checkbox') return 'checkbox';\r\n        if (type === 'radio') return 'radio';\r\n        if (type === 'range') return 'range';\r\n        if (type === 'file') return 'file';\r\n      }\r\n      return 'input';\r\n    };\r\n\r\n    // Add this element to the Map\r\n    currentMeta.clientActivityState.elements.set(componentId, {\r\n      domRef: formElementRef,\r\n      elementType: detectElementType(),\r\n      inputType: formElementRef.current?.type,\r\n      mountedAt: Date.now(),\r\n    });\r\n\r\n    setShadowMetadata(stateKey, path, currentMeta);\r\n\r\n    // Subscribe to path updates\r\n    const unsubscribe = getGlobalStore\r\n      .getState()\r\n      .subscribeToPath(stateKeyPathKey, (newValue) => {\r\n        if (!isCurrentlyDebouncing.current && localValue !== newValue) {\r\n          forceUpdate({});\r\n        }\r\n      });\r\n\r\n    // Cleanup\r\n    return () => {\r\n      unsubscribe();\r\n\r\n      if (debounceTimeoutRef.current) {\r\n        clearTimeout(debounceTimeoutRef.current);\r\n        isCurrentlyDebouncing.current = false;\r\n      }\r\n\r\n      // Remove element from Map\r\n      const meta = getGlobalStore.getState().getShadowMetadata(stateKey, path);\r\n      if (meta?.clientActivityState?.elements) {\r\n        meta.clientActivityState.elements.delete(componentId);\r\n        setShadowMetadata(stateKey, path, meta);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const debouncedUpdate = useCallback(\r\n    (newValue: any) => {\r\n      // Type conversion logic (keep existing)\r\n      if (typeInfo) {\r\n        if (typeInfo.type === 'number' && typeof newValue === 'string') {\r\n          newValue =\r\n            newValue === ''\r\n              ? typeInfo.nullable\r\n                ? null\r\n                : (typeInfo.default ?? 0)\r\n              : Number(newValue);\r\n        } else if (\r\n          typeInfo.type === 'boolean' &&\r\n          typeof newValue === 'string'\r\n        ) {\r\n          newValue = newValue === 'true' || newValue === '1';\r\n        } else if (typeInfo.type === 'date' && typeof newValue === 'string') {\r\n          newValue = new Date(newValue);\r\n        }\r\n      } else {\r\n        const currentType = typeof globalStateValue;\r\n        if (currentType === 'number' && typeof newValue === 'string') {\r\n          newValue = newValue === '' ? 0 : Number(newValue);\r\n        }\r\n      }\r\n\r\n      setLocalValue(newValue);\r\n\r\n      // Update input activity details\r\n      const { getShadowMetadata, setShadowMetadata } =\r\n        getGlobalStore.getState();\r\n      const meta = getShadowMetadata(stateKey, path);\r\n      if (meta?.clientActivityState?.elements?.has(componentId)) {\r\n        const element = meta.clientActivityState.elements.get(componentId);\r\n        if (element && element.currentActivity?.type === 'focus') {\r\n          element!.currentActivity.details = {\r\n            ...element!.currentActivity.details,\r\n            value: newValue,\r\n            previousValue:\r\n              element!.currentActivity.details?.value || globalStateValue,\r\n            inputLength:\r\n              typeof newValue === 'string' ? newValue.length : undefined,\r\n            keystrokeCount:\r\n              (element!.currentActivity.details?.keystrokeCount || 0) + 1,\r\n          };\r\n          setShadowMetadata(stateKey, path, meta);\r\n        }\r\n      }\r\n\r\n      // Notify plugins\r\n      notifyFormUpdate({\r\n        stateKey,\r\n        type: 'input',\r\n        path,\r\n        value: newValue,\r\n      });\r\n\r\n      // Validation (keep existing)\r\n      const virtualOperation: UpdateTypeDetail = {\r\n        stateKey,\r\n        path,\r\n        newValue: newValue,\r\n        updateType: 'update',\r\n        timeStamp: Date.now(),\r\n        status: 'new',\r\n        oldValue: globalStateValue,\r\n      };\r\n      runValidation(virtualOperation, 'onChange');\r\n\r\n      // Debounce state update (keep existing)\r\n      isCurrentlyDebouncing.current = true;\r\n      if (debounceTimeoutRef.current) {\r\n        clearTimeout(debounceTimeoutRef.current);\r\n      }\r\n\r\n      const debounceTime = formOpts?.debounceTime ?? 200;\r\n      debounceTimeoutRef.current = setTimeout(() => {\r\n        isCurrentlyDebouncing.current = false;\r\n        setState(newValue, path, {\r\n          updateType: 'update',\r\n          validationTrigger: 'onChange',\r\n        });\r\n      }, debounceTime);\r\n    },\r\n    [\r\n      setState,\r\n      path,\r\n      formOpts?.debounceTime,\r\n      typeInfo,\r\n      globalStateValue,\r\n      stateKey,\r\n      componentId,\r\n    ]\r\n  );\r\n\r\n  const handleFocus = useCallback(() => {\r\n    const { getShadowMetadata, setShadowMetadata } = getGlobalStore.getState();\r\n\r\n    // Update element's current activity\r\n    const meta = getShadowMetadata(stateKey, path);\r\n    if (meta?.clientActivityState?.elements?.has(componentId)) {\r\n      const element = meta.clientActivityState.elements.get(componentId)!;\r\n      element.currentActivity = {\r\n        type: 'focus',\r\n        startTime: Date.now(),\r\n        details: {\r\n          value: localValue,\r\n          inputLength:\r\n            typeof localValue === 'string' ? localValue.length : undefined,\r\n        },\r\n      };\r\n      setShadowMetadata(stateKey, path, meta);\r\n    }\r\n\r\n    // Notify plugins\r\n    notifyFormUpdate({\r\n      stateKey,\r\n      type: 'focus',\r\n      path,\r\n      value: localValue,\r\n    });\r\n  }, [stateKey, path, componentId, localValue]);\r\n  const handleBlur = useCallback(() => {\r\n    const { getShadowMetadata, setShadowMetadata } = getGlobalStore.getState();\r\n\r\n    // Clear debounce if active\r\n    if (debounceTimeoutRef.current) {\r\n      clearTimeout(debounceTimeoutRef.current);\r\n      debounceTimeoutRef.current = null;\r\n      isCurrentlyDebouncing.current = false;\r\n      setState(localValue, path, {\r\n        updateType: 'update',\r\n        validationTrigger: 'onBlur',\r\n      });\r\n    }\r\n\r\n    // Clear element's current activity\r\n    const meta = getShadowMetadata(stateKey, path);\r\n    if (meta?.clientActivityState?.elements?.has(componentId)) {\r\n      const element = meta.clientActivityState.elements.get(componentId)!;\r\n      element.currentActivity = undefined;\r\n      setShadowMetadata(stateKey, path, meta);\r\n    }\r\n\r\n    // Notify plugins\r\n    notifyFormUpdate({\r\n      stateKey,\r\n      type: 'blur',\r\n      path,\r\n      value: localValue,\r\n    });\r\n\r\n    // Run validation if configured\r\n    const validationOptions = getInitialOptions(stateKey)?.validation;\r\n    if (validationOptions?.onBlur) {\r\n      const virtualOperation: UpdateTypeDetail = {\r\n        stateKey,\r\n        path,\r\n        newValue: localValue,\r\n        updateType: 'update',\r\n        timeStamp: Date.now(),\r\n        status: 'new',\r\n        oldValue: globalStateValue,\r\n      };\r\n      runValidation(virtualOperation, 'onBlur');\r\n    }\r\n  }, [localValue, setState, path, stateKey, componentId, globalStateValue]);\r\n\r\n  const baseState = rebuildStateShape({\r\n    path: path,\r\n    componentId: componentId,\r\n    meta: undefined,\r\n  });\r\n\r\n  const stateWithInputProps = new Proxy(baseState, {\r\n    get(target, prop) {\r\n      if (prop === '$inputProps') {\r\n        return {\r\n          value: localValue ?? '',\r\n          onChange: (e: any) => {\r\n            debouncedUpdate(e.target.value);\r\n          },\r\n          onFocus: handleFocus,\r\n          onBlur: handleBlur,\r\n          ref: formElementRef,\r\n        };\r\n      }\r\n\r\n      return target[prop];\r\n    },\r\n  });\r\n\r\n  const initialElement = renderFn(stateWithInputProps);\r\n\r\n  const wrappedElement = activeFormWrappers.reduceRight(\r\n    (currentElement, config, index) => (\r\n      <PluginWrapper\r\n        stateKey={stateKey}\r\n        path={path}\r\n        pluginName={config.plugin.name}\r\n        wrapperDepth={activeFormWrappers.length - 1 - index}\r\n      >\r\n        {currentElement}\r\n      </PluginWrapper>\r\n    ),\r\n    initialElement\r\n  );\r\n\r\n  return (\r\n    <ValidationWrapper formOpts={formOpts} path={path} stateKey={stateKey}>\r\n      {wrappedElement}\r\n    </ValidationWrapper>\r\n  );\r\n}\r\nexport function useRegisterComponent(\r\n  stateKey: string,\r\n  componentId: string,\r\n  forceUpdate: (o: object) => void\r\n) {\r\n  const fullComponentId = `${stateKey}////${componentId}`;\r\n\r\n  useLayoutEffect(() => {\r\n    // Call the safe, centralized function to register\r\n    registerComponent(stateKey, fullComponentId, {\r\n      forceUpdate: () => forceUpdate({}),\r\n      paths: new Set(),\r\n      reactiveType: ['component'],\r\n    });\r\n\r\n    // The cleanup now calls the safe, centralized unregister function\r\n    return () => {\r\n      unregisterComponent(stateKey, fullComponentId);\r\n    };\r\n  }, [stateKey, fullComponentId]); // Dependencies are stable and correct\r\n}\r\n\r\nconst useImageLoaded = (ref: RefObject<HTMLElement>): boolean => {\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  useLayoutEffect(() => {\r\n    if (!ref.current) {\r\n      setLoaded(true);\r\n      return;\r\n    }\r\n\r\n    const images = Array.from(ref.current.querySelectorAll('img'));\r\n\r\n    // If there are no images, we are \"loaded\" immediately.\r\n    if (images.length === 0) {\r\n      setLoaded(true);\r\n      return;\r\n    }\r\n\r\n    let loadedCount = 0;\r\n    const handleImageLoad = () => {\r\n      loadedCount++;\r\n      if (loadedCount === images.length) {\r\n        setLoaded(true);\r\n      }\r\n    };\r\n\r\n    images.forEach((image) => {\r\n      if (image.complete) {\r\n        handleImageLoad();\r\n      } else {\r\n        image.addEventListener('load', handleImageLoad);\r\n        image.addEventListener('error', handleImageLoad);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      images.forEach((image) => {\r\n        image.removeEventListener('load', handleImageLoad);\r\n        image.removeEventListener('error', handleImageLoad);\r\n      });\r\n    };\r\n  }, [ref.current]);\r\n\r\n  return loaded;\r\n};\r\n// Components.tsx\r\n\r\n// Generic isolated component wrapper\r\nexport function IsolatedComponentWrapper({\r\n  stateKey,\r\n  path,\r\n  rebuildStateShape,\r\n  renderFn,\r\n}: {\r\n  stateKey: string;\r\n  path: string[];\r\n  rebuildStateShape: (options: {\r\n    path: string[];\r\n    componentId: string;\r\n    meta?: any;\r\n  }) => any;\r\n  renderFn: (state: any) => React.ReactNode;\r\n}) {\r\n  const [componentId] = useState(() => uuidv4());\r\n  const [, forceUpdate] = useState({});\r\n\r\n  const stateKeyPathKey = [stateKey, ...path].join('.');\r\n  useRegisterComponent(stateKey, componentId, forceUpdate);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = getGlobalStore\r\n      .getState()\r\n      .subscribeToPath(stateKeyPathKey, () => {\r\n        forceUpdate({});\r\n      });\r\n    return () => unsubscribe();\r\n  }, [stateKeyPathKey]);\r\n\r\n  const baseState = rebuildStateShape({\r\n    path: path,\r\n    componentId: componentId,\r\n    meta: undefined,\r\n  });\r\n\r\n  return <>{renderFn(baseState)}</>;\r\n}\r\n\r\n// 1. Define the MINIMAL props needed.\r\ntype PluginWrapperProps = {\r\n  children: React.ReactNode;\r\n  stateKey: string;\r\n  path: string[];\r\n  pluginName: string;\r\n  wrapperDepth: number;\r\n};\r\n\r\nconst PluginWrapper = memo(function PluginWrapper({\r\n  children,\r\n  stateKey,\r\n  path,\r\n  pluginName,\r\n  wrapperDepth,\r\n}: PluginWrapperProps) {\r\n  const [, forceUpdate] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fullPathKey = [stateKey, ...path].join('.');\r\n    const unsubscribe = getGlobalStore\r\n      .getState()\r\n      .subscribeToPath(fullPathKey, () => {\r\n        forceUpdate({});\r\n      });\r\n    return unsubscribe;\r\n  }, [stateKey, path]);\r\n\r\n  const plugin = pluginStore\r\n    .getState()\r\n    .registeredPlugins.find((p) => p.name === pluginName);\r\n\r\n  const stateHandler: StateObject<any> | undefined = pluginStore\r\n    .getState()\r\n    .stateHandlers.get(stateKey);\r\n\r\n  const typeInfo = getGlobalStore.getState().getShadowNode(stateKey, path)\r\n    ?._meta?.typeInfo;\r\n\r\n  const options = pluginStore\r\n    .getState()\r\n    .pluginOptions.get(stateKey)\r\n    ?.get(pluginName);\r\n\r\n  const hookData = pluginStore.getState().getHookResult(stateKey, pluginName);\r\n\r\n  if (!plugin?.formWrapper || !stateHandler) {\r\n    return <>{children}</>;\r\n  }\r\n\r\n  const metadataContext = createMetadataContext(stateKey, plugin.name);\r\n  const deconstructed = toDeconstructedMethods(stateHandler);\r\n\r\n  return plugin.formWrapper({\r\n    element: children,\r\n    path,\r\n    stateKey,\r\n    pluginName: plugin.name,\r\n    ...deconstructed,\r\n    ...metadataContext,\r\n    options,\r\n    hookData,\r\n    fieldType: typeInfo?.type,\r\n    wrapperDepth,\r\n  });\r\n});\r\n"],"names":["getInitialOptions","getShadowMetadata","setShadowMetadata","getShadowValue","registerComponent","unregisterComponent","notifyPathSubscribers","subscribeToPath","getGlobalStore","stateHandlers","notifyFormUpdate","pluginStore","ValidationWrapper","formOpts","path","stateKey","children","thisStateOpts","validationState","status","errors","err","errorMessages","warningMessages","message","primarySeverity","jsx","Fragment","React","MemoizedCogsItemWrapper","memo","ListItemWrapper","prevProps","nextProps","itemComponentId","itemPath","localIndex","arraySetter","rebuildStateShape","renderFn","forceUpdate","useState","inViewRef","inView","useInView","elementRef","useRef","imagesLoaded","useImageLoaded","hasReportedInitialHeight","fullKey","useRegisterComponent","setRefs","useCallback","element","useEffect","unsubscribe","e","newHeight","arrayPath","arrayPathKey","itemValue","itemSetter","FormElementWrapper","setState","componentId","uuidv4","formElementRef","stateKeyPathKey","typeInfo","globalStateValue","localValue","setLocalValue","isCurrentlyDebouncing","debounceTimeoutRef","activeFormWrappers","useMemo","config","isDeepEqual","currentMeta","detectElementType","el","tagName","type","newValue","meta","debouncedUpdate","runValidation","debounceTime","handleFocus","handleBlur","baseState","stateWithInputProps","target","prop","initialElement","wrappedElement","currentElement","index","PluginWrapper","fullComponentId","useLayoutEffect","ref","loaded","setLoaded","images","loadedCount","handleImageLoad","image","IsolatedComponentWrapper","pluginName","wrapperDepth","fullPathKey","plugin","p","stateHandler","options","hookData","metadataContext","createMetadataContext","deconstructed","toDeconstructedMethods"],"mappings":"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"}