{"version":3,"file":"CogsState.jsx","sources":["../src/CogsState.tsx"],"sourcesContent":["'use client';\r\n\r\nimport {\r\n  createElement,\r\n  startTransition,\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n  type CSSProperties,\r\n  type ReactNode,\r\n  type RefObject,\r\n} from 'react';\r\n\r\nimport {\r\n  getDifferences,\r\n  isArray,\r\n  isFunction,\r\n  type GenericObject,\r\n} from './utility.js';\r\nimport {\r\n  FormElementWrapper,\r\n  IsolatedComponentWrapper,\r\n  MemoizedCogsItemWrapper,\r\n  ValidationWrapper,\r\n} from './Components.js';\r\nimport { isDeepEqual, transformStateFunc } from './utility.js';\r\nimport superjson from 'superjson';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport {\r\n  formRefStore,\r\n  getGlobalStore,\r\n  shadowStateStore,\r\n  ValidationError,\r\n  ValidationSeverity,\r\n  ValidationStatus,\r\n  type ComponentsType,\r\n} from './store.js';\r\nimport { useCogsConfig } from './CogsStateClient.js';\r\nimport { Operation } from 'fast-json-patch';\r\n\r\nimport * as z3 from 'zod/v3';\r\nimport * as z4 from 'zod/v4';\r\n\r\ntype Prettify<T> = T extends any ? { [K in keyof T]: T[K] } : never;\r\n\r\nexport type VirtualViewOptions = {\r\n  itemHeight?: number;\r\n  overscan?: number;\r\n  stickToBottom?: boolean;\r\n  dependencies?: any[];\r\n  scrollStickTolerance?: number;\r\n};\r\n\r\n// The result now returns a real StateObject\r\nexport type VirtualStateObjectResult<T extends any[]> = {\r\n  virtualState: StateObject<T>;\r\n  virtualizerProps: {\r\n    outer: { ref: RefObject<HTMLDivElement>; style: CSSProperties };\r\n    inner: { style: CSSProperties };\r\n    list: { style: CSSProperties };\r\n  };\r\n  scrollToBottom: (behavior?: ScrollBehavior) => void;\r\n  scrollToIndex: (index: number, behavior?: ScrollBehavior) => void;\r\n};\r\n\r\nexport type SyncInfo = {\r\n  timeStamp: number;\r\n  userId: number;\r\n};\r\n\r\nexport type FormElementParams<T> = StateObject<T> & {\r\n  $inputProps: {\r\n    ref?: React.RefObject<any>;\r\n    value?: T extends boolean ? never : T;\r\n    onChange?: (\r\n      event: React.ChangeEvent<\r\n        HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement\r\n      >\r\n    ) => void;\r\n    onBlur?: (\r\n      event: React.FocusEvent<\r\n        HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement\r\n      >\r\n    ) => void;\r\n  };\r\n};\r\n\r\nexport type StateKeys = string;\r\n\r\ntype findWithFuncType<U> = (\r\n  thisKey: keyof U,\r\n  thisValue: U[keyof U]\r\n) => EndType<U> & StateObject<U>;\r\n\r\ntype CutFunctionType<T> = (\r\n  index?: number,\r\n  options?: { waitForSync?: boolean }\r\n) => StateObject<T>;\r\n\r\nexport type InferArrayElement<T> = T extends (infer U)[] ? U : never;\r\ntype ArraySpecificPrototypeKeys =\r\n  | 'concat'\r\n  | 'copyWithin'\r\n  | 'fill'\r\n  | 'find'\r\n  | 'findIndex'\r\n  | 'flat'\r\n  | 'flatMap'\r\n  | 'includes'\r\n  | 'indexOf'\r\n  | 'join'\r\n  | 'keys'\r\n  | 'lastIndexOf'\r\n  | 'map'\r\n  | 'pop'\r\n  | 'push'\r\n  | 'reduce'\r\n  | 'reduceRight'\r\n  | 'reverse'\r\n  | 'shift'\r\n  | 'slice'\r\n  | 'some'\r\n  | 'sort'\r\n  | 'splice'\r\n  | 'unshift'\r\n  | 'values'\r\n  | 'entries'\r\n  | 'every'\r\n  | 'filter'\r\n  | 'forEach'\r\n  | 'with';\r\nexport type StreamOptions<T, R = T> = {\r\n  bufferSize?: number;\r\n  flushInterval?: number;\r\n  bufferStrategy?: 'sliding' | 'dropping' | 'accumulate';\r\n  store?: (buffer: T[]) => R | R[];\r\n  onFlush?: (buffer: T[]) => void;\r\n};\r\n\r\nexport type StreamHandle<T> = {\r\n  write: (data: T) => void;\r\n  writeMany: (data: T[]) => void;\r\n  flush: () => void;\r\n  close: () => void;\r\n  pause: () => void;\r\n  resume: () => void;\r\n};\r\n\r\nexport type ArrayEndType<TShape extends unknown> = {\r\n  $stream: <T = Prettify<InferArrayElement<TShape>>, R = T>(\r\n    options?: StreamOptions<T, R>\r\n  ) => StreamHandle<T>;\r\n  $findWith: findWithFuncType<Prettify<InferArrayElement<TShape>>>;\r\n  $index: (index: number) => StateObject<\r\n    Prettify<InferArrayElement<TShape>>\r\n  > & {\r\n    $insert: InsertTypeObj<Prettify<InferArrayElement<TShape>>>;\r\n    $cut: CutFunctionType<TShape>;\r\n    $_index: number;\r\n  } & EndType<Prettify<InferArrayElement<TShape>>>;\r\n  $insert: InsertType<Prettify<InferArrayElement<TShape>>>;\r\n  $cut: CutFunctionType<TShape>;\r\n  $cutSelected: () => void;\r\n  $cutByValue: (value: string | number | boolean) => void;\r\n  $toggleByValue: (value: string | number | boolean) => void;\r\n  $stateSort: (\r\n    compareFn: (\r\n      a: Prettify<InferArrayElement<TShape>>,\r\n      b: Prettify<InferArrayElement<TShape>>\r\n    ) => number\r\n  ) => ArrayEndType<TShape>;\r\n  $useVirtualView: (\r\n    options: VirtualViewOptions\r\n  ) => VirtualStateObjectResult<Prettify<InferArrayElement<TShape>>[]>;\r\n\r\n  $stateList: (\r\n    callbackfn: (\r\n      setter: StateObject<Prettify<InferArrayElement<TShape>>>,\r\n      index: number,\r\n      arraySetter: StateObject<TShape>\r\n    ) => void\r\n  ) => any;\r\n  $stateMap: <U>(\r\n    callbackfn: (\r\n      setter: StateObject<Prettify<InferArrayElement<TShape>>>,\r\n      index: number,\r\n      arraySetter: StateObject<TShape>\r\n    ) => U\r\n  ) => U[];\r\n\r\n  $stateFlattenOn: <K extends keyof Prettify<InferArrayElement<TShape>>>(\r\n    field: K\r\n  ) => StateObject<InferArrayElement<Prettify<InferArrayElement<TShape>>[K]>[]>;\r\n  $uniqueInsert: (\r\n    payload: InsertParams<Prettify<InferArrayElement<TShape>>>,\r\n    fields?: (keyof Prettify<InferArrayElement<TShape>>)[],\r\n    onMatch?: (existingItem: any) => any\r\n  ) => void;\r\n  $stateFind: (\r\n    callbackfn: (\r\n      value: Prettify<InferArrayElement<TShape>>,\r\n      index: number\r\n    ) => boolean\r\n  ) => StateObject<Prettify<InferArrayElement<TShape>>> | undefined;\r\n  $stateFilter: (\r\n    callbackfn: (\r\n      value: Prettify<InferArrayElement<TShape>>,\r\n      index: number\r\n    ) => void\r\n  ) => ArrayEndType<TShape>;\r\n  $getSelected: () =>\r\n    | StateObject<Prettify<InferArrayElement<TShape>>>\r\n    | undefined;\r\n  $clearSelected: () => void;\r\n  $getSelectedIndex: () => number;\r\n  $last: () => StateObject<Prettify<InferArrayElement<TShape>>> | undefined;\r\n} & EndType<TShape>;\r\n\r\nexport type FormOptsType = {\r\n  validation?: {\r\n    hideMessage?: boolean;\r\n    message?: string;\r\n\r\n    props?: GenericObject;\r\n    disable?: boolean;\r\n  };\r\n\r\n  debounceTime?: number;\r\n  sync?: {\r\n    allowInvalidValues?: boolean; // default: false\r\n  };\r\n};\r\n\r\nexport type FormControl<T> = (obj: FormElementParams<T>) => JSX.Element;\r\n\r\nexport type UpdateArg<S> = S | ((prevState: S) => S);\r\nexport type InsertParams<S> =\r\n  | S\r\n  | ((prevState: { state: S; uuid: string }) => S);\r\nexport type UpdateType<T> = (payload: UpdateArg<T>) => { synced: () => void };\r\n\r\nexport type InsertType<T> = (payload: InsertParams<T>, index?: number) => void;\r\nexport type InsertTypeObj<T> = (payload: InsertParams<T>) => void;\r\n\r\ntype EffectFunction<T, R> = (state: T, deps: any[]) => R;\r\nexport type EndType<T, IsArrayElement = false> = {\r\n  $addZodValidation: (\r\n    errors: ValidationError[],\r\n    source?: 'client' | 'sync_engine' | 'api'\r\n  ) => void;\r\n  $clearZodValidation: (paths?: string[]) => void;\r\n  $applyOperation: (operation: UpdateTypeDetail) => void;\r\n  $applyJsonPatch: (patches: any[]) => void;\r\n  $update: UpdateType<T>;\r\n  $_path: string[];\r\n  $_stateKey: string;\r\n  $isolate: (\r\n    renderFn: (state: StateObject<T>) => React.ReactNode\r\n  ) => JSX.Element;\r\n  $formElement: (control: FormControl<T>, opts?: FormOptsType) => JSX.Element;\r\n  $get: () => T;\r\n  $$get: () => T;\r\n  $$derive: <R>(fn: EffectFunction<T, R>) => R;\r\n  $_status: 'fresh' | 'dirty' | 'synced' | 'restored' | 'unknown';\r\n  $getStatus: () => 'fresh' | 'dirty' | 'synced' | 'restored' | 'unknown';\r\n  $showValidationErrors: () => string[];\r\n  $setValidation: (ctx: string) => void;\r\n  $removeValidation: (ctx: string) => void;\r\n  $ignoreFields: (fields: string[]) => StateObject<T>;\r\n  $isSelected: boolean;\r\n  $setSelected: (value: boolean) => void;\r\n  $toggleSelected: () => void;\r\n  $getFormRef: () => React.RefObject<any> | undefined;\r\n  $removeStorage: () => void;\r\n  $sync: () => void;\r\n  $validationWrapper: ({\r\n    children,\r\n    hideMessage,\r\n  }: {\r\n    children: React.ReactNode;\r\n    hideMessage?: boolean;\r\n  }) => JSX.Element;\r\n  $lastSynced?: SyncInfo;\r\n} & (IsArrayElement extends true ? { $cutThis: () => void } : {});\r\n\r\nexport type StateObject<T> = (T extends any[]\r\n  ? ArrayEndType<T>\r\n  : T extends Record<string, unknown> | object\r\n    ? { [K in keyof T]-?: StateObject<T[K]> }\r\n    : T extends string | number | boolean | null\r\n      ? EndType<T, true>\r\n      : never) &\r\n  EndType<T, true> & {\r\n    $toggle: T extends boolean ? () => void : never;\r\n    $getAllFormRefs: () => Map<string, React.RefObject<any>>;\r\n    $_componentId: string | null;\r\n    $getComponents: () => ComponentsType;\r\n\r\n    $_initialState: T;\r\n    $updateInitialState: (newState: T | null) => {\r\n      fetchId: (field: keyof T) => string | number;\r\n    };\r\n    $initializeAndMergeShadowState: (newState: any | null) => void;\r\n    $_isLoading: boolean;\r\n    $_serverState: T;\r\n    $revertToInitialState: (obj?: { validationKey?: string }) => T;\r\n\r\n    $middleware: (\r\n      middles: ({\r\n        updateLog,\r\n        update,\r\n      }: {\r\n        updateLog: UpdateTypeDetail[] | undefined;\r\n        update: UpdateTypeDetail;\r\n      }) => void\r\n    ) => void;\r\n\r\n    $getLocalStorage: (key: string) => LocalStorageData<T> | null;\r\n  };\r\n\r\nexport type CogsUpdate<T extends unknown> = UpdateType<T>;\r\ntype EffectiveSetStateArg<\r\n  T,\r\n  UpdateType extends 'update' | 'insert' | 'cut',\r\n> = UpdateType extends 'insert'\r\n  ? T extends any[]\r\n    ? InsertParams<InferArrayElement<T>>\r\n    : never\r\n  : UpdateArg<T>;\r\ntype UpdateOptions = {\r\n  updateType: 'insert' | 'cut' | 'update';\r\n  itemId?: string;\r\n  sync?: boolean;\r\n};\r\ntype EffectiveSetState<TStateObject> = (\r\n  newStateOrFunction:\r\n    | EffectiveSetStateArg<TStateObject, 'update'>\r\n    | EffectiveSetStateArg<TStateObject, 'insert'>\r\n    | null,\r\n  path: string[],\r\n  updateObj: UpdateOptions, // Now includes itemId\r\n  validationKey?: string\r\n) => void;\r\n\r\nexport type UpdateTypeDetail = {\r\n  timeStamp: number;\r\n  stateKey: string;\r\n  updateType: 'update' | 'insert' | 'cut';\r\n  path: string[];\r\n  status: 'new' | 'sent' | 'synced';\r\n  oldValue: any;\r\n  newValue: any;\r\n  userId?: number;\r\n  itemId?: string; // For insert: the new item's ID\r\n  insertAfterId?: string; // For insert: ID to insert after (null = beginning)\r\n};\r\nexport type ReactivityUnion = 'none' | 'component' | 'deps' | 'all';\r\nexport type ReactivityType =\r\n  | 'none'\r\n  | 'component'\r\n  | 'deps'\r\n  | 'all'\r\n  | Array<Prettify<'none' | 'component' | 'deps' | 'all'>>;\r\n\r\n// Define the return type of the sync hook locally\r\ntype SyncApi = {\r\n  updateState: (data: { operation: any }) => void;\r\n  connected: boolean;\r\n  clientId: string | null;\r\n  subscribers: string[];\r\n};\r\ntype ValidationOptionsType = {\r\n  key?: string;\r\n  zodSchemaV3?: z3.ZodType<any, any, any>;\r\n  zodSchemaV4?: z4.ZodType<any, any, any>;\r\n  onBlur?: 'error' | 'warning';\r\n  onChange?: 'error' | 'warning';\r\n  blockSync?: boolean;\r\n};\r\ntype UseSyncType<T> = (state: T, a: SyncOptionsType<any>) => SyncApi;\r\ntype SyncOptionsType<TApiParams> = {\r\n  apiParams: TApiParams;\r\n  stateKey?: string;\r\n  stateRoom:\r\n    | number\r\n    | string\r\n    | (({ clientId }: { clientId: string }) => string | null);\r\n  connect?: boolean;\r\n  inMemoryState?: boolean;\r\n};\r\nexport type OptionsType<T extends unknown = unknown, TApiParams = never> = {\r\n  log?: boolean;\r\n  componentId?: string;\r\n  syncOptions?: SyncOptionsType<TApiParams>;\r\n\r\n  validation?: ValidationOptionsType;\r\n  serverState?: {\r\n    id?: string | number;\r\n    data?: T;\r\n    status?: 'pending' | 'error' | 'success' | 'loading';\r\n    timestamp?: number;\r\n    merge?:\r\n      | boolean\r\n      | {\r\n          strategy: 'append' | 'prepend' | 'diff';\r\n          key?: string;\r\n        };\r\n  };\r\n\r\n  sync?: {\r\n    action: (state: T) => Promise<{\r\n      success: boolean;\r\n      data?: any;\r\n      error?: any;\r\n      errors?: Array<{\r\n        path: (string | number)[];\r\n        message: string;\r\n      }>;\r\n    }>;\r\n    onSuccess?: (data: any) => void;\r\n    onError?: (error: any) => void;\r\n  };\r\n  middleware?: ({ update }: { update: UpdateTypeDetail }) => void;\r\n\r\n  modifyState?: (state: T) => T;\r\n  localStorage?: {\r\n    key: string | ((state: T) => string);\r\n    onChange?: (state: T) => void;\r\n  };\r\n  formElements?: FormsElementsType<T>;\r\n\r\n  reactiveDeps?: (state: T) => any[] | true;\r\n  reactiveType?: ReactivityType;\r\n  syncUpdate?: Partial<UpdateTypeDetail>;\r\n\r\n  defaultState?: T;\r\n\r\n  dependencies?: any[];\r\n};\r\n\r\nexport type SyncRenderOptions<T extends unknown = unknown> = {\r\n  children: React.ReactNode;\r\n  time: number;\r\n  data?: T;\r\n  key?: string;\r\n};\r\n\r\ntype FormsElementsType<T> = {\r\n  validation?: (options: {\r\n    children: React.ReactNode;\r\n    status: ValidationStatus;\r\n    severity: ValidationSeverity;\r\n    hasErrors: boolean;\r\n    hasWarnings: boolean;\r\n    allErrors: ValidationError[];\r\n\r\n    path: string[];\r\n    message?: string;\r\n    getData?: () => T;\r\n  }) => React.ReactNode;\r\n  syncRender?: (options: SyncRenderOptions<T>) => React.ReactNode;\r\n};\r\n\r\nexport type InitialStateInnerType<T extends unknown = unknown> = {\r\n  initialState: T;\r\n} & OptionsType<T>;\r\n\r\nexport type InitialStateType<T> = {\r\n  [key: string]: InitialStateInnerType<T>;\r\n};\r\n\r\nexport type AllStateTypes<T extends unknown> = Record<string, T>;\r\n\r\nexport type CogsInitialState<T> = {\r\n  initialState: T;\r\n  formElements?: FormsElementsType<T>;\r\n};\r\n\r\nexport type TransformedStateType<T> = {\r\n  [P in keyof T]: T[P] extends CogsInitialState<infer U> ? U : T[P];\r\n};\r\n\r\nconst {\r\n  getInitialOptions,\r\n  updateInitialStateGlobal,\r\n  getShadowMetadata,\r\n  setShadowMetadata,\r\n  getShadowValue,\r\n  initializeShadowState,\r\n  initializeAndMergeShadowState,\r\n  updateShadowAtPath,\r\n  insertShadowArrayElement,\r\n  insertManyShadowArrayElements,\r\n  removeShadowArrayElement,\r\n  setInitialStateOptions,\r\n  setServerStateUpdate,\r\n  markAsDirty,\r\n  addPathComponent,\r\n  clearSelectedIndexesForState,\r\n  addStateLog,\r\n  setSyncInfo,\r\n  clearSelectedIndex,\r\n  getSyncInfo,\r\n  notifyPathSubscribers,\r\n  // Note: The old functions are no longer imported under their original names\r\n} = getGlobalStore.getState();\r\nfunction getArrayData(stateKey: string, path: string[], meta?: MetaData) {\r\n  const shadowMeta = getShadowMetadata(stateKey, path);\r\n  const isArray = !!shadowMeta?.arrayKeys;\r\n\r\n  if (!isArray) {\r\n    const value = getGlobalStore.getState().getShadowValue(stateKey, path);\r\n    return { isArray: false, value, keys: [] };\r\n  }\r\n  const arrayPathKey = path.length > 0 ? path.join('.') : 'root';\r\n  const viewIds = meta?.arrayViews?.[arrayPathKey] ?? shadowMeta.arrayKeys;\r\n\r\n  // FIX: If the derived view is empty, return an empty array and keys.\r\n  if (Array.isArray(viewIds) && viewIds.length === 0) {\r\n    return { isArray: true, value: [], keys: [] };\r\n  }\r\n\r\n  const value = getGlobalStore\r\n    .getState()\r\n    .getShadowValue(stateKey, path, viewIds);\r\n\r\n  return { isArray: true, value, keys: viewIds ?? [] };\r\n}\r\n\r\nfunction findArrayItem(\r\n  array: any[],\r\n  keys: string[],\r\n  predicate: (item: any, index: number) => boolean\r\n): { key: string; index: number; value: any } | null {\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (predicate(array[i], i)) {\r\n      const key = keys[i];\r\n      if (key) {\r\n        return { key, index: i, value: array[i] };\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction setAndMergeOptions(stateKey: string, newOptions: OptionsType<any>) {\r\n  const initialOptions = getInitialOptions(stateKey as string) || {};\r\n\r\n  setInitialStateOptions(stateKey as string, {\r\n    ...initialOptions,\r\n    ...newOptions,\r\n  });\r\n}\r\n\r\nfunction setOptions<StateKey, Opt>({\r\n  stateKey,\r\n  options,\r\n  initialOptionsPart,\r\n}: {\r\n  stateKey: StateKey;\r\n  options?: OptionsType<any>;\r\n  initialOptionsPart: Record<string, any>;\r\n}) {\r\n  const initialOptions = getInitialOptions(stateKey as string) || {};\r\n  const initialOptionsPartState = initialOptionsPart[stateKey as string] || {};\r\n\r\n  // Start with the base options\r\n  let mergedOptions = { ...initialOptionsPartState, ...initialOptions };\r\n  let needToAdd = false;\r\n\r\n  if (options) {\r\n    // A function to recursively merge properties\r\n    const deepMerge = (target: any, source: any) => {\r\n      for (const key in source) {\r\n        if (source.hasOwnProperty(key)) {\r\n          // If the property is an object (and not an array), recurse\r\n          if (\r\n            source[key] instanceof Object &&\r\n            !Array.isArray(source[key]) &&\r\n            target[key] instanceof Object\r\n          ) {\r\n            // Check for changes before merging to set `needToAdd`\r\n            if (!isDeepEqual(target[key], source[key])) {\r\n              deepMerge(target[key], source[key]);\r\n              needToAdd = true;\r\n            }\r\n          } else {\r\n            // Overwrite if the value is different\r\n            if (target[key] !== source[key]) {\r\n              target[key] = source[key];\r\n              needToAdd = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return target;\r\n    };\r\n\r\n    // Perform a deep merge\r\n    mergedOptions = deepMerge(mergedOptions, options);\r\n  }\r\n\r\n  // Your existing logic for defaults and preservation can follow\r\n  if (\r\n    mergedOptions.syncOptions &&\r\n    (!options || !options.hasOwnProperty('syncOptions'))\r\n  ) {\r\n    needToAdd = true;\r\n  }\r\n  if (\r\n    (mergedOptions.validation && mergedOptions?.validation?.zodSchemaV4) ||\r\n    mergedOptions?.validation?.zodSchemaV3\r\n  ) {\r\n    // Only set default if onBlur wasn't explicitly provided\r\n    const wasOnBlurProvided =\r\n      options?.validation?.hasOwnProperty('onBlur') ||\r\n      initialOptions?.validation?.hasOwnProperty('onBlur');\r\n\r\n    if (!wasOnBlurProvided) {\r\n      mergedOptions.validation.onBlur = 'error'; // Default to error on blur\r\n    }\r\n  }\r\n  if (needToAdd) {\r\n    setInitialStateOptions(stateKey as string, mergedOptions);\r\n  }\r\n}\r\n\r\nexport function addStateOptions<T extends unknown>(\r\n  initialState: T,\r\n  { formElements, validation }: OptionsType<T>\r\n) {\r\n  return { initialState: initialState, formElements, validation } as T;\r\n}\r\n\r\n// Define the type for the options setter using the Transformed state\r\ntype SetCogsOptionsFunc<T extends Record<string, any>> = <\r\n  StateKey extends keyof TransformedStateType<T>,\r\n>(\r\n  stateKey: StateKey,\r\n  options: OptionsType<TransformedStateType<T>[StateKey]>\r\n) => void;\r\n\r\nexport const createCogsState = <State extends Record<StateKeys, unknown>>(\r\n  initialState: State,\r\n  opt?: {\r\n    formElements?: FormsElementsType<State>;\r\n    validation?: ValidationOptionsType;\r\n    __fromSyncSchema?: boolean;\r\n    __syncNotifications?: Record<string, Function>;\r\n    __apiParamsMap?: Record<string, any>;\r\n    __useSync?: UseSyncType<State>;\r\n    __syncSchemas?: Record<string, any>;\r\n  }\r\n) => {\r\n  let newInitialState = initialState;\r\n  const [statePart, initialOptionsPart] =\r\n    transformStateFunc<State>(newInitialState);\r\n\r\n  if (opt?.__fromSyncSchema && opt?.__syncNotifications) {\r\n    getGlobalStore\r\n      .getState()\r\n      .setInitialStateOptions('__notifications', opt.__syncNotifications);\r\n  }\r\n\r\n  if (opt?.__fromSyncSchema && opt?.__apiParamsMap) {\r\n    getGlobalStore\r\n      .getState()\r\n      .setInitialStateOptions('__apiParamsMap', opt.__apiParamsMap);\r\n  }\r\n\r\n  Object.keys(statePart).forEach((key) => {\r\n    let existingOptions = initialOptionsPart[key] || {};\r\n\r\n    const mergedOptions: any = {\r\n      ...existingOptions,\r\n    };\r\n\r\n    if (opt?.formElements) {\r\n      mergedOptions.formElements = {\r\n        ...opt.formElements,\r\n        ...(existingOptions.formElements || {}),\r\n      };\r\n    }\r\n\r\n    if (opt?.validation) {\r\n      mergedOptions.validation = {\r\n        ...opt.validation,\r\n        ...(existingOptions.validation || {}),\r\n      };\r\n\r\n      if (opt.validation.key && !existingOptions.validation?.key) {\r\n        mergedOptions.validation.key = `${opt.validation.key}.${key}`;\r\n      }\r\n    }\r\n    if (opt?.__syncSchemas?.[key]?.schemas?.validation) {\r\n      mergedOptions.validation = {\r\n        zodSchemaV4: opt.__syncSchemas[key].schemas.validation,\r\n        ...existingOptions.validation,\r\n      };\r\n    }\r\n    if (Object.keys(mergedOptions).length > 0) {\r\n      const existingGlobalOptions = getInitialOptions(key);\r\n\r\n      if (!existingGlobalOptions) {\r\n        setInitialStateOptions(key, mergedOptions);\r\n      } else {\r\n        // Merge with existing global options\r\n        setInitialStateOptions(key, {\r\n          ...existingGlobalOptions,\r\n          ...mergedOptions,\r\n        });\r\n      }\r\n    }\r\n  });\r\n\r\n  Object.keys(statePart).forEach((key) => {\r\n    initializeShadowState(key, statePart[key]);\r\n  });\r\n\r\n  type StateKeys = keyof typeof statePart;\r\n\r\n  const useCogsState = <StateKey extends StateKeys>(\r\n    stateKey: StateKey,\r\n    options?: Prettify<OptionsType<(typeof statePart)[StateKey]>>\r\n  ) => {\r\n    const [componentId] = useState(options?.componentId ?? uuidv4());\r\n\r\n    setOptions({\r\n      stateKey,\r\n      options,\r\n      initialOptionsPart,\r\n    });\r\n    const thiState =\r\n      getShadowValue(stateKey as string, []) || statePart[stateKey as string];\r\n    const partialState = options?.modifyState\r\n      ? options.modifyState(thiState)\r\n      : thiState;\r\n\r\n    const updater = useCogsStateFn<(typeof statePart)[StateKey]>(partialState, {\r\n      stateKey: stateKey as string,\r\n      syncUpdate: options?.syncUpdate,\r\n      componentId,\r\n      localStorage: options?.localStorage,\r\n      middleware: options?.middleware,\r\n      reactiveType: options?.reactiveType,\r\n      reactiveDeps: options?.reactiveDeps,\r\n      defaultState: options?.defaultState as any,\r\n      dependencies: options?.dependencies,\r\n      serverState: options?.serverState,\r\n      syncOptions: options?.syncOptions,\r\n      __useSync: opt?.__useSync as UseSyncType<(typeof statePart)[StateKey]>,\r\n    });\r\n\r\n    return updater;\r\n  };\r\n\r\n  function setCogsOptions<StateKey extends StateKeys>(\r\n    stateKey: StateKey,\r\n    options: OptionsType<(typeof statePart)[StateKey]>\r\n  ) {\r\n    setOptions({ stateKey, options, initialOptionsPart });\r\n\r\n    if (options.localStorage) {\r\n      loadAndApplyLocalStorage(stateKey as string, options);\r\n    }\r\n\r\n    notifyComponents(stateKey as string);\r\n  }\r\n\r\n  return { useCogsState, setCogsOptions } as CogsApi<State, never>;\r\n};\r\ntype UseCogsStateHook<\r\n  T extends Record<string, any>,\r\n  TApiParamsMap extends Record<string, any> = never,\r\n> = <StateKey extends keyof TransformedStateType<T> & string>(\r\n  stateKey: StateKey,\r\n  options?: [TApiParamsMap] extends [never]\r\n    ? // When TApiParamsMap is never (no sync)\r\n      Prettify<OptionsType<TransformedStateType<T>[StateKey]>>\r\n    : // When TApiParamsMap exists (sync enabled)\r\n      StateKey extends keyof TApiParamsMap\r\n      ? Prettify<\r\n          OptionsType<\r\n            TransformedStateType<T>[StateKey],\r\n            TApiParamsMap[StateKey]\r\n          > & {\r\n            syncOptions: Prettify<SyncOptionsType<TApiParamsMap[StateKey]>>;\r\n          }\r\n        >\r\n      : Prettify<OptionsType<TransformedStateType<T>[StateKey]>>\r\n) => StateObject<TransformedStateType<T>[StateKey]>;\r\n\r\n// Update CogsApi to default to never instead of Record<string, never>\r\ntype CogsApi<\r\n  T extends Record<string, any>,\r\n  TApiParamsMap extends Record<string, any> = never,\r\n> = {\r\n  useCogsState: UseCogsStateHook<T, TApiParamsMap>;\r\n  setCogsOptions: SetCogsOptionsFunc<T>;\r\n};\r\ntype GetParamType<SchemaEntry> = SchemaEntry extends {\r\n  api?: { queryData?: { _paramType?: infer P } };\r\n}\r\n  ? P\r\n  : never;\r\n\r\nexport function createCogsStateFromSync<\r\n  TSyncSchema extends {\r\n    schemas: Record<\r\n      string,\r\n      {\r\n        schemas: { defaults: any };\r\n        relations?: any;\r\n        api?: {\r\n          queryData?: any;\r\n        };\r\n        [key: string]: any;\r\n      }\r\n    >;\r\n    notifications: Record<string, any>;\r\n  },\r\n>(\r\n  syncSchema: TSyncSchema,\r\n  useSync: UseSyncType<any>\r\n): CogsApi<\r\n  {\r\n    [K in keyof TSyncSchema['schemas']]: TSyncSchema['schemas'][K]['relations'] extends object\r\n      ? TSyncSchema['schemas'][K] extends {\r\n          schemas: { defaults: infer D };\r\n        }\r\n        ? D\r\n        : TSyncSchema['schemas'][K]['schemas']['defaults']\r\n      : TSyncSchema['schemas'][K]['schemas']['defaults'];\r\n  },\r\n  {\r\n    [K in keyof TSyncSchema['schemas']]: GetParamType<\r\n      TSyncSchema['schemas'][K]\r\n    >;\r\n  }\r\n> {\r\n  const schemas = syncSchema.schemas;\r\n  const initialState: any = {};\r\n  const apiParamsMap: any = {};\r\n\r\n  // Extract defaultValues AND apiParams from each entry\r\n  for (const key in schemas) {\r\n    const entry = schemas[key];\r\n\r\n    // Check if we have relations and thus view defaults\r\n    if (entry?.relations && entry?.schemas?.defaults) {\r\n      // Use the view defaults when relations are present\r\n      initialState[key] = entry.schemas.defaults;\r\n    } else {\r\n      // Fall back to regular defaultValues\r\n      initialState[key] = entry?.schemas?.defaults || {};\r\n    }\r\n    console.log('initialState', initialState);\r\n\r\n    // Extract apiParams from the api.queryData._paramType\r\n    if (entry?.api?.queryData?._paramType) {\r\n      apiParamsMap[key] = entry.api.queryData._paramType;\r\n    }\r\n  }\r\n\r\n  return createCogsState(initialState, {\r\n    __fromSyncSchema: true,\r\n    __syncNotifications: syncSchema.notifications,\r\n    __apiParamsMap: apiParamsMap,\r\n    __useSync: useSync,\r\n    __syncSchemas: schemas,\r\n  }) as any;\r\n}\r\n\r\nconst saveToLocalStorage = <T,>(\r\n  state: T,\r\n  thisKey: string,\r\n  currentInitialOptions: any,\r\n  sessionId?: string,\r\n  lastSyncedWithServer?: number\r\n) => {\r\n  if (currentInitialOptions?.log) {\r\n    console.log(\r\n      'saving to localstorage',\r\n      thisKey,\r\n      currentInitialOptions.localStorage?.key,\r\n      sessionId\r\n    );\r\n  }\r\n\r\n  const key = isFunction(currentInitialOptions?.localStorage?.key)\r\n    ? currentInitialOptions.localStorage?.key(state)\r\n    : currentInitialOptions?.localStorage?.key;\r\n\r\n  if (key && sessionId) {\r\n    const storageKey = `${sessionId}-${thisKey}-${key}`;\r\n\r\n    // Get existing data to preserve lastSyncedWithServer if not explicitly updating it\r\n    let existingLastSynced: number | undefined;\r\n    try {\r\n      const existing = loadFromLocalStorage(storageKey);\r\n      existingLastSynced = existing?.lastSyncedWithServer;\r\n    } catch {\r\n      // Ignore errors, will use undefined\r\n    }\r\n    const shadowMeta = getShadowMetadata(thisKey, []);\r\n\r\n    const data: LocalStorageData<T> = {\r\n      state,\r\n      lastUpdated: Date.now(),\r\n      lastSyncedWithServer: lastSyncedWithServer ?? existingLastSynced,\r\n      stateSource: shadowMeta?.stateSource,\r\n      baseServerState: shadowMeta?.baseServerState,\r\n    };\r\n\r\n    // Use SuperJSON serialize to get the json part only\r\n    const superJsonResult = superjson.serialize(data);\r\n    window.localStorage.setItem(\r\n      storageKey,\r\n      JSON.stringify(superJsonResult.json)\r\n    );\r\n  }\r\n};\r\n\r\nconst loadFromLocalStorage = (localStorageKey: string) => {\r\n  if (!localStorageKey) return null;\r\n\r\n  try {\r\n    const storedData = window.localStorage.getItem(localStorageKey);\r\n    if (!storedData) return null;\r\n\r\n    // Parse the json part back normally\r\n    const parsedData = JSON.parse(storedData);\r\n\r\n    return parsedData;\r\n  } catch (error) {\r\n    console.error('Error loading from localStorage:', error);\r\n    return null;\r\n  }\r\n};\r\nconst loadAndApplyLocalStorage = (stateKey: string, options: any) => {\r\n  const currentState = getShadowValue(stateKey, []);\r\n  const { sessionId } = useCogsConfig();\r\n  const localkey = isFunction(options?.localStorage?.key)\r\n    ? options.localStorage.key(currentState)\r\n    : options?.localStorage?.key;\r\n\r\n  if (localkey && sessionId) {\r\n    const localData = loadFromLocalStorage(\r\n      `${sessionId}-${stateKey}-${localkey}`\r\n    );\r\n\r\n    if (\r\n      localData &&\r\n      localData.lastUpdated > (localData.lastSyncedWithServer || 0)\r\n    ) {\r\n      notifyComponents(stateKey);\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\ntype LocalStorageData<T> = {\r\n  state: T;\r\n  lastUpdated: number;\r\n  lastSyncedWithServer?: number;\r\n  baseServerState?: T; // Keep reference to what server state this is based on\r\n  stateSource?: 'default' | 'server' | 'localStorage'; // Track origin\r\n};\r\n\r\nconst notifyComponents = (thisKey: string) => {\r\n  const stateEntry = getShadowMetadata(thisKey, []);\r\n  if (!stateEntry) return;\r\n\r\n  // Batch component updates\r\n  const updates = new Set<() => void>();\r\n  stateEntry?.components?.forEach((component) => {\r\n    const reactiveTypes = component\r\n      ? Array.isArray(component.reactiveType)\r\n        ? component.reactiveType\r\n        : [component.reactiveType || 'component']\r\n      : null;\r\n    if (!reactiveTypes?.includes('none')) {\r\n      updates.add(() => component.forceUpdate());\r\n    }\r\n  });\r\n\r\n  // Schedule updates in the next tick to allow batching\r\n  queueMicrotask(() => {\r\n    updates.forEach((update) => update());\r\n  });\r\n};\r\n\r\nfunction markEntireStateAsServerSynced(\r\n  stateKey: string,\r\n  path: string[],\r\n  data: any,\r\n  timestamp: number\r\n) {\r\n  // Mark current path as synced\r\n  const currentMeta = getShadowMetadata(stateKey, path);\r\n  setShadowMetadata(stateKey, path, {\r\n    ...currentMeta,\r\n    isDirty: false,\r\n    stateSource: 'server',\r\n    lastServerSync: timestamp || Date.now(),\r\n  });\r\n\r\n  // If it's an array, mark each item as synced\r\n  if (Array.isArray(data)) {\r\n    const arrayMeta = getShadowMetadata(stateKey, path);\r\n    if (arrayMeta?.arrayKeys) {\r\n      arrayMeta.arrayKeys.forEach((itemKey, index) => {\r\n        // Fix: Don't split the itemKey, just use it directly\r\n        const itemPath = [...path, itemKey];\r\n        const itemData = data[index];\r\n        if (itemData !== undefined) {\r\n          markEntireStateAsServerSynced(\r\n            stateKey,\r\n            itemPath,\r\n            itemData,\r\n            timestamp\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }\r\n  // If it's an object, mark each field as synced\r\n  else if (data && typeof data === 'object' && data.constructor === Object) {\r\n    Object.keys(data).forEach((key) => {\r\n      const fieldPath = [...path, key];\r\n      const fieldData = data[key];\r\n      markEntireStateAsServerSynced(stateKey, fieldPath, fieldData, timestamp);\r\n    });\r\n  }\r\n}\r\n// 5. Batch queue\r\nlet updateBatchQueue: any[] = [];\r\nlet isFlushScheduled = false;\r\n\r\nfunction scheduleFlush() {\r\n  if (!isFlushScheduled) {\r\n    isFlushScheduled = true;\r\n    queueMicrotask(flushQueue);\r\n  }\r\n}\r\nfunction handleUpdate(\r\n  stateKey: string,\r\n  path: string[],\r\n  payload: any\r\n): { type: 'update'; oldValue: any; newValue: any; shadowMeta: any } {\r\n  // ✅ FIX: Get the old value before the update.\r\n  const oldValue = getGlobalStore.getState().getShadowValue(stateKey, path);\r\n\r\n  const newValue = isFunction(payload) ? payload(oldValue) : payload;\r\n\r\n  // ✅ FIX: The new `updateShadowAtPath` handles metadata preservation automatically.\r\n  // The manual loop has been removed.\r\n  updateShadowAtPath(stateKey, path, newValue);\r\n\r\n  markAsDirty(stateKey, path, { bubble: true });\r\n\r\n  // Return the metadata of the node *after* the update.\r\n  const newShadowMeta = getShadowMetadata(stateKey, path);\r\n\r\n  return {\r\n    type: 'update',\r\n    oldValue: oldValue,\r\n    newValue,\r\n    shadowMeta: newShadowMeta,\r\n  };\r\n}\r\n// 2. Update signals\r\nfunction updateSignals(shadowMeta: any, displayValue: any) {\r\n  if (!shadowMeta?.signals?.length) return;\r\n\r\n  shadowMeta.signals.forEach(({ parentId, position, effect }: any) => {\r\n    const parent = document.querySelector(`[data-parent-id=\"${parentId}\"]`);\r\n    if (!parent) return;\r\n\r\n    const childNodes = Array.from(parent.childNodes);\r\n    if (!childNodes[position]) return;\r\n\r\n    let finalDisplayValue = displayValue;\r\n    if (effect && displayValue !== null) {\r\n      try {\r\n        finalDisplayValue = new Function('state', `return (${effect})(state)`)(\r\n          displayValue\r\n        );\r\n      } catch (err) {\r\n        console.error('Error evaluating effect function:', err);\r\n      }\r\n    }\r\n\r\n    if (finalDisplayValue !== null && typeof finalDisplayValue === 'object') {\r\n      finalDisplayValue = JSON.stringify(finalDisplayValue);\r\n    }\r\n\r\n    childNodes[position].textContent = String(finalDisplayValue ?? '');\r\n  });\r\n}\r\n\r\nfunction getComponentNotifications(\r\n  stateKey: string,\r\n  path: string[],\r\n  result: any\r\n): Set<any> {\r\n  const rootMeta = getShadowMetadata(stateKey, []);\r\n\r\n  if (!rootMeta?.components) {\r\n    return new Set();\r\n  }\r\n\r\n  const componentsToNotify = new Set<any>();\r\n\r\n  // For insert operations, use the array path not the item path\r\n  let notificationPath = path;\r\n  if (result.type === 'insert' && result.itemId) {\r\n    // We have the new structure with itemId separate\r\n    notificationPath = path; // Already the array path\r\n  }\r\n\r\n  // BUBBLE UP: Notify components at this path and all parent paths\r\n  let currentPath = [...notificationPath];\r\n  while (true) {\r\n    const pathMeta = getShadowMetadata(stateKey, currentPath);\r\n\r\n    if (pathMeta?.pathComponents) {\r\n      pathMeta.pathComponents.forEach((componentId: string) => {\r\n        const component = rootMeta.components?.get(componentId);\r\n        if (component) {\r\n          const reactiveTypes = Array.isArray(component.reactiveType)\r\n            ? component.reactiveType\r\n            : [component.reactiveType || 'component'];\r\n          if (!reactiveTypes.includes('none')) {\r\n            componentsToNotify.add(component);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    if (currentPath.length === 0) break;\r\n    currentPath.pop(); // Go up one level\r\n  }\r\n\r\n  // --- PASS 2: Handle 'all' and 'deps' reactivity types ---\r\n  // Iterate over all components for this stateKey that haven't been notified yet.\r\n  rootMeta.components.forEach((component, componentId) => {\r\n    // If we've already added this component, skip it.\r\n    if (componentsToNotify.has(component)) {\r\n      return;\r\n    }\r\n\r\n    const reactiveTypes = Array.isArray(component.reactiveType)\r\n      ? component.reactiveType\r\n      : [component.reactiveType || 'component'];\r\n\r\n    if (reactiveTypes.includes('all')) {\r\n      componentsToNotify.add(component);\r\n    } else if (reactiveTypes.includes('deps') && component.depsFunction) {\r\n      const currentState = getShadowValue(stateKey, []);\r\n      const newDeps = component.depsFunction(currentState);\r\n\r\n      if (\r\n        newDeps === true ||\r\n        (Array.isArray(newDeps) && !isDeepEqual(component.prevDeps, newDeps))\r\n      ) {\r\n        component.prevDeps = newDeps as any; // Update the dependencies for the next check\r\n        componentsToNotify.add(component);\r\n      }\r\n    }\r\n  });\r\n\r\n  return componentsToNotify;\r\n}\r\nfunction handleInsert(\r\n  stateKey: string,\r\n  path: string[],\r\n  payload: any,\r\n  index?: number,\r\n  itemId?: string // Add optional itemId parameter\r\n): {\r\n  type: 'insert';\r\n  newValue: any;\r\n  shadowMeta: any;\r\n  path: string[];\r\n  itemId: string;\r\n  insertAfterId?: string;\r\n} {\r\n  let newValue;\r\n  if (isFunction(payload)) {\r\n    const { value: currentValue } = getScopedData(stateKey, path);\r\n    newValue = payload({ state: currentValue, uuid: uuidv4() });\r\n  } else {\r\n    newValue = payload;\r\n  }\r\n\r\n  // Pass itemId to insertShadowArrayElement\r\n  const actualItemId = insertShadowArrayElement(\r\n    stateKey,\r\n    path,\r\n    newValue,\r\n    index,\r\n    itemId\r\n  );\r\n  markAsDirty(stateKey, path, { bubble: true });\r\n\r\n  const updatedMeta = getShadowMetadata(stateKey, path);\r\n\r\n  let insertAfterId: string | undefined;\r\n  if (updatedMeta?.arrayKeys && index !== undefined && index > 0) {\r\n    insertAfterId = updatedMeta.arrayKeys[index - 1];\r\n  }\r\n\r\n  return {\r\n    type: 'insert',\r\n    newValue,\r\n    shadowMeta: updatedMeta,\r\n    path: path,\r\n    itemId: actualItemId,\r\n    insertAfterId: insertAfterId,\r\n  };\r\n}\r\n\r\nfunction handleCut(\r\n  stateKey: string,\r\n  path: string[]\r\n): { type: 'cut'; oldValue: any; parentPath: string[] } {\r\n  const parentArrayPath = path.slice(0, -1);\r\n  const oldValue = getShadowValue(stateKey, path);\r\n  removeShadowArrayElement(stateKey, path);\r\n  markAsDirty(stateKey, parentArrayPath, { bubble: true });\r\n  return { type: 'cut', oldValue: oldValue, parentPath: parentArrayPath };\r\n}\r\n\r\nfunction flushQueue() {\r\n  const allComponentsToNotify = new Set<any>();\r\n  const signalUpdates: { shadowMeta: any; displayValue: any }[] = [];\r\n\r\n  const logsToAdd: UpdateTypeDetail[] = [];\r\n\r\n  for (const item of updateBatchQueue) {\r\n    if (item.status && item.updateType) {\r\n      logsToAdd.push(item as UpdateTypeDetail);\r\n      continue;\r\n    }\r\n\r\n    const result = item;\r\n\r\n    const displayValue = result.type === 'cut' ? null : result.newValue;\r\n    if (result.shadowMeta?.signals?.length > 0) {\r\n      signalUpdates.push({ shadowMeta: result.shadowMeta, displayValue });\r\n    }\r\n\r\n    const componentNotifications = getComponentNotifications(\r\n      result.stateKey,\r\n      result.path,\r\n      result\r\n    );\r\n\r\n    componentNotifications.forEach((component) => {\r\n      allComponentsToNotify.add(component);\r\n    });\r\n  }\r\n\r\n  if (logsToAdd.length > 0) {\r\n    addStateLog(logsToAdd);\r\n  }\r\n\r\n  signalUpdates.forEach(({ shadowMeta, displayValue }) => {\r\n    updateSignals(shadowMeta, displayValue);\r\n  });\r\n\r\n  allComponentsToNotify.forEach((component) => {\r\n    component.forceUpdate();\r\n  });\r\n\r\n  // --- Step 3: CLEANUP ---\r\n  // Clear the queue for the next batch of updates.\r\n  updateBatchQueue = [];\r\n  isFlushScheduled = false;\r\n}\r\nfunction createEffectiveSetState<T>(\r\n  thisKey: string,\r\n  syncApiRef: React.MutableRefObject<any>,\r\n  sessionId: string | undefined,\r\n  latestInitialOptionsRef: React.MutableRefObject<OptionsType<T> | null>\r\n): EffectiveSetState<T> {\r\n  return (newStateOrFunction, path, updateObj, validationKey?) => {\r\n    executeUpdate(thisKey, path, newStateOrFunction, updateObj);\r\n  };\r\n\r\n  function executeUpdate(\r\n    stateKey: string,\r\n    path: string[],\r\n    payload: any,\r\n    options: UpdateOptions // Now includes itemId\r\n  ) {\r\n    let result: any;\r\n    switch (options.updateType) {\r\n      case 'update':\r\n        result = handleUpdate(stateKey, path, payload);\r\n        break;\r\n      case 'insert':\r\n        // Pass itemId to handleInsert if it exists\r\n        result = handleInsert(\r\n          stateKey,\r\n          path,\r\n          payload,\r\n          undefined,\r\n          options.itemId\r\n        );\r\n        break;\r\n      case 'cut':\r\n        result = handleCut(stateKey, path);\r\n        break;\r\n    }\r\n\r\n    result.stateKey = stateKey;\r\n    result.path = path;\r\n    updateBatchQueue.push(result);\r\n    scheduleFlush();\r\n\r\n    const newUpdate: UpdateTypeDetail = {\r\n      timeStamp: Date.now(),\r\n      stateKey,\r\n      path,\r\n      updateType: options.updateType,\r\n      status: 'new',\r\n      oldValue: result.oldValue,\r\n      newValue: result.newValue ?? null,\r\n      itemId: result.itemId,\r\n      insertAfterId: result.insertAfterId,\r\n    };\r\n\r\n    updateBatchQueue.push(newUpdate);\r\n\r\n    if (result.newValue !== undefined) {\r\n      saveToLocalStorage(\r\n        result.newValue,\r\n        stateKey,\r\n        latestInitialOptionsRef.current,\r\n        sessionId\r\n      );\r\n    }\r\n\r\n    if (latestInitialOptionsRef.current?.middleware) {\r\n      latestInitialOptionsRef.current.middleware({ update: newUpdate });\r\n    }\r\n\r\n    if (options.sync !== false && syncApiRef.current?.connected) {\r\n      syncApiRef.current.updateState({ operation: newUpdate });\r\n    }\r\n  }\r\n}\r\n\r\nexport function useCogsStateFn<TStateObject extends unknown>(\r\n  stateObject: TStateObject,\r\n  {\r\n    stateKey,\r\n\r\n    localStorage,\r\n    formElements,\r\n    reactiveDeps,\r\n    reactiveType,\r\n    componentId,\r\n    defaultState,\r\n    syncUpdate,\r\n    dependencies,\r\n    serverState,\r\n    __useSync,\r\n  }: {\r\n    stateKey?: string;\r\n    componentId?: string;\r\n    defaultState?: TStateObject;\r\n    __useSync?: UseSyncType<TStateObject>;\r\n    syncOptions?: SyncOptionsType<any>;\r\n  } & OptionsType<TStateObject> = {}\r\n) {\r\n  const [reactiveForce, forceUpdate] = useState({}); //this is the key to reactivity\r\n  const { sessionId } = useCogsConfig();\r\n  let noStateKey = stateKey ? false : true;\r\n  const [thisKey] = useState(stateKey ?? uuidv4());\r\n  const componentIdRef = useRef(componentId ?? uuidv4());\r\n  const latestInitialOptionsRef = useRef<OptionsType<TStateObject> | null>(\r\n    null\r\n  );\r\n  latestInitialOptionsRef.current = (getInitialOptions(thisKey as string) ??\r\n    null) as OptionsType<TStateObject> | null;\r\n\r\n  useEffect(() => {\r\n    if (syncUpdate && syncUpdate.stateKey === thisKey && syncUpdate.path?.[0]) {\r\n      const syncKey = `${syncUpdate.stateKey}:${syncUpdate.path.join('.')}`;\r\n      setSyncInfo(syncKey, {\r\n        timeStamp: syncUpdate.timeStamp!,\r\n        userId: syncUpdate.userId!,\r\n      });\r\n    }\r\n  }, [syncUpdate]);\r\n\r\n  const resolveInitialState = useCallback(\r\n    (\r\n      overrideOptions?: OptionsType<TStateObject>\r\n    ): {\r\n      value: TStateObject;\r\n      source: 'default' | 'server' | 'localStorage';\r\n      timestamp: number;\r\n    } => {\r\n      // If we pass in options, use them. Otherwise, get from the global store.\r\n      const optionsToUse = overrideOptions\r\n        ? { ...getInitialOptions(thisKey as string), ...overrideOptions }\r\n        : getInitialOptions(thisKey as string);\r\n\r\n      const currentOptions = optionsToUse;\r\n      const finalDefaultState =\r\n        currentOptions?.defaultState || defaultState || stateObject;\r\n\r\n      // 1. Check server state\r\n      const hasValidServerData =\r\n        currentOptions?.serverState?.status === 'success' &&\r\n        currentOptions?.serverState?.data !== undefined;\r\n\r\n      if (hasValidServerData) {\r\n        return {\r\n          value: currentOptions.serverState!.data! as any,\r\n          source: 'server',\r\n          timestamp: currentOptions.serverState!.timestamp || Date.now(),\r\n        };\r\n      }\r\n      // 2. Check localStorage\r\n      if (currentOptions?.localStorage?.key && sessionId) {\r\n        const localKey = isFunction(currentOptions.localStorage.key)\r\n          ? currentOptions.localStorage.key(finalDefaultState)\r\n          : currentOptions.localStorage.key;\r\n\r\n        const localData = loadFromLocalStorage(\r\n          `${sessionId}-${thisKey}-${localKey}`\r\n        );\r\n\r\n        if (\r\n          localData &&\r\n          localData.lastUpdated > (currentOptions?.serverState?.timestamp || 0)\r\n        ) {\r\n          return {\r\n            value: localData.state,\r\n            source: 'localStorage',\r\n            timestamp: localData.lastUpdated,\r\n          };\r\n        }\r\n      }\r\n\r\n      // 3. Use default state\r\n      return {\r\n        value: finalDefaultState || (stateObject as any),\r\n        source: 'default',\r\n        timestamp: Date.now(),\r\n      };\r\n    },\r\n    [thisKey, defaultState, stateObject, sessionId]\r\n  );\r\n\r\n  // Effect 1: When this component's serverState prop changes, broadcast it\r\n  useEffect(() => {\r\n    if (!serverState) return;\r\n\r\n    // Only broadcast if we have valid server data\r\n    if (serverState.status === 'success' && serverState.data !== undefined) {\r\n      setServerStateUpdate(thisKey, serverState);\r\n    }\r\n  }, [serverState, thisKey]);\r\n  // Effect 2: Listen for server state updates from ANY component\r\n  useEffect(() => {\r\n    const unsubscribe = getGlobalStore\r\n      .getState()\r\n      .subscribeToPath(thisKey, (event) => {\r\n        if (event?.type === 'SERVER_STATE_UPDATE') {\r\n          const serverStateData = event.serverState;\r\n\r\n          if (\r\n            serverStateData?.status !== 'success' ||\r\n            serverStateData.data === undefined\r\n          ) {\r\n            return; // Ignore if no valid data\r\n          }\r\n\r\n          // Store the server state in options for future reference\r\n          setAndMergeOptions(thisKey, { serverState: serverStateData });\r\n\r\n          const mergeConfig =\r\n            typeof serverStateData.merge === 'object'\r\n              ? serverStateData.merge\r\n              : serverStateData.merge === true\r\n                ? { strategy: 'append' as const, key: 'id' }\r\n                : null;\r\n\r\n          const currentState = getShadowValue(thisKey, []);\r\n          const incomingData = serverStateData.data;\r\n\r\n          if (\r\n            mergeConfig &&\r\n            mergeConfig.strategy === 'append' &&\r\n            'key' in mergeConfig &&\r\n            Array.isArray(currentState) &&\r\n            Array.isArray(incomingData)\r\n          ) {\r\n            const keyField = mergeConfig.key;\r\n            if (!keyField) {\r\n              console.error(\r\n                \"CogsState: Merge strategy 'append' requires a 'key' field.\"\r\n              );\r\n              return;\r\n            }\r\n\r\n            // Get existing IDs to check for duplicates\r\n            const existingIds = new Set(\r\n              currentState.map((item: any) => item[keyField])\r\n            );\r\n\r\n            // Filter out duplicates from incoming data\r\n            const newUniqueItems = incomingData.filter(\r\n              (item: any) => !existingIds.has(item[keyField])\r\n            );\r\n\r\n            if (newUniqueItems.length > 0) {\r\n              // Insert only the new unique items\r\n              insertManyShadowArrayElements(thisKey, [], newUniqueItems);\r\n            }\r\n\r\n            // Mark the entire merged state as synced\r\n            const finalState = getShadowValue(thisKey, []);\r\n            markEntireStateAsServerSynced(\r\n              thisKey,\r\n              [],\r\n              finalState,\r\n              serverStateData.timestamp || Date.now()\r\n            );\r\n          } else {\r\n            // Replace strategy (default) - completely replace the state\r\n            initializeShadowState(thisKey, incomingData);\r\n\r\n            // Mark as synced from server\r\n            markEntireStateAsServerSynced(\r\n              thisKey,\r\n              [],\r\n              incomingData,\r\n              serverStateData.timestamp || Date.now()\r\n            );\r\n          }\r\n\r\n          // Notify all components subscribed to this state\r\n          notifyComponents(thisKey);\r\n        }\r\n      });\r\n\r\n    return unsubscribe;\r\n  }, [thisKey]);\r\n  useEffect(() => {\r\n    const existingMeta = getGlobalStore\r\n      .getState()\r\n      .getShadowMetadata(thisKey, []);\r\n\r\n    // Skip if already initialized\r\n    if (existingMeta && existingMeta.stateSource) {\r\n      return;\r\n    }\r\n\r\n    const options = getInitialOptions(thisKey as string);\r\n\r\n    const features = {\r\n      syncEnabled: !!cogsSyncFn && !!syncOpt,\r\n      validationEnabled: !!(\r\n        options?.validation?.zodSchemaV4 || options?.validation?.zodSchemaV3\r\n      ),\r\n      localStorageEnabled: !!options?.localStorage?.key,\r\n    };\r\n\r\n    setShadowMetadata(thisKey, [], {\r\n      ...existingMeta,\r\n      features,\r\n    });\r\n\r\n    if (options?.defaultState !== undefined || defaultState !== undefined) {\r\n      const finalDefaultState = options?.defaultState || defaultState;\r\n      if (!options?.defaultState) {\r\n        setAndMergeOptions(thisKey as string, {\r\n          defaultState: finalDefaultState,\r\n        });\r\n      }\r\n    }\r\n\r\n    const { value: resolvedState, source, timestamp } = resolveInitialState();\r\n    initializeShadowState(thisKey, resolvedState);\r\n    setShadowMetadata(thisKey, [], {\r\n      stateSource: source,\r\n      lastServerSync: source === 'server' ? timestamp : undefined,\r\n      isDirty: source === 'server' ? false : undefined,\r\n      baseServerState: source === 'server' ? resolvedState : undefined,\r\n    });\r\n\r\n    if (source === 'server' && serverState) {\r\n      setServerStateUpdate(thisKey, serverState);\r\n    }\r\n\r\n    notifyComponents(thisKey);\r\n  }, [thisKey, ...(dependencies || [])]);\r\n\r\n  useLayoutEffect(() => {\r\n    if (noStateKey) {\r\n      setAndMergeOptions(thisKey as string, {\r\n        formElements,\r\n        defaultState,\r\n        localStorage,\r\n        middleware: latestInitialOptionsRef.current?.middleware,\r\n      });\r\n    }\r\n\r\n    const componentKey = `${thisKey}////${componentIdRef.current}`;\r\n\r\n    // Register component in shadow metadata at root level\r\n    const rootMeta = getShadowMetadata(thisKey, []);\r\n    const components = rootMeta?.components || new Map();\r\n\r\n    components.set(componentKey, {\r\n      forceUpdate: () => forceUpdate({}),\r\n      reactiveType: reactiveType ?? ['component'],\r\n      paths: new Set(),\r\n      depsFunction: reactiveDeps || undefined,\r\n      deps: reactiveDeps ? reactiveDeps(getShadowValue(thisKey, [])) : [],\r\n      prevDeps: reactiveDeps // Initialize prevDeps with the same initial value\r\n        ? reactiveDeps(getShadowValue(thisKey, []))\r\n        : [],\r\n    });\r\n\r\n    setShadowMetadata(thisKey, [], {\r\n      ...rootMeta,\r\n      components,\r\n    });\r\n    forceUpdate({});\r\n    return () => {\r\n      const meta = getShadowMetadata(thisKey, []);\r\n      const component = meta?.components?.get(componentKey);\r\n\r\n      // Remove from each path we registered to\r\n      if (component?.paths) {\r\n        component.paths.forEach((fullPath) => {\r\n          // fullPath is like \"todos.0.name\", need to split and remove stateKey\r\n          const pathParts = fullPath.split('.');\r\n          const path = pathParts.slice(1); // Remove stateKey part\r\n\r\n          const pathMeta = getGlobalStore\r\n            .getState()\r\n            .getShadowMetadata(thisKey, path);\r\n          if (pathMeta?.pathComponents) {\r\n            // Optionally clean up empty Sets\r\n\r\n            if (pathMeta.pathComponents.size === 0) {\r\n              delete pathMeta.pathComponents;\r\n              getGlobalStore\r\n                .getState()\r\n                .setShadowMetadata(thisKey, path, pathMeta);\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // Remove from root components\r\n      if (meta?.components) {\r\n        setShadowMetadata(thisKey, [], meta);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const syncApiRef = useRef<SyncApi | null>(null);\r\n  const effectiveSetState = createEffectiveSetState(\r\n    thisKey,\r\n    syncApiRef,\r\n    sessionId,\r\n    latestInitialOptionsRef\r\n  );\r\n\r\n  if (!getGlobalStore.getState().initialStateGlobal[thisKey]) {\r\n    updateInitialStateGlobal(thisKey, stateObject);\r\n  }\r\n\r\n  const updaterFinal = useMemo(() => {\r\n    const handler = createProxyHandler<TStateObject>(\r\n      thisKey,\r\n      effectiveSetState,\r\n      componentIdRef.current,\r\n      sessionId\r\n    );\r\n\r\n    return handler;\r\n  }, [thisKey, sessionId]);\r\n\r\n  const cogsSyncFn = __useSync;\r\n  const syncOpt = latestInitialOptionsRef.current?.syncOptions;\r\n\r\n  if (cogsSyncFn) {\r\n    syncApiRef.current = cogsSyncFn(\r\n      updaterFinal as any,\r\n      syncOpt ?? ({} as any)\r\n    );\r\n  }\r\n\r\n  return updaterFinal;\r\n}\r\n\r\ntype MetaData = {\r\n  // Map array paths to their filtered/sorted ID order\r\n  arrayViews?: {\r\n    [arrayPath: string]: string[]; // e.g. { \"todos\": [\"id:xxx\", \"id:yyy\"], \"todos.id:xxx.subtasks\": [\"id:aaa\"] }\r\n  };\r\n  transforms?: Array<{\r\n    type: 'filter' | 'sort';\r\n    fn: Function;\r\n    path: string[]; // Which array this transform applies to\r\n  }>;\r\n  serverStateIsUpStream?: boolean;\r\n};\r\n\r\nconst applyTransforms = (\r\n  stateKey: string,\r\n  path: string[],\r\n  meta?: MetaData\r\n): string[] => {\r\n  let ids = getShadowMetadata(stateKey, path)?.arrayKeys || [];\r\n  const transforms = meta?.transforms;\r\n  if (!transforms || transforms.length === 0) {\r\n    return ids;\r\n  }\r\n\r\n  // Apply each transform using just IDs\r\n  for (const transform of transforms) {\r\n    if (transform.type === 'filter') {\r\n      const filtered: any[] = [];\r\n      ids.forEach((id, index) => {\r\n        const value = getShadowValue(stateKey, [...path, id]);\r\n\r\n        if (transform.fn(value, index)) {\r\n          filtered.push(id);\r\n        }\r\n      });\r\n      ids = filtered;\r\n    } else if (transform.type === 'sort') {\r\n      ids.sort((a, b) => {\r\n        const aValue = getShadowValue(stateKey, [...path, a]);\r\n        const bValue = getShadowValue(stateKey, [...path, b]);\r\n        return transform.fn(aValue, bValue);\r\n      });\r\n    }\r\n  }\r\n\r\n  return ids;\r\n};\r\nconst registerComponentDependency = (\r\n  stateKey: string,\r\n  componentId: string,\r\n  dependencyPath: string[]\r\n) => {\r\n  const fullComponentId = `${stateKey}////${componentId}`;\r\n\r\n  const rootMeta = getShadowMetadata(stateKey, []);\r\n  const component = rootMeta?.components?.get(fullComponentId);\r\n\r\n  if (\r\n    !component ||\r\n    component.reactiveType === 'none' ||\r\n    !(\r\n      Array.isArray(component.reactiveType)\r\n        ? component.reactiveType\r\n        : [component.reactiveType]\r\n    ).includes('component')\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  addPathComponent(stateKey, dependencyPath, fullComponentId);\r\n};\r\nconst notifySelectionComponents = (\r\n  stateKey: string,\r\n  parentPath: string[],\r\n  currentSelected?: string | undefined\r\n) => {\r\n  const rootMeta = getShadowMetadata(stateKey, []);\r\n  const notifiedComponents = new Set<string>();\r\n\r\n  // Handle \"all\" reactive components first\r\n  if (rootMeta?.components) {\r\n    rootMeta.components.forEach((component, componentId) => {\r\n      const reactiveTypes = Array.isArray(component.reactiveType)\r\n        ? component.reactiveType\r\n        : [component.reactiveType || 'component'];\r\n\r\n      if (reactiveTypes.includes('all')) {\r\n        component.forceUpdate();\r\n        notifiedComponents.add(componentId);\r\n      }\r\n    });\r\n  }\r\n\r\n  getShadowMetadata(stateKey, [\r\n    ...parentPath,\r\n    'getSelected',\r\n  ])?.pathComponents?.forEach((componentId) => {\r\n    const thisComp = rootMeta?.components?.get(componentId);\r\n    thisComp?.forceUpdate();\r\n  });\r\n\r\n  const parentMeta = getShadowMetadata(stateKey, parentPath);\r\n  for (let arrayKey of parentMeta?.arrayKeys || []) {\r\n    const key = arrayKey + '.selected';\r\n    const selectedItem = getShadowMetadata(stateKey, key.split('.').slice(1));\r\n    if (arrayKey == currentSelected) {\r\n      selectedItem?.pathComponents?.forEach((componentId) => {\r\n        const thisComp = rootMeta?.components?.get(componentId);\r\n        thisComp?.forceUpdate();\r\n      });\r\n    }\r\n  }\r\n};\r\nfunction getScopedData(stateKey: string, path: string[], meta?: MetaData) {\r\n  const shadowMeta = getShadowMetadata(stateKey, path);\r\n  const arrayPathKey = path.length > 0 ? path.join('.') : 'root';\r\n  const arrayKeys = meta?.arrayViews?.[arrayPathKey];\r\n\r\n  // FIX: If the derived view is empty, return an empty array directly.\r\n  if (Array.isArray(arrayKeys) && arrayKeys.length === 0) {\r\n    return {\r\n      shadowMeta,\r\n      value: [],\r\n      arrayKeys: shadowMeta?.arrayKeys,\r\n    };\r\n  }\r\n\r\n  const value = getShadowValue(stateKey, path, arrayKeys);\r\n\r\n  return {\r\n    shadowMeta,\r\n    value,\r\n    arrayKeys: shadowMeta?.arrayKeys,\r\n  };\r\n}\r\n\r\nfunction createProxyHandler<T>(\r\n  stateKey: string,\r\n  effectiveSetState: EffectiveSetState<T>,\r\n  outerComponentId: string,\r\n  sessionId?: string\r\n): StateObject<T> {\r\n  const proxyCache = new Map<string, any>();\r\n  let stateVersion = 0;\r\n\r\n  function rebuildStateShape({\r\n    path = [],\r\n    meta,\r\n    componentId,\r\n  }: {\r\n    path: string[];\r\n    componentId: string;\r\n    meta?: MetaData;\r\n  }): any {\r\n    const derivationSignature = meta\r\n      ? JSON.stringify(meta.arrayViews || meta.transforms)\r\n      : '';\r\n    const cacheKey =\r\n      path.join('.') + ':' + componentId + ':' + derivationSignature;\r\n    if (proxyCache.has(cacheKey)) {\r\n      return proxyCache.get(cacheKey);\r\n    }\r\n    const stateKeyPathKey = [stateKey, ...path].join('.');\r\n\r\n    // We attach baseObj properties *inside* the get trap now to avoid recursion\r\n    // This is a placeholder for the proxy.\r\n\r\n    const handler = {\r\n      get(target: any, prop: string) {\r\n        if (path.length === 0 && prop in rootLevelMethods) {\r\n          return rootLevelMethods[prop as keyof typeof rootLevelMethods];\r\n        }\r\n        if (!prop.startsWith('$')) {\r\n          const nextPath = [...path, prop];\r\n          return rebuildStateShape({\r\n            path: nextPath,\r\n            componentId: componentId!,\r\n            meta,\r\n          });\r\n        }\r\n        if (prop === '$_rebuildStateShape') {\r\n          return rebuildStateShape;\r\n        }\r\n\r\n        if (prop === '$sync' && path.length === 0) {\r\n          return async function () {\r\n            const options = getGlobalStore\r\n              .getState()\r\n              .getInitialOptions(stateKey);\r\n            const sync = options?.sync;\r\n\r\n            if (!sync) {\r\n              console.error(`No mutation defined for state key \"${stateKey}\"`);\r\n              return { success: false, error: `No mutation defined` };\r\n            }\r\n\r\n            const state = getGlobalStore\r\n              .getState()\r\n              .getShadowValue(stateKey, []);\r\n            const validationKey = options?.validation?.key;\r\n\r\n            try {\r\n              const response = await sync.action(state);\r\n              if (\r\n                response &&\r\n                !response.success &&\r\n                response.errors &&\r\n                validationKey\r\n              ) {\r\n                //  getGlobalStore.getState().removeValidationError(validationKey);\r\n                // response.errors.forEach((error) => {\r\n                //   const errorPath = [validationKey, ...error.path].join('.');\r\n                //   getGlobalStore\r\n                //     .getState()\r\n                //     .addValidationError(errorPath, error.message);\r\n                // });\r\n                //   notifyComponents(stateKey);\r\n              }\r\n\r\n              if (response?.success) {\r\n                // Mark as synced and not dirty\r\n                const shadowMeta = getGlobalStore\r\n                  .getState()\r\n                  .getShadowMetadata(stateKey, []);\r\n                setShadowMetadata(stateKey, [], {\r\n                  ...shadowMeta,\r\n                  isDirty: false,\r\n                  lastServerSync: Date.now(),\r\n                  stateSource: 'server',\r\n                  baseServerState: state, // Update base server state\r\n                });\r\n\r\n                if (sync.onSuccess) {\r\n                  sync.onSuccess(response.data);\r\n                }\r\n              } else if (!response?.success && sync.onError)\r\n                sync.onError(response.error);\r\n\r\n              return response;\r\n            } catch (error) {\r\n              if (sync.onError) sync.onError(error);\r\n              return { success: false, error };\r\n            }\r\n          };\r\n        }\r\n        // Fixed getStatus function in createProxyHandler\r\n        if (prop === '$_status' || prop === '$getStatus') {\r\n          const getStatusFunc = () => {\r\n            // ✅ Use the optimized helper to get all data in one efficient call\r\n            const { shadowMeta, value } = getScopedData(stateKey, path, meta);\r\n            console.log('getStatusFunc', path, shadowMeta, value);\r\n            if (shadowMeta?.isDirty === true) {\r\n              return 'dirty';\r\n            }\r\n\r\n            if (\r\n              shadowMeta?.stateSource === 'server' ||\r\n              shadowMeta?.isDirty === false\r\n            ) {\r\n              return 'synced';\r\n            }\r\n\r\n            if (shadowMeta?.stateSource === 'localStorage') {\r\n              return 'restored';\r\n            }\r\n\r\n            if (shadowMeta?.stateSource === 'default') {\r\n              return 'fresh';\r\n            }\r\n\r\n            if (value !== undefined) {\r\n              return 'fresh';\r\n            }\r\n\r\n            // Fallback if no other condition is met.\r\n            return 'unknown';\r\n          };\r\n\r\n          // This part remains the same\r\n          return prop === '$_status' ? getStatusFunc() : getStatusFunc;\r\n        }\r\n        if (prop === '$removeStorage') {\r\n          return () => {\r\n            const initialState =\r\n              getGlobalStore.getState().initialStateGlobal[stateKey];\r\n            const initalOptionsGet = getInitialOptions(stateKey as string);\r\n            const localKey = isFunction(initalOptionsGet?.localStorage?.key)\r\n              ? initalOptionsGet.localStorage.key(initialState)\r\n              : initalOptionsGet?.localStorage?.key;\r\n            const storageKey = `${sessionId}-${stateKey}-${localKey}`;\r\n            if (storageKey) localStorage.removeItem(storageKey);\r\n          };\r\n        }\r\n        if (prop === '$showValidationErrors') {\r\n          return () => {\r\n            const { shadowMeta } = getScopedData(stateKey, path, meta);\r\n            if (\r\n              shadowMeta?.validation?.status === 'INVALID' &&\r\n              shadowMeta.validation.errors.length > 0\r\n            ) {\r\n              // Return only error-severity messages (not warnings)\r\n              return shadowMeta.validation.errors\r\n                .filter((err) => err.severity === 'error')\r\n                .map((err) => err.message);\r\n            }\r\n            return [];\r\n          };\r\n        }\r\n\r\n        if (prop === '$getSelected') {\r\n          return () => {\r\n            const arrayKey = [stateKey, ...path].join('.');\r\n            registerComponentDependency(stateKey, componentId, [\r\n              ...path,\r\n              'getSelected',\r\n            ]);\r\n\r\n            const selectedItemKey = getGlobalStore\r\n              .getState()\r\n              .selectedIndicesMap.get(arrayKey);\r\n            if (!selectedItemKey) {\r\n              return undefined;\r\n            }\r\n\r\n            const viewKey = path.join('.');\r\n            const currentViewIds = meta?.arrayViews?.[viewKey];\r\n            const selectedItemId = selectedItemKey.split('.').pop();\r\n\r\n            // FIX: Only return the selected item if it exists in the current filtered/sorted view.\r\n            if (currentViewIds && !currentViewIds.includes(selectedItemId!)) {\r\n              return undefined;\r\n            }\r\n\r\n            const value = getShadowValue(\r\n              stateKey,\r\n              selectedItemKey.split('.').slice(1)\r\n            );\r\n            if (value === undefined) {\r\n              return undefined;\r\n            }\r\n\r\n            return rebuildStateShape({\r\n              path: selectedItemKey.split('.').slice(1) as string[],\r\n              componentId: componentId!,\r\n              meta,\r\n            });\r\n          };\r\n        }\r\n        if (prop === '$getSelectedIndex') {\r\n          return () => {\r\n            // Key for the array in the global selection map (e.g., \"myState.products\")\r\n            const arrayKey = stateKey + '.' + path.join('.');\r\n            // Key for this specific view in the meta object (e.g., \"products\")\r\n            const viewKey = path.join('.');\r\n\r\n            // Get the full path of the selected item (e.g., \"myState.products.id:abc\")\r\n            const selectedItemKey = getGlobalStore\r\n              .getState()\r\n              .selectedIndicesMap.get(arrayKey);\r\n\r\n            if (!selectedItemKey) {\r\n              return -1; // Nothing is selected for this array.\r\n            }\r\n\r\n            // Get the list of item IDs for the current filtered/sorted view.\r\n            const { keys: viewIds } = getArrayData(stateKey, path, meta);\r\n\r\n            if (!viewIds) {\r\n              return -1; // Should not happen if it's an array, but a safe guard.\r\n            }\r\n\r\n            // FIX: Extract just the ID from the full selected item path.\r\n            const selectedId = selectedItemKey.split('.').pop();\r\n\r\n            // Return the index of that ID within the current view's list of IDs.\r\n            return (viewIds as string[]).indexOf(selectedId as string);\r\n          };\r\n        }\r\n        if (prop === '$clearSelected') {\r\n          notifySelectionComponents(stateKey, path);\r\n          return () => {\r\n            clearSelectedIndex({\r\n              arrayKey: stateKey + '.' + path.join('.'),\r\n            });\r\n          };\r\n        }\r\n\r\n        if (prop === '$useVirtualView') {\r\n          return (\r\n            options: VirtualViewOptions\r\n          ): VirtualStateObjectResult<any[]> => {\r\n            const {\r\n              itemHeight = 50,\r\n              overscan = 6,\r\n              stickToBottom = false,\r\n              scrollStickTolerance = 75,\r\n            } = options;\r\n\r\n            const containerRef = useRef<HTMLDivElement | null>(null);\r\n            const [range, setRange] = useState({\r\n              startIndex: 0,\r\n              endIndex: 10,\r\n            });\r\n            const [rerender, forceUpdate] = useState({});\r\n            const initialScrollRef = useRef(true);\r\n\r\n            useEffect(() => {\r\n              const interval = setInterval(() => {\r\n                forceUpdate({});\r\n              }, 1000);\r\n              return () => clearInterval(interval);\r\n            }, []);\r\n\r\n            // Scroll state management\r\n            const scrollStateRef = useRef({\r\n              isUserScrolling: false,\r\n              lastScrollTop: 0,\r\n              scrollUpCount: 0,\r\n              isNearBottom: true,\r\n            });\r\n\r\n            // Measurement cache\r\n            const measurementCache = useRef(\r\n              new Map<string, { height: number; offset: number }>()\r\n            );\r\n            const { keys: arrayKeys } = getArrayData(stateKey, path, meta);\r\n\r\n            // Subscribe to state changes like stateList does\r\n            useEffect(() => {\r\n              const stateKeyPathKey = [stateKey, ...path].join('.');\r\n              const unsubscribe = getGlobalStore\r\n                .getState()\r\n                .subscribeToPath(stateKeyPathKey, (e) => {\r\n                  if (e.type === 'GET_SELECTED') {\r\n                    return;\r\n                  }\r\n                  if (e.type === 'SERVER_STATE_UPDATE') {\r\n                    //  forceUpdate({});\r\n                  }\r\n                });\r\n\r\n              return () => {\r\n                unsubscribe();\r\n              };\r\n            }, [componentId, stateKey, path.join('.')]);\r\n\r\n            // YOUR ORIGINAL INITIAL POSITIONING - KEEPING EXACTLY AS IS\r\n            useLayoutEffect(() => {\r\n              if (\r\n                stickToBottom &&\r\n                arrayKeys.length > 0 &&\r\n                containerRef.current &&\r\n                !scrollStateRef.current.isUserScrolling &&\r\n                initialScrollRef.current\r\n              ) {\r\n                const container = containerRef.current;\r\n\r\n                const waitForContainer = () => {\r\n                  if (container.clientHeight > 0) {\r\n                    const visibleCount = Math.ceil(\r\n                      container.clientHeight / itemHeight\r\n                    );\r\n                    const endIndex = arrayKeys.length - 1;\r\n                    const startIndex = Math.max(\r\n                      0,\r\n                      endIndex - visibleCount - overscan\r\n                    );\r\n\r\n                    setRange({ startIndex, endIndex });\r\n\r\n                    requestAnimationFrame(() => {\r\n                      scrollToBottom('instant');\r\n                      initialScrollRef.current = false;\r\n                    });\r\n                  } else {\r\n                    requestAnimationFrame(waitForContainer);\r\n                  }\r\n                };\r\n\r\n                waitForContainer();\r\n              }\r\n            }, [arrayKeys.length, stickToBottom, itemHeight, overscan]);\r\n\r\n            const rangeRef = useRef(range);\r\n            useLayoutEffect(() => {\r\n              rangeRef.current = range;\r\n            }, [range]);\r\n\r\n            const arrayKeysRef = useRef(arrayKeys);\r\n            useLayoutEffect(() => {\r\n              arrayKeysRef.current = arrayKeys;\r\n            }, [arrayKeys]);\r\n\r\n            const handleScroll = useCallback(() => {\r\n              const container = containerRef.current;\r\n              if (!container) return;\r\n\r\n              const currentScrollTop = container.scrollTop;\r\n              const { scrollHeight, clientHeight } = container;\r\n              const scrollState = scrollStateRef.current;\r\n\r\n              // Check if user is near bottom\r\n              const distanceFromBottom =\r\n                scrollHeight - (currentScrollTop + clientHeight);\r\n              const wasNearBottom = scrollState.isNearBottom;\r\n              scrollState.isNearBottom =\r\n                distanceFromBottom <= scrollStickTolerance;\r\n\r\n              // Detect scroll direction\r\n              if (currentScrollTop < scrollState.lastScrollTop) {\r\n                // User scrolled up\r\n                scrollState.scrollUpCount++;\r\n\r\n                if (scrollState.scrollUpCount > 3 && wasNearBottom) {\r\n                  // User has deliberately scrolled away from bottom\r\n                  scrollState.isUserScrolling = true;\r\n                  console.log('User scrolled away from bottom');\r\n                }\r\n              } else if (scrollState.isNearBottom) {\r\n                // Reset if we're back near the bottom\r\n                scrollState.isUserScrolling = false;\r\n                scrollState.scrollUpCount = 0;\r\n              }\r\n\r\n              scrollState.lastScrollTop = currentScrollTop;\r\n\r\n              // Update visible range\r\n              let newStartIndex = 0;\r\n              for (let i = 0; i < arrayKeys.length; i++) {\r\n                const itemKey = arrayKeys[i];\r\n                const item = measurementCache.current.get(itemKey!);\r\n                if (item && item.offset + item.height > currentScrollTop) {\r\n                  newStartIndex = i;\r\n                  break;\r\n                }\r\n              }\r\n              console.log(\r\n                'hadnlescroll ',\r\n                measurementCache.current,\r\n                newStartIndex,\r\n                range\r\n              );\r\n              // Only update if range actually changed\r\n              if (newStartIndex !== range.startIndex && range.startIndex != 0) {\r\n                const visibleCount = Math.ceil(clientHeight / itemHeight);\r\n                setRange({\r\n                  startIndex: Math.max(0, newStartIndex - overscan),\r\n                  endIndex: Math.min(\r\n                    arrayKeys.length - 1,\r\n                    newStartIndex + visibleCount + overscan\r\n                  ),\r\n                });\r\n              }\r\n            }, [\r\n              arrayKeys.length,\r\n              range.startIndex,\r\n              itemHeight,\r\n              overscan,\r\n              scrollStickTolerance,\r\n            ]);\r\n\r\n            // Set up scroll listener\r\n            useEffect(() => {\r\n              const container = containerRef.current;\r\n              if (!container) return;\r\n\r\n              container.addEventListener('scroll', handleScroll, {\r\n                passive: true,\r\n              });\r\n              return () => {\r\n                container.removeEventListener('scroll', handleScroll);\r\n              };\r\n            }, [handleScroll, stickToBottom]);\r\n\r\n            // YOUR ORIGINAL SCROLL TO BOTTOM FUNCTION - KEEPING EXACTLY AS IS\r\n            const scrollToBottom = useCallback(\r\n              (behavior: ScrollBehavior = 'smooth') => {\r\n                const container = containerRef.current;\r\n                if (!container) return;\r\n\r\n                scrollStateRef.current.isUserScrolling = false;\r\n                scrollStateRef.current.isNearBottom = true;\r\n                scrollStateRef.current.scrollUpCount = 0;\r\n\r\n                const performScroll = () => {\r\n                  const attemptScroll = (attempts = 0) => {\r\n                    if (attempts > 5) return;\r\n\r\n                    const currentHeight = container.scrollHeight;\r\n                    const currentScroll = container.scrollTop;\r\n                    const clientHeight = container.clientHeight;\r\n\r\n                    if (currentScroll + clientHeight >= currentHeight - 1) {\r\n                      return;\r\n                    }\r\n\r\n                    container.scrollTo({\r\n                      top: currentHeight,\r\n                      behavior: behavior,\r\n                    });\r\n\r\n                    setTimeout(() => {\r\n                      const newHeight = container.scrollHeight;\r\n                      const newScroll = container.scrollTop;\r\n\r\n                      if (\r\n                        newHeight !== currentHeight ||\r\n                        newScroll + clientHeight < newHeight - 1\r\n                      ) {\r\n                        attemptScroll(attempts + 1);\r\n                      }\r\n                    }, 50);\r\n                  };\r\n\r\n                  attemptScroll();\r\n                };\r\n\r\n                if ('requestIdleCallback' in window) {\r\n                  requestIdleCallback(performScroll, { timeout: 100 });\r\n                } else {\r\n                  requestAnimationFrame(() => {\r\n                    requestAnimationFrame(performScroll);\r\n                  });\r\n                }\r\n              },\r\n              []\r\n            );\r\n\r\n            // YOUR ORIGINAL AUTO-SCROLL EFFECTS - KEEPING ALL OF THEM\r\n            useEffect(() => {\r\n              if (!stickToBottom || !containerRef.current) return;\r\n\r\n              const container = containerRef.current;\r\n              const scrollState = scrollStateRef.current;\r\n\r\n              let scrollTimeout: NodeJS.Timeout;\r\n              const debouncedScrollToBottom = () => {\r\n                clearTimeout(scrollTimeout);\r\n                scrollTimeout = setTimeout(() => {\r\n                  if (\r\n                    !scrollState.isUserScrolling &&\r\n                    scrollState.isNearBottom\r\n                  ) {\r\n                    scrollToBottom(\r\n                      initialScrollRef.current ? 'instant' : 'smooth'\r\n                    );\r\n                  }\r\n                }, 100);\r\n              };\r\n\r\n              const observer = new MutationObserver(() => {\r\n                if (!scrollState.isUserScrolling) {\r\n                  debouncedScrollToBottom();\r\n                }\r\n              });\r\n\r\n              observer.observe(container, {\r\n                childList: true,\r\n                subtree: true,\r\n                attributes: true,\r\n                attributeFilter: ['style', 'class'],\r\n              });\r\n\r\n              if (initialScrollRef.current) {\r\n                setTimeout(() => {\r\n                  scrollToBottom('instant');\r\n                }, 0);\r\n              } else {\r\n                debouncedScrollToBottom();\r\n              }\r\n\r\n              return () => {\r\n                clearTimeout(scrollTimeout);\r\n                observer.disconnect();\r\n              };\r\n            }, [stickToBottom, arrayKeys.length, scrollToBottom]);\r\n\r\n            // Create virtual state - NO NEED to get values, only IDs!\r\n            const virtualState = useMemo(() => {\r\n              // 2. Physically slice the corresponding keys.\r\n              const slicedKeys = Array.isArray(arrayKeys)\r\n                ? arrayKeys.slice(range.startIndex, range.endIndex + 1)\r\n                : [];\r\n\r\n              // Use the same keying as getArrayData (empty string for root)\r\n              const arrayPath = path.length > 0 ? path.join('.') : 'root';\r\n              return rebuildStateShape({\r\n                path,\r\n                componentId: componentId!,\r\n                meta: {\r\n                  ...meta,\r\n                  arrayViews: { [arrayPath]: slicedKeys },\r\n                  serverStateIsUpStream: true,\r\n                },\r\n              });\r\n            }, [range.startIndex, range.endIndex, arrayKeys, meta]);\r\n\r\n            return {\r\n              virtualState,\r\n              virtualizerProps: {\r\n                outer: {\r\n                  ref: containerRef,\r\n                  style: {\r\n                    overflowY: 'auto' as const,\r\n                    height: '100%',\r\n                    position: 'relative' as const,\r\n                  },\r\n                },\r\n                inner: {\r\n                  style: {\r\n                    position: 'relative' as const,\r\n                  },\r\n                },\r\n                list: {\r\n                  style: {\r\n                    transform: `translateY(${\r\n                      measurementCache.current.get(arrayKeys[range.startIndex]!)\r\n                        ?.offset || 0\r\n                    }px)`,\r\n                  },\r\n                },\r\n              },\r\n              scrollToBottom,\r\n              scrollToIndex: (\r\n                index: number,\r\n                behavior: ScrollBehavior = 'smooth'\r\n              ) => {\r\n                if (containerRef.current && arrayKeys[index]) {\r\n                  const offset =\r\n                    measurementCache.current.get(arrayKeys[index]!)?.offset ||\r\n                    0;\r\n                  containerRef.current.scrollTo({ top: offset, behavior });\r\n                }\r\n              },\r\n            };\r\n          };\r\n        }\r\n        if (prop === '$stateMap') {\r\n          return (\r\n            callbackfn: (setter: any, index: number, arraySetter: any) => void\r\n          ) => {\r\n            // FIX: Use getArrayData to reliably get both the value and the keys of the current view.\r\n            const { value: shadowValue, keys: arrayKeys } = getArrayData(\r\n              stateKey,\r\n              path,\r\n              meta\r\n            );\r\n            registerComponentDependency(stateKey, componentId, path);\r\n            if (!arrayKeys || !Array.isArray(shadowValue)) {\r\n              return []; // It's valid to map over an empty array.\r\n            }\r\n\r\n            const arraySetter = rebuildStateShape({\r\n              path,\r\n              componentId: componentId!,\r\n              meta,\r\n            });\r\n\r\n            return shadowValue.map((_item, index) => {\r\n              const itemKey = arrayKeys[index];\r\n              if (!itemKey) return undefined;\r\n\r\n              // FIX: Construct the correct path to the item in the original store.\r\n              // The path is the array's path plus the specific item's unique key.\r\n              const itemPath = [...path, itemKey];\r\n\r\n              const itemSetter = rebuildStateShape({\r\n                path: itemPath, // This now correctly points to the item in the shadow store.\r\n                componentId: componentId!,\r\n                meta,\r\n              });\r\n\r\n              return callbackfn(itemSetter, index, arraySetter);\r\n            });\r\n          };\r\n        }\r\n\r\n        if (prop === '$stateFilter') {\r\n          return (callbackfn: (value: any, index: number) => boolean) => {\r\n            const arrayPathKey = path.length > 0 ? path.join('.') : 'root';\r\n\r\n            // ✅ FIX: Get keys from `getArrayData` which correctly resolves them from meta or the full list.\r\n            const { keys: currentViewIds, value: array } = getArrayData(\r\n              stateKey,\r\n              path,\r\n              meta\r\n            );\r\n\r\n            if (!Array.isArray(array)) {\r\n              throw new Error('stateFilter can only be used on arrays');\r\n            }\r\n\r\n            // Filter the array and collect the IDs of the items that pass\r\n            const filteredIds: string[] = [];\r\n            array.forEach((item, index) => {\r\n              if (callbackfn(item, index)) {\r\n                // currentViewIds[index] is the original ID before filtering\r\n                const id = currentViewIds[index];\r\n                if (id) {\r\n                  filteredIds.push(id);\r\n                }\r\n              }\r\n            });\r\n\r\n            // The rest is the same...\r\n            return rebuildStateShape({\r\n              path,\r\n              componentId: componentId!,\r\n              meta: {\r\n                ...meta,\r\n                arrayViews: {\r\n                  ...(meta?.arrayViews || {}),\r\n                  [arrayPathKey]: filteredIds,\r\n                },\r\n                transforms: [\r\n                  ...(meta?.transforms || []),\r\n                  { type: 'filter', fn: callbackfn, path },\r\n                ],\r\n              },\r\n            });\r\n          };\r\n        }\r\n        if (prop === '$stateSort') {\r\n          return (compareFn: (a: any, b: any) => number) => {\r\n            const arrayPathKey = path.length > 0 ? path.join('.') : 'root';\r\n\r\n            // FIX: Use the more robust `getArrayData` which always correctly resolves the keys for a view.\r\n            const { value: currentArray, keys: currentViewIds } = getArrayData(\r\n              stateKey,\r\n              path,\r\n              meta\r\n            );\r\n\r\n            if (!Array.isArray(currentArray) || !currentViewIds) {\r\n              throw new Error('No array keys found for sorting');\r\n            }\r\n\r\n            // ... (rest of the function is the same and now works)\r\n            const itemsWithIds = currentArray.map((item, index) => ({\r\n              item,\r\n              key: currentViewIds[index],\r\n            }));\r\n            itemsWithIds.sort((a, b) => compareFn(a.item, b.item));\r\n            const sortedIds = itemsWithIds.map((i) => i.key as string);\r\n\r\n            return rebuildStateShape({\r\n              path,\r\n              componentId: componentId!,\r\n              meta: {\r\n                ...meta,\r\n                arrayViews: {\r\n                  ...(meta?.arrayViews || {}),\r\n                  [arrayPathKey]: sortedIds,\r\n                },\r\n                transforms: [\r\n                  ...(meta?.transforms || []),\r\n                  { type: 'sort', fn: compareFn, path },\r\n                ],\r\n              },\r\n            });\r\n          };\r\n        }\r\n        // In createProxyHandler, inside the get trap where you have other array methods:\r\n        if (prop === '$stream') {\r\n          return function <U = InferArrayElement<T>, R = U>(\r\n            options: StreamOptions<U, R> = {}\r\n          ): StreamHandle<U> {\r\n            const {\r\n              bufferSize = 100,\r\n              flushInterval = 100,\r\n              bufferStrategy = 'accumulate',\r\n              store,\r\n              onFlush,\r\n            } = options;\r\n\r\n            let buffer: U[] = [];\r\n            let isPaused = false;\r\n            let flushTimer: NodeJS.Timeout | null = null;\r\n\r\n            const addToBuffer = (item: U) => {\r\n              if (isPaused) return;\r\n\r\n              if (bufferStrategy === 'sliding' && buffer.length >= bufferSize) {\r\n                buffer.shift();\r\n              } else if (\r\n                bufferStrategy === 'dropping' &&\r\n                buffer.length >= bufferSize\r\n              ) {\r\n                return;\r\n              }\r\n\r\n              buffer.push(item);\r\n\r\n              if (buffer.length >= bufferSize) {\r\n                flushBuffer();\r\n              }\r\n            };\r\n\r\n            const flushBuffer = () => {\r\n              if (buffer.length === 0) return;\r\n\r\n              const toFlush = [...buffer];\r\n              buffer = [];\r\n\r\n              if (store) {\r\n                const result = store(toFlush);\r\n                if (result !== undefined) {\r\n                  const items = Array.isArray(result) ? result : [result];\r\n                  items.forEach((item) => {\r\n                    effectiveSetState(item as any, path, {\r\n                      updateType: 'insert',\r\n                    });\r\n                  });\r\n                }\r\n              } else {\r\n                toFlush.forEach((item) => {\r\n                  effectiveSetState(item as any, path, {\r\n                    updateType: 'insert',\r\n                  });\r\n                });\r\n              }\r\n\r\n              onFlush?.(toFlush);\r\n            };\r\n\r\n            if (flushInterval > 0) {\r\n              flushTimer = setInterval(flushBuffer, flushInterval);\r\n            }\r\n\r\n            const streamId = uuidv4();\r\n            const currentMeta = getShadowMetadata(stateKey, path) || {};\r\n            const streams = currentMeta.streams || new Map();\r\n            streams.set(streamId, { buffer, flushTimer });\r\n\r\n            setShadowMetadata(stateKey, path, {\r\n              ...currentMeta,\r\n              streams,\r\n            });\r\n\r\n            return {\r\n              write: (data: U) => addToBuffer(data),\r\n              writeMany: (data: U[]) => data.forEach(addToBuffer),\r\n              flush: () => flushBuffer(),\r\n              pause: () => {\r\n                isPaused = true;\r\n              },\r\n              resume: () => {\r\n                isPaused = false;\r\n                if (buffer.length > 0) flushBuffer();\r\n              },\r\n              close: () => {\r\n                flushBuffer();\r\n                if (flushTimer) clearInterval(flushTimer);\r\n\r\n                const meta = getGlobalStore\r\n                  .getState()\r\n                  .getShadowMetadata(stateKey, path);\r\n                if (meta?.streams) {\r\n                  meta.streams.delete(streamId);\r\n                }\r\n              },\r\n            };\r\n          };\r\n        }\r\n\r\n        if (prop === '$stateList') {\r\n          return (\r\n            callbackfn: (\r\n              setter: any,\r\n              index: number,\r\n              arraySetter: any\r\n            ) => ReactNode\r\n          ) => {\r\n            const StateListWrapper = () => {\r\n              const componentIdsRef = useRef<Map<string, string>>(new Map());\r\n\r\n              const [updateTrigger, forceUpdate] = useState({});\r\n\r\n              const arrayPathKey = path.length > 0 ? path.join('.') : 'root';\r\n\r\n              const validIds = applyTransforms(stateKey, path, meta);\r\n\r\n              // Memoize the updated meta to prevent creating new objects on every render\r\n              const updatedMeta = useMemo(() => {\r\n                return {\r\n                  ...meta,\r\n                  arrayViews: {\r\n                    ...(meta?.arrayViews || {}),\r\n                    [arrayPathKey]: validIds,\r\n                  },\r\n                };\r\n              }, [meta, arrayPathKey, validIds]);\r\n\r\n              // Now use the updated meta when getting array data\r\n              const { value: arrayValues } = getArrayData(\r\n                stateKey,\r\n                path,\r\n                updatedMeta\r\n              );\r\n\r\n              useEffect(() => {\r\n                const unsubscribe = getGlobalStore\r\n                  .getState()\r\n                  .subscribeToPath(stateKeyPathKey, (e) => {\r\n                    if (e.type === 'GET_SELECTED') {\r\n                      return;\r\n                    }\r\n                    const shadowMeta = getGlobalStore\r\n                      .getState()\r\n                      .getShadowMetadata(stateKey, path);\r\n\r\n                    const caches = shadowMeta?.transformCaches;\r\n                    if (caches) {\r\n                      // Iterate over ALL keys in the cache map.\r\n                      for (const key of caches.keys()) {\r\n                        // If the key belongs to this component instance, delete it.\r\n                        // This purges caches for 'sort by name', 'sort by score', etc.\r\n                        if (key.startsWith(componentId)) {\r\n                          caches.delete(key);\r\n                        }\r\n                      }\r\n                    }\r\n\r\n                    if (\r\n                      e.type === 'INSERT' ||\r\n                      e.type === 'INSERT_MANY' ||\r\n                      e.type === 'REMOVE' ||\r\n                      e.type === 'CLEAR_SELECTION' ||\r\n                      (e.type === 'SERVER_STATE_UPDATE' &&\r\n                        !meta?.serverStateIsUpStream)\r\n                    ) {\r\n                      forceUpdate({});\r\n                    }\r\n                  });\r\n\r\n                return () => {\r\n                  unsubscribe();\r\n                };\r\n\r\n                // This effect's logic now depends on the componentId to perform the purge.\r\n              }, [componentId, stateKeyPathKey]);\r\n\r\n              if (!Array.isArray(arrayValues)) {\r\n                return null;\r\n              }\r\n\r\n              // Continue using updatedMeta for the rest of your logic instead of meta\r\n              const arraySetter = rebuildStateShape({\r\n                path,\r\n                componentId: componentId!,\r\n                meta: updatedMeta, // Use updated meta here\r\n              });\r\n\r\n              const returnValue = arrayValues.map((item, localIndex) => {\r\n                const itemKey = validIds[localIndex];\r\n\r\n                if (!itemKey) {\r\n                  return null;\r\n                }\r\n\r\n                let itemComponentId = componentIdsRef.current.get(itemKey);\r\n                if (!itemComponentId) {\r\n                  itemComponentId = uuidv4();\r\n                  componentIdsRef.current.set(itemKey, itemComponentId);\r\n                }\r\n\r\n                const itemPath = [...path, itemKey];\r\n\r\n                return createElement(MemoizedCogsItemWrapper, {\r\n                  key: itemKey,\r\n                  stateKey,\r\n                  itemComponentId,\r\n                  itemPath,\r\n                  localIndex,\r\n                  arraySetter,\r\n                  rebuildStateShape,\r\n                  renderFn: callbackfn,\r\n                });\r\n              });\r\n\r\n              return <>{returnValue}</>;\r\n            };\r\n\r\n            return <StateListWrapper />;\r\n          };\r\n        }\r\n        if (prop === '$stateFlattenOn') {\r\n          return (fieldName: string) => {\r\n            // FIX: Get the definitive list of IDs for the current view from meta.arrayViews.\r\n            const arrayPathKey = path.length > 0 ? path.join('.') : 'root';\r\n            const viewIds = meta?.arrayViews?.[arrayPathKey];\r\n\r\n            const currentState = getGlobalStore\r\n              .getState()\r\n              .getShadowValue(stateKey, path, viewIds);\r\n\r\n            if (!Array.isArray(currentState)) return [];\r\n\r\n            stateVersion++;\r\n\r\n            return rebuildStateShape({\r\n              path: [...path, '[*]', fieldName],\r\n              componentId: componentId!,\r\n              meta,\r\n            });\r\n          };\r\n        }\r\n        if (prop === '$index') {\r\n          return (index: number) => {\r\n            const arrayPathKey = path.length > 0 ? path.join('.') : 'root';\r\n            const viewIds = meta?.arrayViews?.[arrayPathKey];\r\n\r\n            if (viewIds) {\r\n              const itemId = viewIds[index];\r\n              if (!itemId) return undefined;\r\n              return rebuildStateShape({\r\n                path: [...path, itemId],\r\n                componentId: componentId!,\r\n                meta,\r\n              });\r\n            }\r\n\r\n            // ✅ FIX: Get the metadata and use the `arrayKeys` property.\r\n            const shadowMeta = getShadowMetadata(stateKey, path);\r\n            if (!shadowMeta?.arrayKeys) return undefined;\r\n\r\n            const itemId = shadowMeta.arrayKeys[index];\r\n            if (!itemId) return undefined;\r\n\r\n            return rebuildStateShape({\r\n              path: [...path, itemId],\r\n              componentId: componentId!,\r\n              meta,\r\n            });\r\n          };\r\n        }\r\n        if (prop === '$last') {\r\n          return () => {\r\n            const { keys: currentViewIds } = getArrayData(stateKey, path, meta);\r\n            if (!currentViewIds || currentViewIds.length === 0) {\r\n              return undefined;\r\n            }\r\n            const lastItemKey = currentViewIds[currentViewIds.length - 1];\r\n\r\n            if (!lastItemKey) {\r\n              return undefined;\r\n            }\r\n            const newPath = [...path, lastItemKey];\r\n\r\n            return rebuildStateShape({\r\n              path: newPath,\r\n              componentId: componentId!,\r\n              meta,\r\n            });\r\n          };\r\n        }\r\n        if (prop === '$insert') {\r\n          return (\r\n            payload: InsertParams<InferArrayElement<T>>,\r\n            index?: number\r\n          ) => {\r\n            effectiveSetState(payload as any, path, { updateType: 'insert' });\r\n          };\r\n        }\r\n        if (prop === '$uniqueInsert') {\r\n          return (\r\n            payload: UpdateArg<T>,\r\n            fields?: (keyof InferArrayElement<T>)[],\r\n            onMatch?: (existingItem: any) => any\r\n          ) => {\r\n            const { value: currentArray } = getScopedData(\r\n              stateKey,\r\n              path,\r\n              meta\r\n            ) as {\r\n              value: any[];\r\n            };\r\n            const newValue = isFunction<T>(payload)\r\n              ? payload(currentArray as any)\r\n              : (payload as any);\r\n\r\n            let matchedItem: any = null;\r\n            const isUnique = !currentArray.some((item) => {\r\n              const isMatch = fields\r\n                ? fields.every((field) =>\r\n                    isDeepEqual(item[field], newValue[field])\r\n                  )\r\n                : isDeepEqual(item, newValue);\r\n              if (isMatch) matchedItem = item;\r\n              return isMatch;\r\n            });\r\n\r\n            if (isUnique) {\r\n              effectiveSetState(newValue, path, { updateType: 'insert' });\r\n            } else if (onMatch && matchedItem) {\r\n              const updatedItem = onMatch(matchedItem);\r\n              const updatedArray = currentArray.map((item) =>\r\n                isDeepEqual(item, matchedItem) ? updatedItem : item\r\n              );\r\n\r\n              effectiveSetState(updatedArray as any, path, {\r\n                updateType: 'update',\r\n              });\r\n            }\r\n          };\r\n        }\r\n        if (prop === '$cut') {\r\n          return (index?: number, options?: { waitForSync?: boolean }) => {\r\n            const shadowMeta = getShadowMetadata(stateKey, path);\r\n            if (!shadowMeta?.arrayKeys || shadowMeta.arrayKeys.length === 0)\r\n              return;\r\n\r\n            const indexToCut =\r\n              index === -1\r\n                ? shadowMeta.arrayKeys.length - 1\r\n                : index !== undefined\r\n                  ? index\r\n                  : shadowMeta.arrayKeys.length - 1;\r\n\r\n            const idToCut = shadowMeta.arrayKeys[indexToCut];\r\n            if (!idToCut) return;\r\n\r\n            effectiveSetState(null, [...path, idToCut], {\r\n              updateType: 'cut',\r\n            });\r\n          };\r\n        }\r\n        if (prop === '$cutSelected') {\r\n          return () => {\r\n            const arrayKey = [stateKey, ...path].join('.');\r\n\r\n            const { keys: currentViewIds } = getArrayData(stateKey, path, meta);\r\n            if (!currentViewIds || currentViewIds.length === 0) {\r\n              return;\r\n            }\r\n            const selectedItemKey = getGlobalStore\r\n              .getState()\r\n              .selectedIndicesMap.get(arrayKey);\r\n\r\n            if (!selectedItemKey) {\r\n              return;\r\n            }\r\n            const selectedId = selectedItemKey.split('.').pop() as string;\r\n\r\n            if (!(currentViewIds as any[]).includes(selectedId!)) {\r\n              return;\r\n            }\r\n            const pathForCut = selectedItemKey.split('.').slice(1);\r\n            getGlobalStore.getState().clearSelectedIndex({ arrayKey });\r\n\r\n            const parentPath = pathForCut.slice(0, -1);\r\n            notifySelectionComponents(stateKey, parentPath);\r\n\r\n            effectiveSetState(null, pathForCut, {\r\n              updateType: 'cut',\r\n            });\r\n          };\r\n        }\r\n        if (prop === '$cutByValue') {\r\n          return (value: string | number | boolean) => {\r\n            const {\r\n              isArray,\r\n              value: array,\r\n              keys,\r\n            } = getArrayData(stateKey, path, meta);\r\n\r\n            if (!isArray) return;\r\n\r\n            const found = findArrayItem(array, keys, (item) => item === value);\r\n            if (found) {\r\n              effectiveSetState(null, [...path, found.key], {\r\n                updateType: 'cut',\r\n              });\r\n            }\r\n          };\r\n        }\r\n\r\n        if (prop === '$toggleByValue') {\r\n          return (value: string | number | boolean) => {\r\n            const {\r\n              isArray,\r\n              value: array,\r\n              keys,\r\n            } = getArrayData(stateKey, path, meta);\r\n\r\n            if (!isArray) return;\r\n\r\n            const found = findArrayItem(array, keys, (item) => item === value);\r\n\r\n            if (found) {\r\n              const pathForItem = [...path, found.key];\r\n\r\n              effectiveSetState(null, pathForItem, {\r\n                updateType: 'cut',\r\n              });\r\n            } else {\r\n              effectiveSetState(value as any, path, { updateType: 'insert' });\r\n            }\r\n          };\r\n        }\r\n        if (prop === '$findWith') {\r\n          return (searchKey: string, searchValue: any) => {\r\n            const { isArray, value, keys } = getArrayData(stateKey, path, meta);\r\n\r\n            if (!isArray) {\r\n              throw new Error('findWith can only be used on arrays');\r\n            }\r\n\r\n            const found = findArrayItem(\r\n              value,\r\n              keys,\r\n              (item) => item?.[searchKey] === searchValue\r\n            );\r\n\r\n            if (found) {\r\n              return rebuildStateShape({\r\n                path: [...path, found.key],\r\n                componentId: componentId!,\r\n                meta,\r\n              });\r\n            }\r\n\r\n            return rebuildStateShape({\r\n              path: [...path, `not_found_${uuidv4()}`],\r\n              componentId: componentId!,\r\n              meta,\r\n            });\r\n          };\r\n        }\r\n        if (prop === '$cutThis') {\r\n          const { value: shadowValue } = getScopedData(stateKey, path, meta);\r\n          const parentPath = path.slice(0, -1);\r\n          notifySelectionComponents(stateKey, parentPath);\r\n          return () => {\r\n            effectiveSetState(shadowValue, path, { updateType: 'cut' });\r\n          };\r\n        }\r\n\r\n        if (prop === '$get') {\r\n          return () => {\r\n            registerComponentDependency(stateKey, componentId, path);\r\n            const { value } = getScopedData(stateKey, path, meta);\r\n            return value;\r\n          };\r\n        }\r\n\r\n        if (prop === '$$derive') {\r\n          return (fn: any) =>\r\n            $cogsSignal({\r\n              _stateKey: stateKey,\r\n              _path: path,\r\n              _effect: fn.toString(),\r\n              _meta: meta,\r\n            });\r\n        }\r\n\r\n        if (prop === '$$get') {\r\n          return () =>\r\n            $cogsSignal({ _stateKey: stateKey, _path: path, _meta: meta });\r\n        }\r\n        if (prop === '$lastSynced') {\r\n          const syncKey = `${stateKey}:${path.join('.')}`;\r\n          return getSyncInfo(syncKey);\r\n        }\r\n        if (prop == 'getLocalStorage') {\r\n          return (key: string) =>\r\n            loadFromLocalStorage(sessionId + '-' + stateKey + '-' + key);\r\n        }\r\n        if (prop === '$isSelected') {\r\n          const parentPathArray = path.slice(0, -1);\r\n          const parentMeta = getShadowMetadata(stateKey, parentPathArray);\r\n\r\n          if (parentMeta?.arrayKeys) {\r\n            const fullParentKey = stateKey + '.' + parentPathArray.join('.');\r\n            const selectedItemKey = getGlobalStore\r\n              .getState()\r\n              .selectedIndicesMap.get(fullParentKey);\r\n\r\n            const fullItemKey = stateKey + '.' + path.join('.');\r\n\r\n            return selectedItemKey === fullItemKey;\r\n          }\r\n          return undefined;\r\n        }\r\n\r\n        if (prop === '$setSelected') {\r\n          return (value: boolean) => {\r\n            const parentPath = path.slice(0, -1);\r\n            const fullParentKey = stateKey + '.' + parentPath.join('.');\r\n            const fullItemKey = stateKey + '.' + path.join('.');\r\n\r\n            notifySelectionComponents(stateKey, parentPath, undefined);\r\n\r\n            const selectedIndex = getGlobalStore\r\n              .getState()\r\n              .selectedIndicesMap.get(fullParentKey);\r\n\r\n            if (value) {\r\n              getGlobalStore\r\n                .getState()\r\n                .setSelectedIndex(fullParentKey, fullItemKey);\r\n            }\r\n          };\r\n        }\r\n\r\n        if (prop === '$toggleSelected') {\r\n          return () => {\r\n            const parentPath = path.slice(0, -1);\r\n            const fullParentKey = stateKey + '.' + parentPath.join('.');\r\n            const fullItemKey = stateKey + '.' + path.join('.');\r\n\r\n            const currentSelected = getGlobalStore\r\n              .getState()\r\n              .selectedIndicesMap.get(fullParentKey);\r\n\r\n            if (currentSelected === fullItemKey) {\r\n              getGlobalStore\r\n                .getState()\r\n                .clearSelectedIndex({ arrayKey: fullParentKey });\r\n            } else {\r\n              getGlobalStore\r\n                .getState()\r\n                .setSelectedIndex(fullParentKey, fullItemKey);\r\n            }\r\n            notifySelectionComponents(stateKey, parentPath);\r\n          };\r\n        }\r\n        if (prop === '$_componentId') {\r\n          return componentId;\r\n        }\r\n        if (path.length == 0) {\r\n          if (prop === '$addZodValidation') {\r\n            return (\r\n              zodErrors: any[],\r\n              source: 'client' | 'sync_engine' | 'api'\r\n            ) => {\r\n              zodErrors.forEach((error) => {\r\n                const currentMeta =\r\n                  getGlobalStore\r\n                    .getState()\r\n                    .getShadowMetadata(stateKey, error.path) || {};\r\n\r\n                getGlobalStore\r\n                  .getState()\r\n                  .setShadowMetadata(stateKey, error.path, {\r\n                    ...currentMeta,\r\n                    validation: {\r\n                      status: 'INVALID',\r\n                      errors: [\r\n                        {\r\n                          source: source || 'client',\r\n                          message: error.message,\r\n                          severity: 'error',\r\n                          code: error.code,\r\n                        },\r\n                      ],\r\n                      lastValidated: Date.now(),\r\n                      validatedValue: undefined,\r\n                    },\r\n                  });\r\n              });\r\n            };\r\n          }\r\n          if (prop === '$clearZodValidation') {\r\n            return (path?: string[]) => {\r\n              if (!path) {\r\n                throw new Error('clearZodValidation requires a path');\r\n              }\r\n\r\n              const currentMeta = getShadowMetadata(stateKey, path) || {};\r\n\r\n              setShadowMetadata(stateKey, path, {\r\n                ...currentMeta,\r\n                validation: {\r\n                  status: 'NOT_VALIDATED',\r\n                  errors: [],\r\n                  lastValidated: Date.now(),\r\n                },\r\n              });\r\n            };\r\n          }\r\n\r\n          if (prop === '$applyOperation') {\r\n            return (operation: UpdateTypeDetail & { validation?: any[] }) => {\r\n              const validationErrorsFromServer = operation.validation || [];\r\n\r\n              if (!operation || !operation.path) {\r\n                console.error(\r\n                  'Invalid operation received by $applyOperation:',\r\n                  operation\r\n                );\r\n                return;\r\n              }\r\n\r\n              const updatePath = operation.path;\r\n\r\n              // Handle validation...\r\n              const currentMeta =\r\n                getGlobalStore\r\n                  .getState()\r\n                  .getShadowMetadata(stateKey, updatePath) || {};\r\n              const newErrors: ValidationError[] =\r\n                validationErrorsFromServer.map((err) => ({\r\n                  source: 'sync_engine',\r\n                  message: err.message,\r\n                  severity: 'warning',\r\n                  code: err.code,\r\n                }));\r\n\r\n              getGlobalStore\r\n                .getState()\r\n                .setShadowMetadata(stateKey, updatePath, {\r\n                  ...currentMeta,\r\n                  validation: {\r\n                    status: newErrors.length > 0 ? 'INVALID' : 'VALID',\r\n                    errors: newErrors,\r\n                    lastValidated: Date.now(),\r\n                  },\r\n                });\r\n\r\n              effectiveSetState(operation.newValue, updatePath, {\r\n                updateType: operation.updateType,\r\n                sync: false,\r\n                itemId: operation.itemId,\r\n              });\r\n            };\r\n          }\r\n          if (prop === '$applyJsonPatch') {\r\n            return (patches: Operation[]) => {\r\n              const store = getGlobalStore.getState();\r\n              const rootMeta = store.getShadowMetadata(stateKey, []);\r\n              if (!rootMeta?.components) return;\r\n\r\n              const convertPath = (jsonPath: string): string[] => {\r\n                if (!jsonPath || jsonPath === '/') return [];\r\n                return jsonPath\r\n                  .split('/')\r\n                  .slice(1)\r\n                  .map((p) => p.replace(/~1/g, '/').replace(/~0/g, '~'));\r\n              };\r\n\r\n              const notifiedComponents = new Set<string>();\r\n\r\n              for (const patch of patches) {\r\n                const relativePath = convertPath(patch.path);\r\n\r\n                switch (patch.op) {\r\n                  case 'add':\r\n                  case 'replace': {\r\n                    const { value } = patch as {\r\n                      op: 'add' | 'replace';\r\n                      path: string;\r\n                      value: any;\r\n                    };\r\n                    store.updateShadowAtPath(stateKey, relativePath, value);\r\n\r\n                    store.markAsDirty(stateKey, relativePath, { bubble: true });\r\n\r\n                    // Bubble up - notify components at this path and all parent paths\r\n                    let currentPath = [...relativePath];\r\n                    while (true) {\r\n                      const pathMeta = store.getShadowMetadata(\r\n                        stateKey,\r\n                        currentPath\r\n                      );\r\n\r\n                      if (pathMeta?.pathComponents) {\r\n                        pathMeta.pathComponents.forEach((componentId) => {\r\n                          if (!notifiedComponents.has(componentId)) {\r\n                            const component =\r\n                              rootMeta.components?.get(componentId);\r\n                            if (component) {\r\n                              component.forceUpdate();\r\n                              notifiedComponents.add(componentId);\r\n                            }\r\n                          }\r\n                        });\r\n                      }\r\n\r\n                      if (currentPath.length === 0) break;\r\n                      currentPath.pop(); // Go up one level\r\n                    }\r\n                    break;\r\n                  }\r\n                  case 'remove': {\r\n                    const parentPath = relativePath.slice(0, -1);\r\n                    store.removeShadowArrayElement(stateKey, relativePath);\r\n                    store.markAsDirty(stateKey, parentPath, { bubble: true });\r\n\r\n                    // Bubble up from parent path\r\n                    let currentPath = [...parentPath];\r\n                    while (true) {\r\n                      const pathMeta = store.getShadowMetadata(\r\n                        stateKey,\r\n                        currentPath\r\n                      );\r\n                      if (pathMeta?.pathComponents) {\r\n                        pathMeta.pathComponents.forEach((componentId) => {\r\n                          if (!notifiedComponents.has(componentId)) {\r\n                            const component =\r\n                              rootMeta.components?.get(componentId);\r\n                            if (component) {\r\n                              component.forceUpdate();\r\n                              notifiedComponents.add(componentId);\r\n                            }\r\n                          }\r\n                        });\r\n                      }\r\n\r\n                      if (currentPath.length === 0) break;\r\n                      currentPath.pop();\r\n                    }\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n            };\r\n          }\r\n\r\n          if (prop === '$getComponents')\r\n            return () => getShadowMetadata(stateKey, [])?.components;\r\n          if (prop === '$getAllFormRefs')\r\n            return () =>\r\n              formRefStore.getState().getFormRefsByStateKey(stateKey);\r\n        }\r\n        if (prop === '$getFormRef') {\r\n          return () =>\r\n            formRefStore.getState().getFormRef(stateKey + '.' + path.join('.'));\r\n        }\r\n        if (prop === '$validationWrapper') {\r\n          return ({\r\n            children,\r\n            hideMessage,\r\n          }: {\r\n            children: React.ReactNode;\r\n            hideMessage?: boolean;\r\n          }) => (\r\n            <ValidationWrapper\r\n              formOpts={\r\n                hideMessage ? { validation: { message: '' } } : undefined\r\n              }\r\n              path={path}\r\n              stateKey={stateKey}\r\n            >\r\n              {children}\r\n            </ValidationWrapper>\r\n          );\r\n        }\r\n        if (prop === '$_stateKey') return stateKey;\r\n        if (prop === '$_path') return path;\r\n        if (prop === '$update') {\r\n          return (payload: UpdateArg<T>) => {\r\n            effectiveSetState(payload as any, path, { updateType: 'update' });\r\n\r\n            return {\r\n              synced: () => {\r\n                const shadowMeta = getGlobalStore\r\n                  .getState()\r\n                  .getShadowMetadata(stateKey, path);\r\n\r\n                setShadowMetadata(stateKey, path, {\r\n                  ...shadowMeta,\r\n                  isDirty: false,\r\n                  stateSource: 'server',\r\n                  lastServerSync: Date.now(),\r\n                });\r\n\r\n                const fullPath = [stateKey, ...path].join('.');\r\n                notifyPathSubscribers(fullPath, {\r\n                  type: 'SYNC_STATUS_CHANGE',\r\n                  isDirty: false,\r\n                });\r\n              },\r\n            };\r\n          };\r\n        }\r\n        if (prop === '$toggle') {\r\n          const { value: currentValueAtPath } = getScopedData(\r\n            stateKey,\r\n            path,\r\n            meta\r\n          );\r\n\r\n          if (typeof currentValueAtPath != 'boolean') {\r\n            throw new Error('toggle() can only be used on boolean values');\r\n          }\r\n          return () => {\r\n            effectiveSetState(!currentValueAtPath as any, path, {\r\n              updateType: 'update',\r\n            });\r\n          };\r\n        }\r\n        if (prop === '$isolate') {\r\n          return (renderFn: (state: any) => React.ReactNode) => {\r\n            return (\r\n              <IsolatedComponentWrapper\r\n                stateKey={stateKey}\r\n                path={path}\r\n                rebuildStateShape={rebuildStateShape}\r\n                renderFn={renderFn}\r\n              />\r\n            );\r\n          };\r\n        }\r\n        if (prop === '$formElement') {\r\n          return (child: FormControl<T>, formOpts?: FormOptsType) => {\r\n            return (\r\n              <FormElementWrapper\r\n                stateKey={stateKey}\r\n                path={path}\r\n                rebuildStateShape={rebuildStateShape}\r\n                setState={effectiveSetState}\r\n                formOpts={formOpts}\r\n                renderFn={child as any}\r\n              />\r\n            );\r\n          };\r\n        }\r\n        const nextPath = [...path, prop];\r\n        return rebuildStateShape({\r\n          path: nextPath,\r\n          componentId: componentId!,\r\n          meta,\r\n        });\r\n      },\r\n    };\r\n\r\n    const proxyInstance = new Proxy({}, handler);\r\n    proxyCache.set(cacheKey, proxyInstance);\r\n\r\n    return proxyInstance;\r\n  }\r\n\r\n  const rootLevelMethods = {\r\n    $test: () => {\r\n      const shadow = shadowStateStore.get(stateKey);\r\n      console.log('test', shadow); //does nto ahve the data\r\n    },\r\n    $revertToInitialState: (obj?: { validationKey?: string }) => {\r\n      const shadowMeta = getGlobalStore\r\n        .getState()\r\n        .getShadowMetadata(stateKey, []);\r\n      let revertState;\r\n\r\n      if (shadowMeta?.stateSource === 'server' && shadowMeta.baseServerState) {\r\n        revertState = shadowMeta.baseServerState;\r\n      } else {\r\n        revertState = getGlobalStore.getState().initialStateGlobal[stateKey];\r\n      }\r\n\r\n      clearSelectedIndexesForState(stateKey);\r\n      initializeShadowState(stateKey, revertState);\r\n\r\n      rebuildStateShape({\r\n        path: [],\r\n        componentId: outerComponentId!,\r\n      });\r\n\r\n      // Handle localStorage side-effects\r\n      const initalOptionsGet = getInitialOptions(stateKey as string);\r\n      const localKey = isFunction(initalOptionsGet?.localStorage?.key)\r\n        ? initalOptionsGet?.localStorage?.key(revertState)\r\n        : initalOptionsGet?.localStorage?.key;\r\n      const storageKey = `${sessionId}-${stateKey}-${localKey}`;\r\n      if (storageKey) {\r\n        localStorage.removeItem(storageKey);\r\n      }\r\n\r\n      notifyComponents(stateKey);\r\n\r\n      return revertState;\r\n    },\r\n    $initializeAndMergeShadowState: (newState: T) => {\r\n      initializeAndMergeShadowState(stateKey, newState);\r\n    },\r\n    $updateInitialState: (newState: T) => {\r\n      stateVersion++;\r\n\r\n      const newUpdaterState = createProxyHandler(\r\n        stateKey,\r\n        effectiveSetState,\r\n        outerComponentId,\r\n        sessionId\r\n      );\r\n      const initialState =\r\n        getGlobalStore.getState().initialStateGlobal[stateKey];\r\n      const initalOptionsGet = getInitialOptions(stateKey as string);\r\n      const localKey = isFunction(initalOptionsGet?.localStorage?.key)\r\n        ? initalOptionsGet?.localStorage?.key(initialState)\r\n        : initalOptionsGet?.localStorage?.key;\r\n\r\n      const storageKey = `${sessionId}-${stateKey}-${localKey}`;\r\n\r\n      if (localStorage.getItem(storageKey)) {\r\n        localStorage.removeItem(storageKey);\r\n      }\r\n      startTransition(() => {\r\n        updateInitialStateGlobal(stateKey, newState);\r\n        initializeShadowState(stateKey, newState);\r\n        // initializeShadowStateNEW(stateKey, newState);\r\n\r\n        const stateEntry = getGlobalStore\r\n          .getState()\r\n          .getShadowMetadata(stateKey, []);\r\n\r\n        if (stateEntry) {\r\n          stateEntry?.components?.forEach((component) => {\r\n            component.forceUpdate();\r\n          });\r\n        }\r\n      });\r\n\r\n      return {\r\n        fetchId: (field: keyof T) => (newUpdaterState.$get() as any)[field],\r\n      };\r\n    },\r\n  };\r\n\r\n  const returnShape = rebuildStateShape({\r\n    componentId: outerComponentId,\r\n    path: [],\r\n  });\r\n\r\n  return returnShape;\r\n}\r\n\r\nexport function $cogsSignal(proxy: {\r\n  _path: string[];\r\n  _stateKey: string;\r\n  _effect?: string;\r\n\r\n  _meta?: MetaData;\r\n}) {\r\n  return createElement(SignalRenderer, { proxy });\r\n}\r\n\r\nfunction SignalRenderer({\r\n  proxy,\r\n}: {\r\n  proxy: {\r\n    _path: string[];\r\n    _stateKey: string;\r\n    _effect?: string;\r\n    _meta?: MetaData;\r\n  };\r\n}) {\r\n  const elementRef = useRef<HTMLSpanElement>(null);\r\n  const instanceIdRef = useRef<string | null>(null);\r\n  const isSetupRef = useRef(false);\r\n  const signalId = `${proxy._stateKey}-${proxy._path.join('.')}`;\r\n\r\n  const arrayPathKey = proxy._path.length > 0 ? proxy._path.join('.') : 'root';\r\n  const viewIds = proxy._meta?.arrayViews?.[arrayPathKey];\r\n\r\n  const value = getShadowValue(proxy._stateKey, proxy._path, viewIds);\r\n\r\n  useEffect(() => {\r\n    const element = elementRef.current;\r\n    if (!element || isSetupRef.current) return;\r\n\r\n    const timeoutId = setTimeout(() => {\r\n      if (!element.parentElement) {\r\n        console.warn('Parent element not found for signal', signalId);\r\n        return;\r\n      }\r\n\r\n      const parentElement = element.parentElement;\r\n      const childNodes = Array.from(parentElement.childNodes);\r\n      const position = childNodes.indexOf(element);\r\n\r\n      let parentId = parentElement.getAttribute('data-parent-id');\r\n      if (!parentId) {\r\n        parentId = `parent-${crypto.randomUUID()}`;\r\n        parentElement.setAttribute('data-parent-id', parentId);\r\n      }\r\n\r\n      instanceIdRef.current = `instance-${crypto.randomUUID()}`;\r\n\r\n      const currentMeta =\r\n        getGlobalStore\r\n          .getState()\r\n          .getShadowMetadata(proxy._stateKey, proxy._path) || {};\r\n      const signals = currentMeta.signals || [];\r\n      signals.push({\r\n        instanceId: instanceIdRef.current,\r\n        parentId,\r\n        position,\r\n        effect: proxy._effect,\r\n      });\r\n\r\n      getGlobalStore\r\n        .getState()\r\n        .setShadowMetadata(proxy._stateKey, proxy._path, {\r\n          ...currentMeta,\r\n          signals,\r\n        });\r\n\r\n      let displayValue = value;\r\n      if (proxy._effect) {\r\n        try {\r\n          displayValue = new Function(\r\n            'state',\r\n            `return (${proxy._effect})(state)`\r\n          )(value);\r\n        } catch (err) {\r\n          console.error('Error evaluating effect function:', err);\r\n        }\r\n      }\r\n\r\n      if (displayValue !== null && typeof displayValue === 'object') {\r\n        displayValue = JSON.stringify(displayValue);\r\n      }\r\n      const textNode = document.createTextNode(String(displayValue ?? ''));\r\n      element.replaceWith(textNode);\r\n      isSetupRef.current = true;\r\n    }, 0);\r\n\r\n    return () => {\r\n      clearTimeout(timeoutId);\r\n      if (instanceIdRef.current) {\r\n        const currentMeta =\r\n          getGlobalStore\r\n            .getState()\r\n            .getShadowMetadata(proxy._stateKey, proxy._path) || {};\r\n        if (currentMeta.signals) {\r\n          currentMeta.signals = currentMeta.signals.filter(\r\n            (s) => s.instanceId !== instanceIdRef.current\r\n          );\r\n          getGlobalStore\r\n            .getState()\r\n            .setShadowMetadata(proxy._stateKey, proxy._path, currentMeta);\r\n        }\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return createElement('span', {\r\n    ref: elementRef,\r\n    style: { display: 'contents' },\r\n    'data-signal-id': signalId,\r\n  });\r\n}\r\n"],"names":["getInitialOptions","updateInitialStateGlobal","getShadowMetadata","setShadowMetadata","getShadowValue","initializeShadowState","initializeAndMergeShadowState","updateShadowAtPath","insertShadowArrayElement","insertManyShadowArrayElements","removeShadowArrayElement","setInitialStateOptions","setServerStateUpdate","markAsDirty","addPathComponent","clearSelectedIndexesForState","addStateLog","setSyncInfo","clearSelectedIndex","getSyncInfo","notifyPathSubscribers","getGlobalStore","getArrayData","stateKey","path","meta","shadowMeta","arrayPathKey","viewIds","findArrayItem","array","keys","predicate","i","key","setAndMergeOptions","newOptions","initialOptions","setOptions","options","initialOptionsPart","mergedOptions","needToAdd","deepMerge","target","source","isDeepEqual","addStateOptions","initialState","formElements","validation","createCogsState","opt","newInitialState","statePart","transformStateFunc","existingOptions","existingGlobalOptions","useCogsState","componentId","useState","uuidv4","thiState","partialState","useCogsStateFn","setCogsOptions","loadAndApplyLocalStorage","notifyComponents","createCogsStateFromSync","syncSchema","useSync","schemas","apiParamsMap","entry","saveToLocalStorage","state","thisKey","currentInitialOptions","sessionId","lastSyncedWithServer","isFunction","storageKey","existingLastSynced","loadFromLocalStorage","data","superJsonResult","superjson","localStorageKey","storedData","error","currentState","useCogsConfig","localkey","localData","stateEntry","updates","component","update","markEntireStateAsServerSynced","timestamp","currentMeta","arrayMeta","itemKey","index","itemPath","itemData","fieldPath","fieldData","updateBatchQueue","isFlushScheduled","scheduleFlush","flushQueue","handleUpdate","payload","oldValue","newValue","newShadowMeta","updateSignals","displayValue","parentId","position","effect","parent","childNodes","finalDisplayValue","err","getComponentNotifications","result","rootMeta","componentsToNotify","notificationPath","currentPath","pathMeta","reactiveTypes","newDeps","handleInsert","itemId","currentValue","getScopedData","actualItemId","updatedMeta","insertAfterId","handleCut","parentArrayPath","allComponentsToNotify","signalUpdates","logsToAdd","item","createEffectiveSetState","syncApiRef","latestInitialOptionsRef","newStateOrFunction","updateObj","validationKey","executeUpdate","newUpdate","stateObject","localStorage","reactiveDeps","reactiveType","defaultState","syncUpdate","dependencies","serverState","__useSync","reactiveForce","forceUpdate","noStateKey","componentIdRef","useRef","useEffect","syncKey","resolveInitialState","useCallback","overrideOptions","currentOptions","finalDefaultState","localKey","event","serverStateData","mergeConfig","incomingData","keyField","existingIds","newUniqueItems","finalState","existingMeta","features","cogsSyncFn","syncOpt","resolvedState","useLayoutEffect","componentKey","components","fullPath","effectiveSetState","updaterFinal","useMemo","createProxyHandler","applyTransforms","ids","transforms","transform","filtered","id","value","a","b","aValue","bValue","registerComponentDependency","dependencyPath","fullComponentId","notifySelectionComponents","parentPath","currentSelected","notifiedComponents","parentMeta","arrayKey","selectedItem","arrayKeys","outerComponentId","proxyCache","rebuildStateShape","derivationSignature","cacheKey","stateKeyPathKey","handler","prop","rootLevelMethods","nextPath","sync","response","getStatusFunc","initalOptionsGet","selectedItemKey","viewKey","currentViewIds","selectedItemId","selectedId","itemHeight","overscan","stickToBottom","scrollStickTolerance","containerRef","range","setRange","rerender","initialScrollRef","interval","scrollStateRef","measurementCache","unsubscribe","e","container","waitForContainer","visibleCount","endIndex","startIndex","scrollToBottom","rangeRef","arrayKeysRef","handleScroll","currentScrollTop","scrollHeight","clientHeight","scrollState","distanceFromBottom","wasNearBottom","newStartIndex","behavior","performScroll","attemptScroll","attempts","currentHeight","currentScroll","newHeight","newScroll","scrollTimeout","debouncedScrollToBottom","observer","slicedKeys","arrayPath","offset","callbackfn","shadowValue","arraySetter","_item","itemSetter","filteredIds","compareFn","currentArray","itemsWithIds","sortedIds","bufferSize","flushInterval","bufferStrategy","store","onFlush","buffer","isPaused","flushTimer","addToBuffer","flushBuffer","toFlush","streamId","streams","componentIdsRef","updateTrigger","validIds","arrayValues","caches","returnValue","localIndex","itemComponentId","createElement","MemoizedCogsItemWrapper","fieldName","lastItemKey","newPath","fields","onMatch","matchedItem","isMatch","field","updatedItem","updatedArray","indexToCut","idToCut","pathForCut","isArray","found","pathForItem","searchKey","searchValue","fn","$cogsSignal","parentPathArray","fullParentKey","fullItemKey","zodErrors","operation","validationErrorsFromServer","updatePath","newErrors","patches","convertPath","jsonPath","p","patch","relativePath","formRefStore","children","hideMessage","jsx","ValidationWrapper","currentValueAtPath","renderFn","IsolatedComponentWrapper","child","formOpts","FormElementWrapper","proxyInstance","shadow","shadowStateStore","obj","revertState","newState","newUpdaterState","startTransition","proxy","SignalRenderer","elementRef","instanceIdRef","isSetupRef","signalId","element","timeoutId","parentElement","signals","textNode","s"],"mappings":"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"}