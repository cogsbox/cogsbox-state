{"version":3,"file":"CogsState.jsx","sources":["../src/CogsState.tsx"],"sourcesContent":["'use client';\r\n\r\nimport {\r\n  createElement,\r\n  memo,\r\n  startTransition,\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n  type CSSProperties,\r\n  type ReactNode,\r\n  type RefObject,\r\n} from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport {\r\n  getDifferences,\r\n  isArray,\r\n  isFunction,\r\n  type GenericObject,\r\n} from './utility.js';\r\nimport { ValidationWrapper } from './Functions.js';\r\nimport { isDeepEqual, transformStateFunc } from './utility.js';\r\nimport superjson from 'superjson';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport {\r\n  buildShadowNode,\r\n  formRefStore,\r\n  getGlobalStore,\r\n  METADATA_KEYS,\r\n  ValidationError,\r\n  ValidationStatus,\r\n  type ComponentsType,\r\n} from './store.js';\r\nimport { useCogsConfig } from './CogsStateClient.js';\r\nimport { Operation } from 'fast-json-patch';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport * as z3 from 'zod/v3';\r\nimport * as z4 from 'zod/v4';\r\n\r\ntype Prettify<T> = T extends any ? { [K in keyof T]: T[K] } : never;\r\n\r\nexport type VirtualViewOptions = {\r\n  itemHeight?: number;\r\n  overscan?: number;\r\n  stickToBottom?: boolean;\r\n  dependencies?: any[];\r\n  scrollStickTolerance?: number;\r\n};\r\n\r\n// The result now returns a real StateObject\r\nexport type VirtualStateObjectResult<T extends any[]> = {\r\n  /**\r\n   * A new, fully-functional StateObject that represents the virtualized slice.\r\n   * You can use `.get()`, `.stateMap()`, `.insert()`, `.cut()` etc. on this object.\r\n   */\r\n\r\n  virtualState: StateObject<T>;\r\n  /**\r\n   * Props to be spread onto your DOM elements to enable virtualization.\r\n   */\r\n  virtualizerProps: {\r\n    outer: { ref: RefObject<HTMLDivElement>; style: CSSProperties };\r\n    inner: { style: CSSProperties };\r\n    list: { style: CSSProperties };\r\n  };\r\n  scrollToBottom: (behavior?: ScrollBehavior) => void;\r\n  scrollToIndex: (index: number, behavior?: ScrollBehavior) => void;\r\n};\r\n\r\nexport type SyncInfo = {\r\n  timeStamp: number;\r\n  userId: number;\r\n};\r\n\r\nexport type FormElementParams<T> = StateObject<T> & {\r\n  inputProps: {\r\n    ref?: React.RefObject<any>;\r\n    value?: T extends boolean ? never : T;\r\n    onChange?: (\r\n      event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n    ) => void;\r\n    onBlur?: () => void;\r\n  };\r\n};\r\n\r\nexport type StateKeys = string;\r\n\r\ntype findWithFuncType<U> = (\r\n  thisKey: keyof U,\r\n  thisValue: U[keyof U]\r\n) => EndType<U> & StateObject<U>;\r\n\r\ntype CutFunctionType<T> = (\r\n  index?: number,\r\n  options?: { waitForSync?: boolean }\r\n) => StateObject<T>;\r\n\r\nexport type InferArrayElement<T> = T extends (infer U)[] ? U : never;\r\ntype ArraySpecificPrototypeKeys =\r\n  | 'concat'\r\n  | 'copyWithin'\r\n  | 'fill'\r\n  | 'find'\r\n  | 'findIndex'\r\n  | 'flat'\r\n  | 'flatMap'\r\n  | 'includes'\r\n  | 'indexOf'\r\n  | 'join'\r\n  | 'keys'\r\n  | 'lastIndexOf'\r\n  | 'map'\r\n  | 'pop'\r\n  | 'push'\r\n  | 'reduce'\r\n  | 'reduceRight'\r\n  | 'reverse'\r\n  | 'shift'\r\n  | 'slice'\r\n  | 'some'\r\n  | 'sort'\r\n  | 'splice'\r\n  | 'unshift'\r\n  | 'values'\r\n  | 'entries'\r\n  | 'every'\r\n  | 'filter'\r\n  | 'forEach'\r\n  | 'with';\r\nexport type StreamOptions<T, R = T> = {\r\n  bufferSize?: number;\r\n  flushInterval?: number;\r\n  bufferStrategy?: 'sliding' | 'dropping' | 'accumulate';\r\n  store?: (buffer: T[]) => R | R[];\r\n  onFlush?: (buffer: T[]) => void;\r\n};\r\n\r\nexport type StreamHandle<T> = {\r\n  write: (data: T) => void;\r\n  writeMany: (data: T[]) => void;\r\n  flush: () => void;\r\n  close: () => void;\r\n  pause: () => void;\r\n  resume: () => void;\r\n};\r\nexport type ArrayEndType<TShape extends unknown> = {\r\n  stream: <T = Prettify<InferArrayElement<TShape>>, R = T>(\r\n    options?: StreamOptions<T, R>\r\n  ) => StreamHandle<T>;\r\n  findWith: findWithFuncType<Prettify<InferArrayElement<TShape>>>;\r\n  index: (index: number) => StateObject<Prettify<InferArrayElement<TShape>>> & {\r\n    insert: InsertTypeObj<Prettify<InferArrayElement<TShape>>>;\r\n    cut: CutFunctionType<TShape>;\r\n    _index: number;\r\n  } & EndType<Prettify<InferArrayElement<TShape>>>;\r\n  insert: InsertType<Prettify<InferArrayElement<TShape>>>;\r\n  cut: CutFunctionType<TShape>;\r\n  cutSelected: () => void;\r\n  cutByValue: (value: string | number | boolean) => void;\r\n  toggleByValue: (value: string | number | boolean) => void;\r\n  stateSort: (\r\n    compareFn: (\r\n      a: Prettify<InferArrayElement<TShape>>,\r\n      b: Prettify<InferArrayElement<TShape>>\r\n    ) => number\r\n  ) => ArrayEndType<TShape>;\r\n  useVirtualView: (\r\n    options: VirtualViewOptions\r\n  ) => VirtualStateObjectResult<Prettify<InferArrayElement<TShape>>[]>;\r\n\r\n  stateList: (\r\n    callbackfn: (\r\n      setter: StateObject<Prettify<InferArrayElement<TShape>>>,\r\n      index: number,\r\n      arraySetter: StateObject<TShape>\r\n    ) => void\r\n  ) => any;\r\n  stateMap: <U>(\r\n    callbackfn: (\r\n      setter: StateObject<Prettify<InferArrayElement<TShape>>>,\r\n      index: number,\r\n      arraySetter: StateObject<TShape>\r\n    ) => U\r\n  ) => U[];\r\n  $stateMap: (\r\n    callbackfn: (\r\n      setter: StateObject<Prettify<InferArrayElement<TShape>>>,\r\n      index: number,\r\n      arraySetter: StateObject<TShape>\r\n    ) => void\r\n  ) => any;\r\n  stateFlattenOn: <K extends keyof Prettify<InferArrayElement<TShape>>>(\r\n    field: K\r\n  ) => StateObject<InferArrayElement<Prettify<InferArrayElement<TShape>>[K]>[]>;\r\n  uniqueInsert: (\r\n    payload: InsertParams<Prettify<InferArrayElement<TShape>>>,\r\n    fields?: (keyof Prettify<InferArrayElement<TShape>>)[],\r\n    onMatch?: (existingItem: any) => any\r\n  ) => void;\r\n  stateFind: (\r\n    callbackfn: (\r\n      value: Prettify<InferArrayElement<TShape>>,\r\n      index: number\r\n    ) => boolean\r\n  ) => StateObject<Prettify<InferArrayElement<TShape>>> | undefined;\r\n  stateFilter: (\r\n    callbackfn: (\r\n      value: Prettify<InferArrayElement<TShape>>,\r\n      index: number\r\n    ) => void\r\n  ) => ArrayEndType<TShape>;\r\n  getSelected: () =>\r\n    | StateObject<Prettify<InferArrayElement<TShape>>>\r\n    | undefined;\r\n  clearSelected: () => void;\r\n  getSelectedIndex: () => number;\r\n  last: () => StateObject<Prettify<InferArrayElement<TShape>>> | undefined;\r\n} & EndType<TShape>;\r\n\r\nexport type FormOptsType = {\r\n  validation?: {\r\n    hideMessage?: boolean;\r\n    message?: string;\r\n\r\n    props?: GenericObject;\r\n    disable?: boolean;\r\n  };\r\n\r\n  debounceTime?: number;\r\n  sync?: {\r\n    allowInvalidValues?: boolean; // default: false\r\n  };\r\n};\r\n\r\nexport type FormControl<T> = (obj: FormElementParams<T>) => JSX.Element;\r\n\r\nexport type UpdateArg<S> = S | ((prevState: S) => S);\r\nexport type InsertParams<S> =\r\n  | S\r\n  | ((prevState: { state: S; uuid: string }) => S);\r\nexport type UpdateType<T> = (payload: UpdateArg<T>) => { synced: () => void };\r\n\r\nexport type InsertType<T> = (payload: InsertParams<T>, index?: number) => void;\r\nexport type InsertTypeObj<T> = (payload: InsertParams<T>) => void;\r\n\r\ntype EffectFunction<T, R> = (state: T, deps: any[]) => R;\r\nexport type EndType<T, IsArrayElement = false> = {\r\n  addZodValidation: (errors: ValidationError[]) => void;\r\n  clearZodValidation: (paths?: string[]) => void;\r\n  applyJsonPatch: (patches: any[]) => void;\r\n  update: UpdateType<T>;\r\n  _path: string[];\r\n  _stateKey: string;\r\n  formElement: (control: FormControl<T>, opts?: FormOptsType) => JSX.Element;\r\n  get: () => T;\r\n\r\n  $get: () => T;\r\n  $derive: <R>(fn: EffectFunction<T, R>) => R;\r\n\r\n  _status: 'fresh' | 'dirty' | 'synced' | 'restored' | 'unknown';\r\n  getStatus: () => 'fresh' | 'dirty' | 'synced' | 'restored' | 'unknown';\r\n\r\n  showValidationErrors: () => string[];\r\n  setValidation: (ctx: string) => void;\r\n  removeValidation: (ctx: string) => void;\r\n  ignoreFields: (fields: string[]) => StateObject<T>;\r\n  isSelected: boolean;\r\n  setSelected: (value: boolean) => void;\r\n  toggleSelected: () => void;\r\n  getFormRef: () => React.RefObject<any> | undefined;\r\n  removeStorage: () => void;\r\n  sync: () => void;\r\n  validationWrapper: ({\r\n    children,\r\n    hideMessage,\r\n  }: {\r\n    children: React.ReactNode;\r\n    hideMessage?: boolean;\r\n  }) => JSX.Element;\r\n  lastSynced?: SyncInfo;\r\n} & (IsArrayElement extends true ? { cutThis: () => void } : {});\r\n\r\nexport type StateObject<T> = (T extends any[]\r\n  ? ArrayEndType<T>\r\n  : T extends Record<string, unknown> | object\r\n    ? { [K in keyof T]-?: StateObject<T[K]> }\r\n    : T extends string | number | boolean | null\r\n      ? EndType<T, true>\r\n      : never) &\r\n  EndType<T, true> & {\r\n    toggle: T extends boolean ? () => void : never;\r\n    getAllFormRefs: () => Map<string, React.RefObject<any>>;\r\n    _componentId: string | null;\r\n    getComponents: () => ComponentsType;\r\n\r\n    _initialState: T;\r\n    updateInitialState: (newState: T | null) => {\r\n      fetchId: (field: keyof T) => string | number;\r\n    };\r\n    _isLoading: boolean;\r\n    _serverState: T;\r\n    revertToInitialState: (obj?: { validationKey?: string }) => T;\r\n    getDifferences: () => string[];\r\n    middleware: (\r\n      middles: ({\r\n        updateLog,\r\n        update,\r\n      }: {\r\n        updateLog: UpdateTypeDetail[] | undefined;\r\n        update: UpdateTypeDetail;\r\n      }) => void\r\n    ) => void;\r\n\r\n    getLocalStorage: (key: string) => LocalStorageData<T> | null;\r\n  };\r\n\r\nexport type CogsUpdate<T extends unknown> = UpdateType<T>;\r\ntype EffectiveSetStateArg<\r\n  T,\r\n  UpdateType extends 'update' | 'insert' | 'cut',\r\n> = UpdateType extends 'insert'\r\n  ? T extends any[]\r\n    ? InsertParams<InferArrayElement<T>>\r\n    : never\r\n  : UpdateArg<T>;\r\ntype UpdateOptions = {\r\n  updateType: 'insert' | 'cut' | 'update';\r\n\r\n  sync?: boolean;\r\n};\r\ntype EffectiveSetState<TStateObject> = (\r\n  newStateOrFunction:\r\n    | EffectiveSetStateArg<TStateObject, 'update'>\r\n    | EffectiveSetStateArg<TStateObject, 'insert'>\r\n    | null,\r\n  path: string[],\r\n  updateObj: UpdateOptions,\r\n  validationKey?: string\r\n) => void;\r\n\r\nexport type UpdateTypeDetail = {\r\n  timeStamp: number;\r\n  stateKey: string;\r\n  updateType: 'update' | 'insert' | 'cut';\r\n  path: string[];\r\n  status: 'new' | 'sent' | 'synced';\r\n  oldValue: any;\r\n  newValue: any;\r\n  userId?: number;\r\n};\r\n\r\nexport type ReactivityUnion = 'none' | 'component' | 'deps' | 'all';\r\nexport type ReactivityType =\r\n  | 'none'\r\n  | 'component'\r\n  | 'deps'\r\n  | 'all'\r\n  | Array<Prettify<'none' | 'component' | 'deps' | 'all'>>;\r\n\r\n// Define the return type of the sync hook locally\r\ntype SyncApi = {\r\n  updateState: (data: { operation: any }) => void;\r\n  connected: boolean;\r\n  clientId: string | null;\r\n  subscribers: string[];\r\n};\r\ntype ValidationOptionsType = {\r\n  key?: string;\r\n  zodSchemaV3?: z3.ZodType<any, any, any>;\r\n  zodSchemaV4?: z4.ZodType<any, any, any>;\r\n\r\n  onBlur?: boolean;\r\n};\r\ntype UseSyncType<T> = (state: T, a: SyncOptionsType<any>) => SyncApi;\r\ntype SyncOptionsType<TApiParams> = {\r\n  apiParams: TApiParams;\r\n  stateKey?: string;\r\n  stateRoom:\r\n    | number\r\n    | string\r\n    | (({ clientId }: { clientId: string }) => string | null);\r\n  connect?: boolean;\r\n  inMemoryState?: boolean;\r\n};\r\nexport type OptionsType<T extends unknown = unknown, TApiParams = never> = {\r\n  log?: boolean;\r\n  componentId?: string;\r\n  syncOptions?: SyncOptionsType<TApiParams>;\r\n\r\n  validation?: ValidationOptionsType;\r\n  serverState?: {\r\n    id?: string | number;\r\n    data?: T;\r\n    status?: 'pending' | 'error' | 'success' | 'loading';\r\n    timestamp?: number;\r\n    merge?:\r\n      | boolean\r\n      | {\r\n          strategy: 'append' | 'prepend' | 'diff';\r\n          key?: string;\r\n        };\r\n  };\r\n\r\n  sync?: {\r\n    action: (state: T) => Promise<{\r\n      success: boolean;\r\n      data?: any;\r\n      error?: any;\r\n      errors?: Array<{\r\n        path: (string | number)[];\r\n        message: string;\r\n      }>;\r\n    }>;\r\n    onSuccess?: (data: any) => void;\r\n    onError?: (error: any) => void;\r\n  };\r\n  middleware?: ({ update }: { update: UpdateTypeDetail }) => void;\r\n\r\n  modifyState?: (state: T) => T;\r\n  localStorage?: {\r\n    key: string | ((state: T) => string);\r\n    onChange?: (state: T) => void;\r\n  };\r\n  formElements?: FormsElementsType<T>;\r\n\r\n  reactiveDeps?: (state: T) => any[] | true;\r\n  reactiveType?: ReactivityType;\r\n  syncUpdate?: Partial<UpdateTypeDetail>;\r\n\r\n  defaultState?: T;\r\n\r\n  dependencies?: any[];\r\n};\r\n\r\nexport type SyncRenderOptions<T extends unknown = unknown> = {\r\n  children: React.ReactNode;\r\n  time: number;\r\n  data?: T;\r\n  key?: string;\r\n};\r\n\r\ntype FormsElementsType<T> = {\r\n  validation?: (options: {\r\n    children: React.ReactNode;\r\n    status: ValidationStatus; // Instead of 'active' boolean\r\n\r\n    hasErrors: boolean;\r\n    hasWarnings: boolean;\r\n    allErrors: ValidationError[];\r\n\r\n    path: string[];\r\n    message?: string;\r\n    getData?: () => T;\r\n  }) => React.ReactNode;\r\n  syncRender?: (options: SyncRenderOptions<T>) => React.ReactNode;\r\n};\r\n\r\nexport type InitialStateInnerType<T extends unknown = unknown> = {\r\n  initialState: T;\r\n} & OptionsType<T>;\r\n\r\nexport type InitialStateType<T> = {\r\n  [key: string]: InitialStateInnerType<T>;\r\n};\r\n\r\nexport type AllStateTypes<T extends unknown> = Record<string, T>;\r\n\r\nexport type CogsInitialState<T> = {\r\n  initialState: T;\r\n  formElements?: FormsElementsType<T>;\r\n};\r\n\r\nexport type TransformedStateType<T> = {\r\n  [P in keyof T]: T[P] extends CogsInitialState<infer U> ? U : T[P];\r\n};\r\n\r\nconst {\r\n  getInitialOptions,\r\n  updateInitialStateGlobal,\r\n  // ALIAS THE NEW FUNCTIONS TO THE OLD NAMES\r\n  getShadowMetadata,\r\n  setShadowMetadata,\r\n  getShadowValue,\r\n  initializeShadowState,\r\n  updateShadowAtPath,\r\n  insertShadowArrayElement,\r\n  removeShadowArrayElement,\r\n  getSelectedIndex,\r\n  setInitialStateOptions,\r\n  setServerStateUpdate,\r\n  markAsDirty,\r\n  registerComponent,\r\n  unregisterComponent,\r\n  addPathComponent,\r\n  clearSelectedIndexesForState,\r\n  addStateLog,\r\n  setSyncInfo,\r\n  clearSelectedIndex,\r\n  getSyncInfo,\r\n  notifyPathSubscribers,\r\n  subscribeToPath,\r\n  // Note: The old functions are no longer imported under their original names\r\n} = getGlobalStore.getState();\r\n\r\nfunction getArrayData(stateKey: string, path: string[], meta?: MetaData) {\r\n  const shadowNode = getShadowMetadata(stateKey, path);\r\n  console.log('shadowNode', shadowNode, meta);\r\n  if (shadowNode && 'value' in shadowNode) {\r\n    return { isArray: false, value: shadowNode.value, keys: [] };\r\n  }\r\n\r\n  const arrayPathKey = path.join('.');\r\n  const viewIds = meta?.arrayViews?.[arrayPathKey] ?? shadowNode?.arrayKeys;\r\n\r\n  const value = getGlobalStore\r\n    .getState()\r\n    .getShadowValue(stateKey, path, viewIds);\r\n\r\n  if (!Array.isArray(value)) {\r\n    return { isArray: false, value, keys: [] };\r\n  }\r\n\r\n  return { isArray: true, value, keys: viewIds ?? [] };\r\n}\r\n\r\nfunction findArrayItem(\r\n  array: any[],\r\n  keys: string[],\r\n  predicate: (item: any, index: number) => boolean\r\n): { key: string; index: number; value: any } | null {\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (predicate(array[i], i)) {\r\n      const key = keys[i];\r\n      if (key) {\r\n        return { key, index: i, value: array[i] };\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction setAndMergeOptions(stateKey: string, newOptions: OptionsType<any>) {\r\n  const initialOptions = getInitialOptions(stateKey as string) || {};\r\n\r\n  setInitialStateOptions(stateKey as string, {\r\n    ...initialOptions,\r\n    ...newOptions,\r\n  });\r\n}\r\nfunction setOptions<StateKey, Opt>({\r\n  stateKey,\r\n  options,\r\n  initialOptionsPart,\r\n}: {\r\n  stateKey: StateKey;\r\n  options?: OptionsType<any>;\r\n  initialOptionsPart: Record<string, any>;\r\n}) {\r\n  const initialOptions = getInitialOptions(stateKey as string) || {};\r\n  const initialOptionsPartState = initialOptionsPart[stateKey as string] || {};\r\n\r\n  const mergedOptions = { ...initialOptionsPartState, ...initialOptions };\r\n\r\n  let needToAdd = false;\r\n  if (options) {\r\n    for (const key in options) {\r\n      if (!mergedOptions.hasOwnProperty(key)) {\r\n        needToAdd = true;\r\n        mergedOptions[key] = options[key as keyof typeof options];\r\n      } else {\r\n        if (\r\n          key == 'localStorage' &&\r\n          options[key] &&\r\n          mergedOptions[key].key !== options[key]?.key\r\n        ) {\r\n          needToAdd = true;\r\n          mergedOptions[key] = options[key];\r\n        }\r\n        if (\r\n          key == 'defaultState' &&\r\n          options[key] &&\r\n          mergedOptions[key] !== options[key] &&\r\n          !isDeepEqual(mergedOptions[key], options[key])\r\n        ) {\r\n          needToAdd = true;\r\n          mergedOptions[key] = options[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Always preserve syncOptions if it exists in mergedOptions but not in options\r\n  if (\r\n    mergedOptions.syncOptions &&\r\n    (!options || !options.hasOwnProperty('syncOptions'))\r\n  ) {\r\n    needToAdd = true;\r\n  }\r\n\r\n  if (needToAdd) {\r\n    setInitialStateOptions(stateKey as string, mergedOptions);\r\n  }\r\n}\r\n\r\nexport function addStateOptions<T extends unknown>(\r\n  initialState: T,\r\n  { formElements, validation }: OptionsType<T>\r\n) {\r\n  return { initialState: initialState, formElements, validation } as T;\r\n}\r\n\r\n// Define the type for the options setter using the Transformed state\r\ntype SetCogsOptionsFunc<T extends Record<string, any>> = <\r\n  StateKey extends keyof TransformedStateType<T>,\r\n>(\r\n  stateKey: StateKey,\r\n  options: OptionsType<TransformedStateType<T>[StateKey]>\r\n) => void;\r\n\r\nexport const createCogsState = <State extends Record<StateKeys, unknown>>(\r\n  initialState: State,\r\n  opt?: {\r\n    formElements?: FormsElementsType<State>;\r\n    validation?: ValidationOptionsType;\r\n    __fromSyncSchema?: boolean;\r\n    __syncNotifications?: Record<string, Function>;\r\n    __apiParamsMap?: Record<string, any>;\r\n    __useSync?: UseSyncType<State>;\r\n    __syncSchemas?: Record<string, any>;\r\n  }\r\n) => {\r\n  let newInitialState = initialState;\r\n  const [statePart, initialOptionsPart] =\r\n    transformStateFunc<State>(newInitialState);\r\n\r\n  if (opt?.__fromSyncSchema && opt?.__syncNotifications) {\r\n    getGlobalStore\r\n      .getState()\r\n      .setInitialStateOptions('__notifications', opt.__syncNotifications);\r\n  }\r\n\r\n  if (opt?.__fromSyncSchema && opt?.__apiParamsMap) {\r\n    getGlobalStore\r\n      .getState()\r\n      .setInitialStateOptions('__apiParamsMap', opt.__apiParamsMap);\r\n  }\r\n\r\n  Object.keys(statePart).forEach((key) => {\r\n    let existingOptions = initialOptionsPart[key] || {};\r\n\r\n    const mergedOptions: any = {\r\n      ...existingOptions,\r\n    };\r\n\r\n    if (opt?.formElements) {\r\n      mergedOptions.formElements = {\r\n        ...opt.formElements,\r\n        ...(existingOptions.formElements || {}),\r\n      };\r\n    }\r\n\r\n    if (opt?.validation) {\r\n      mergedOptions.validation = {\r\n        ...opt.validation,\r\n        ...(existingOptions.validation || {}),\r\n      };\r\n\r\n      if (opt.validation.key && !existingOptions.validation?.key) {\r\n        mergedOptions.validation.key = `${opt.validation.key}.${key}`;\r\n      }\r\n    }\r\n    if (opt?.__syncSchemas?.[key]?.schemas?.validation) {\r\n      mergedOptions.validation = {\r\n        zodSchemaV4: opt.__syncSchemas[key].schemas.validation,\r\n        ...existingOptions.validation,\r\n      };\r\n    }\r\n    if (Object.keys(mergedOptions).length > 0) {\r\n      const existingGlobalOptions = getInitialOptions(key);\r\n\r\n      if (!existingGlobalOptions) {\r\n        setInitialStateOptions(key, mergedOptions);\r\n      } else {\r\n        // Merge with existing global options\r\n        setInitialStateOptions(key, {\r\n          ...existingGlobalOptions,\r\n          ...mergedOptions,\r\n        });\r\n      }\r\n    }\r\n  });\r\n\r\n  Object.keys(statePart).forEach((key) => {\r\n    initializeShadowState(key, statePart[key]);\r\n  });\r\n  console.log('new stateObject ', getGlobalStore.getState().shadowStateStore);\r\n  type StateKeys = keyof typeof statePart;\r\n\r\n  const useCogsState = <StateKey extends StateKeys>(\r\n    stateKey: StateKey,\r\n    options?: Prettify<OptionsType<(typeof statePart)[StateKey]>>\r\n  ) => {\r\n    const [componentId] = useState(options?.componentId ?? uuidv4());\r\n\r\n    setOptions({\r\n      stateKey,\r\n      options,\r\n      initialOptionsPart,\r\n    });\r\n    const thiState =\r\n      getShadowValue(stateKey as string, []) || statePart[stateKey as string];\r\n    const partialState = options?.modifyState\r\n      ? options.modifyState(thiState)\r\n      : thiState;\r\n\r\n    const updater = useCogsStateFn<(typeof statePart)[StateKey]>(partialState, {\r\n      stateKey: stateKey as string,\r\n      syncUpdate: options?.syncUpdate,\r\n      componentId,\r\n      localStorage: options?.localStorage,\r\n      middleware: options?.middleware,\r\n      reactiveType: options?.reactiveType,\r\n      reactiveDeps: options?.reactiveDeps,\r\n      defaultState: options?.defaultState as any,\r\n      dependencies: options?.dependencies,\r\n      serverState: options?.serverState,\r\n      syncOptions: options?.syncOptions,\r\n      __useSync: opt?.__useSync as UseSyncType<(typeof statePart)[StateKey]>,\r\n    });\r\n\r\n    return updater;\r\n  };\r\n\r\n  function setCogsOptions<StateKey extends StateKeys>(\r\n    stateKey: StateKey,\r\n    options: OptionsType<(typeof statePart)[StateKey]>\r\n  ) {\r\n    setOptions({ stateKey, options, initialOptionsPart });\r\n\r\n    if (options.localStorage) {\r\n      loadAndApplyLocalStorage(stateKey as string, options);\r\n    }\r\n\r\n    notifyComponents(stateKey as string);\r\n  }\r\n\r\n  return { useCogsState, setCogsOptions } as CogsApi<State, never>;\r\n};\r\ntype UseCogsStateHook<\r\n  T extends Record<string, any>,\r\n  TApiParamsMap extends Record<string, any> = never,\r\n> = <StateKey extends keyof TransformedStateType<T> & string>(\r\n  stateKey: StateKey,\r\n  options?: [TApiParamsMap] extends [never]\r\n    ? // When TApiParamsMap is never (no sync)\r\n      Prettify<OptionsType<TransformedStateType<T>[StateKey]>>\r\n    : // When TApiParamsMap exists (sync enabled)\r\n      StateKey extends keyof TApiParamsMap\r\n      ? Prettify<\r\n          OptionsType<\r\n            TransformedStateType<T>[StateKey],\r\n            TApiParamsMap[StateKey]\r\n          > & {\r\n            syncOptions: Prettify<SyncOptionsType<TApiParamsMap[StateKey]>>;\r\n          }\r\n        >\r\n      : Prettify<OptionsType<TransformedStateType<T>[StateKey]>>\r\n) => StateObject<TransformedStateType<T>[StateKey]>;\r\n\r\n// Update CogsApi to default to never instead of Record<string, never>\r\ntype CogsApi<\r\n  T extends Record<string, any>,\r\n  TApiParamsMap extends Record<string, any> = never,\r\n> = {\r\n  useCogsState: UseCogsStateHook<T, TApiParamsMap>;\r\n  setCogsOptions: SetCogsOptionsFunc<T>;\r\n};\r\ntype GetParamType<SchemaEntry> = SchemaEntry extends {\r\n  api?: { queryData?: { _paramType?: infer P } };\r\n}\r\n  ? P\r\n  : never;\r\n\r\nexport function createCogsStateFromSync<\r\n  TSyncSchema extends {\r\n    schemas: Record<\r\n      string,\r\n      {\r\n        schemas: { defaultValues: any };\r\n        api?: {\r\n          queryData?: any;\r\n        };\r\n        [key: string]: any;\r\n      }\r\n    >;\r\n    notifications: Record<string, any>;\r\n  },\r\n>(\r\n  syncSchema: TSyncSchema,\r\n  useSync: UseSyncType<any>\r\n): CogsApi<\r\n  {\r\n    [K in keyof TSyncSchema['schemas']]: TSyncSchema['schemas'][K]['schemas']['defaultValues'];\r\n  },\r\n  {\r\n    [K in keyof TSyncSchema['schemas']]: GetParamType<\r\n      TSyncSchema['schemas'][K]\r\n    >;\r\n  }\r\n> {\r\n  const schemas = syncSchema.schemas;\r\n  const initialState: any = {};\r\n  const apiParamsMap: any = {};\r\n\r\n  // Extract defaultValues AND apiParams from each entry\r\n  for (const key in schemas) {\r\n    const entry = schemas[key];\r\n    initialState[key] = entry?.schemas?.defaultValues || {};\r\n\r\n    // Extract apiParams from the api.queryData._paramType\r\n    if (entry?.api?.queryData?._paramType) {\r\n      apiParamsMap[key] = entry.api.queryData._paramType;\r\n    }\r\n  }\r\n\r\n  return createCogsState(initialState, {\r\n    __fromSyncSchema: true,\r\n    __syncNotifications: syncSchema.notifications,\r\n    __apiParamsMap: apiParamsMap,\r\n    __useSync: useSync,\r\n    __syncSchemas: schemas,\r\n  }) as any;\r\n}\r\n\r\nconst saveToLocalStorage = <T,>(\r\n  state: T,\r\n  thisKey: string,\r\n  currentInitialOptions: any,\r\n  sessionId?: string,\r\n  lastSyncedWithServer?: number\r\n) => {\r\n  if (currentInitialOptions?.log) {\r\n    console.log(\r\n      'saving to localstorage',\r\n      thisKey,\r\n      currentInitialOptions.localStorage?.key,\r\n      sessionId\r\n    );\r\n  }\r\n\r\n  const key = isFunction(currentInitialOptions?.localStorage?.key)\r\n    ? currentInitialOptions.localStorage?.key(state)\r\n    : currentInitialOptions?.localStorage?.key;\r\n\r\n  if (key && sessionId) {\r\n    const storageKey = `${sessionId}-${thisKey}-${key}`;\r\n\r\n    // Get existing data to preserve lastSyncedWithServer if not explicitly updating it\r\n    let existingLastSynced: number | undefined;\r\n    try {\r\n      const existing = loadFromLocalStorage(storageKey);\r\n      existingLastSynced = existing?.lastSyncedWithServer;\r\n    } catch {\r\n      // Ignore errors, will use undefined\r\n    }\r\n    const shadowMeta = getShadowMetadata(thisKey, []);\r\n\r\n    const data: LocalStorageData<T> = {\r\n      state,\r\n      lastUpdated: Date.now(),\r\n      lastSyncedWithServer: lastSyncedWithServer ?? existingLastSynced,\r\n      stateSource: shadowMeta?.stateSource,\r\n      baseServerState: shadowMeta?.baseServerState,\r\n    };\r\n\r\n    // Use SuperJSON serialize to get the json part only\r\n    const superJsonResult = superjson.serialize(data);\r\n    window.localStorage.setItem(\r\n      storageKey,\r\n      JSON.stringify(superJsonResult.json)\r\n    );\r\n  }\r\n};\r\n\r\nconst loadFromLocalStorage = (localStorageKey: string) => {\r\n  if (!localStorageKey) return null;\r\n\r\n  try {\r\n    const storedData = window.localStorage.getItem(localStorageKey);\r\n    if (!storedData) return null;\r\n\r\n    // Parse the json part back normally\r\n    const parsedData = JSON.parse(storedData);\r\n\r\n    return parsedData;\r\n  } catch (error) {\r\n    console.error('Error loading from localStorage:', error);\r\n    return null;\r\n  }\r\n};\r\nconst loadAndApplyLocalStorage = (stateKey: string, options: any) => {\r\n  const currentState = getShadowValue(stateKey, []);\r\n  const { sessionId } = useCogsConfig();\r\n  const localkey = isFunction(options?.localStorage?.key)\r\n    ? options.localStorage.key(currentState)\r\n    : options?.localStorage?.key;\r\n\r\n  if (localkey && sessionId) {\r\n    const localData = loadFromLocalStorage(\r\n      `${sessionId}-${stateKey}-${localkey}`\r\n    );\r\n\r\n    if (\r\n      localData &&\r\n      localData.lastUpdated > (localData.lastSyncedWithServer || 0)\r\n    ) {\r\n      notifyComponents(stateKey);\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\ntype LocalStorageData<T> = {\r\n  state: T;\r\n  lastUpdated: number;\r\n  lastSyncedWithServer?: number;\r\n  baseServerState?: T; // Keep reference to what server state this is based on\r\n  stateSource?: 'default' | 'server' | 'localStorage'; // Track origin\r\n};\r\n\r\nconst notifyComponents = (thisKey: string) => {\r\n  const stateEntry = getShadowMetadata(thisKey, []);\r\n  if (!stateEntry) return;\r\n\r\n  // Batch component updates\r\n  const updates = new Set<() => void>();\r\n  stateEntry?.components?.forEach((component) => {\r\n    const reactiveTypes = component\r\n      ? Array.isArray(component.reactiveType)\r\n        ? component.reactiveType\r\n        : [component.reactiveType || 'component']\r\n      : null;\r\n    if (!reactiveTypes?.includes('none')) {\r\n      updates.add(() => component.forceUpdate());\r\n    }\r\n  });\r\n\r\n  // Schedule updates in the next tick to allow batching\r\n  queueMicrotask(() => {\r\n    updates.forEach((update) => update());\r\n  });\r\n};\r\n\r\nfunction markEntireStateAsServerSynced(\r\n  stateKey: string,\r\n  path: string[],\r\n  data: any,\r\n  timestamp: number\r\n) {\r\n  // Mark current path as synced\r\n  const currentMeta = getShadowMetadata(stateKey, path);\r\n  setShadowMetadata(stateKey, path, {\r\n    ...currentMeta,\r\n    isDirty: false,\r\n    stateSource: 'server',\r\n    lastServerSync: timestamp || Date.now(),\r\n  });\r\n\r\n  // If it's an array, mark each item as synced\r\n  if (Array.isArray(data)) {\r\n    const arrayMeta = getShadowMetadata(stateKey, path);\r\n    if (arrayMeta?.arrayKeys) {\r\n      arrayMeta.arrayKeys.forEach((itemKey, index) => {\r\n        // Fix: Don't split the itemKey, just use it directly\r\n        const itemPath = [...path, itemKey];\r\n        const itemData = data[index];\r\n        if (itemData !== undefined) {\r\n          markEntireStateAsServerSynced(\r\n            stateKey,\r\n            itemPath,\r\n            itemData,\r\n            timestamp\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }\r\n  // If it's an object, mark each field as synced\r\n  else if (data && typeof data === 'object' && data.constructor === Object) {\r\n    Object.keys(data).forEach((key) => {\r\n      const fieldPath = [...path, key];\r\n      const fieldData = data[key];\r\n      markEntireStateAsServerSynced(stateKey, fieldPath, fieldData, timestamp);\r\n    });\r\n  }\r\n}\r\n// 5. Batch queue\r\nlet updateBatchQueue: any[] = [];\r\nlet isFlushScheduled = false;\r\n\r\nfunction scheduleFlush() {\r\n  if (!isFlushScheduled) {\r\n    isFlushScheduled = true;\r\n    queueMicrotask(flushQueue);\r\n  }\r\n}\r\nfunction handleUpdate(\r\n  stateKey: string,\r\n  path: string[],\r\n  payload: any\r\n): { type: 'update'; oldValue: any; newValue: any; shadowMeta: any } {\r\n  // Get the full existing node, including its metadata\r\n  const existingNode = getShadowMetadata(stateKey, path) || {};\r\n  const currentValue = getGlobalStore.getState().getShadowValue(stateKey, path);\r\n\r\n  const newValue = isFunction(payload) ? payload(currentValue) : payload;\r\n\r\n  const newNode = buildShadowNode(newValue);\r\n\r\n  if (Object.prototype.hasOwnProperty.call(newNode, 'value')) {\r\n    // Get all keys from the old node that are metadata keys\r\n    for (const key in existingNode) {\r\n      if (METADATA_KEYS.has(key)) {\r\n        newNode[key] = existingNode[key as keyof typeof existingNode];\r\n      }\r\n    }\r\n  }\r\n\r\n  updateShadowAtPath(stateKey, path, newValue); // The logic will be moved into this function\r\n\r\n  markAsDirty(stateKey, path, { bubble: true });\r\n\r\n  // Return the metadata of the node *after* the update\r\n  const newShadowMeta = getShadowMetadata(stateKey, path);\r\n\r\n  return {\r\n    type: 'update',\r\n    oldValue: currentValue,\r\n    newValue,\r\n    shadowMeta: newShadowMeta,\r\n  };\r\n}\r\n// 2. Update signals\r\nfunction updateSignals(shadowMeta: any, displayValue: any) {\r\n  if (!shadowMeta?.signals?.length) return;\r\n\r\n  shadowMeta.signals.forEach(({ parentId, position, effect }: any) => {\r\n    const parent = document.querySelector(`[data-parent-id=\"${parentId}\"]`);\r\n    if (!parent) return;\r\n\r\n    const childNodes = Array.from(parent.childNodes);\r\n    if (!childNodes[position]) return;\r\n\r\n    let finalDisplayValue = displayValue;\r\n    if (effect && displayValue !== null) {\r\n      try {\r\n        finalDisplayValue = new Function('state', `return (${effect})(state)`)(\r\n          displayValue\r\n        );\r\n      } catch (err) {\r\n        console.error('Error evaluating effect function:', err);\r\n      }\r\n    }\r\n\r\n    if (finalDisplayValue !== null && typeof finalDisplayValue === 'object') {\r\n      finalDisplayValue = JSON.stringify(finalDisplayValue);\r\n    }\r\n\r\n    childNodes[position].textContent = String(finalDisplayValue ?? '');\r\n  });\r\n}\r\n\r\nfunction getComponentNotifications(\r\n  stateKey: string,\r\n  path: string[],\r\n  result: any\r\n): Set<any> {\r\n  const rootMeta = getShadowMetadata(stateKey, []);\r\n\r\n  if (!rootMeta?.components) {\r\n    return new Set();\r\n  }\r\n\r\n  const componentsToNotify = new Set<any>();\r\n\r\n  // --- PASS 1: Notify specific subscribers based on update type ---\r\n\r\n  if (result.type === 'update') {\r\n    // --- Bubble-up Notification ---\r\n    // An update to `user.address.street` notifies listeners of `street`, `address`, and `user`.\r\n    let currentPath = [...path];\r\n    while (true) {\r\n      const pathMeta = getShadowMetadata(stateKey, currentPath);\r\n\r\n      if (pathMeta?.pathComponents) {\r\n        pathMeta.pathComponents.forEach((componentId: string) => {\r\n          const component = rootMeta.components?.get(componentId);\r\n          // NEW: Add component to the set instead of calling forceUpdate()\r\n          if (component) {\r\n            const reactiveTypes = Array.isArray(component.reactiveType)\r\n              ? component.reactiveType\r\n              : [component.reactiveType || 'component'];\r\n            if (!reactiveTypes.includes('none')) {\r\n              componentsToNotify.add(component);\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      if (currentPath.length === 0) break;\r\n      currentPath.pop(); // Go up one level\r\n    }\r\n\r\n    // --- Deep Object Change Notification ---\r\n    // If the new value is an object, notify components subscribed to sub-paths that changed.\r\n    if (\r\n      result.newValue &&\r\n      typeof result.newValue === 'object' &&\r\n      !isArray(result.newValue)\r\n    ) {\r\n      const changedSubPaths = getDifferences(result.newValue, result.oldValue);\r\n\r\n      changedSubPaths.forEach((subPathString: string) => {\r\n        const subPath = subPathString.split('.');\r\n        const fullSubPath = [...path, ...subPath];\r\n        const subPathMeta = getShadowMetadata(stateKey, fullSubPath);\r\n\r\n        if (subPathMeta?.pathComponents) {\r\n          subPathMeta.pathComponents.forEach((componentId: string) => {\r\n            const component = rootMeta.components?.get(componentId);\r\n            // NEW: Add component to the set\r\n            if (component) {\r\n              const reactiveTypes = Array.isArray(component.reactiveType)\r\n                ? component.reactiveType\r\n                : [component.reactiveType || 'component'];\r\n              if (!reactiveTypes.includes('none')) {\r\n                componentsToNotify.add(component);\r\n              }\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  } else if (result.type === 'insert' || result.type === 'cut') {\r\n    // For array structural changes (add/remove), notify components listening to the parent array.\r\n    const parentArrayPath = result.type === 'insert' ? path : path.slice(0, -1);\r\n    const parentMeta = getShadowMetadata(stateKey, parentArrayPath);\r\n\r\n    if (parentMeta?.pathComponents) {\r\n      parentMeta.pathComponents.forEach((componentId: string) => {\r\n        const component = rootMeta.components?.get(componentId);\r\n        // NEW: Add component to the set\r\n        if (component) {\r\n          componentsToNotify.add(component);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // --- PASS 2: Handle 'all' and 'deps' reactivity types ---\r\n  // Iterate over all components for this stateKey that haven't been notified yet.\r\n  rootMeta.components.forEach((component, componentId) => {\r\n    // If we've already added this component, skip it.\r\n    if (componentsToNotify.has(component)) {\r\n      return;\r\n    }\r\n\r\n    const reactiveTypes = Array.isArray(component.reactiveType)\r\n      ? component.reactiveType\r\n      : [component.reactiveType || 'component'];\r\n\r\n    if (reactiveTypes.includes('all')) {\r\n      componentsToNotify.add(component);\r\n    } else if (reactiveTypes.includes('deps') && component.depsFunction) {\r\n      const currentState = getShadowValue(stateKey, []);\r\n      const newDeps = component.depsFunction(currentState);\r\n\r\n      if (\r\n        newDeps === true ||\r\n        (Array.isArray(newDeps) && !isDeepEqual(component.prevDeps, newDeps))\r\n      ) {\r\n        component.prevDeps = newDeps as any; // Update the dependencies for the next check\r\n        componentsToNotify.add(component);\r\n      }\r\n    }\r\n  });\r\n\r\n  return componentsToNotify;\r\n}\r\n\r\nfunction handleInsert(\r\n  stateKey: string,\r\n  path: string[],\r\n  payload: any\r\n): { type: 'insert'; newValue: any; shadowMeta: any } {\r\n  let newValue;\r\n  if (isFunction(payload)) {\r\n    const { value: currentValue } = getScopedData(stateKey, path);\r\n    newValue = payload({ state: currentValue, uuid: uuidv4() });\r\n  } else {\r\n    newValue = payload;\r\n  }\r\n\r\n  insertShadowArrayElement(stateKey, path, newValue);\r\n  markAsDirty(stateKey, path, { bubble: true });\r\n\r\n  const updatedMeta = getShadowMetadata(stateKey, path);\r\n  if (updatedMeta?.arrayKeys) {\r\n    const newItemKey = updatedMeta.arrayKeys[updatedMeta.arrayKeys.length - 1];\r\n    if (newItemKey) {\r\n      const newItemPath = newItemKey.split('.').slice(1);\r\n      markAsDirty(stateKey, newItemPath, { bubble: false });\r\n    }\r\n  }\r\n\r\n  return { type: 'insert', newValue, shadowMeta: updatedMeta };\r\n}\r\n\r\nfunction handleCut(\r\n  stateKey: string,\r\n  path: string[]\r\n): { type: 'cut'; oldValue: any; parentPath: string[] } {\r\n  const parentArrayPath = path.slice(0, -1);\r\n  const oldValue = getShadowValue(stateKey, path);\r\n  removeShadowArrayElement(stateKey, path);\r\n  markAsDirty(stateKey, parentArrayPath, { bubble: true });\r\n  return { type: 'cut', oldValue: oldValue, parentPath: parentArrayPath };\r\n}\r\n\r\nfunction flushQueue() {\r\n  const allComponentsToNotify = new Set<any>();\r\n  const signalUpdates: { shadowMeta: any; displayValue: any }[] = [];\r\n\r\n  const logsToAdd: UpdateTypeDetail[] = [];\r\n\r\n  for (const item of updateBatchQueue) {\r\n    if (item.status && item.updateType) {\r\n      logsToAdd.push(item as UpdateTypeDetail);\r\n      continue;\r\n    }\r\n\r\n    const result = item;\r\n\r\n    const displayValue = result.type === 'cut' ? null : result.newValue;\r\n    if (result.shadowMeta?.signals?.length > 0) {\r\n      signalUpdates.push({ shadowMeta: result.shadowMeta, displayValue });\r\n    }\r\n\r\n    const componentNotifications = getComponentNotifications(\r\n      result.stateKey,\r\n      result.path,\r\n      result\r\n    );\r\n\r\n    componentNotifications.forEach((component) => {\r\n      allComponentsToNotify.add(component);\r\n    });\r\n  }\r\n\r\n  if (logsToAdd.length > 0) {\r\n    addStateLog(logsToAdd);\r\n  }\r\n\r\n  signalUpdates.forEach(({ shadowMeta, displayValue }) => {\r\n    updateSignals(shadowMeta, displayValue);\r\n  });\r\n\r\n  allComponentsToNotify.forEach((component) => {\r\n    component.forceUpdate();\r\n  });\r\n\r\n  // --- Step 3: CLEANUP ---\r\n  // Clear the queue for the next batch of updates.\r\n  updateBatchQueue = [];\r\n  isFlushScheduled = false;\r\n}\r\n\r\nfunction createEffectiveSetState<T>(\r\n  thisKey: string,\r\n  syncApiRef: React.MutableRefObject<any>,\r\n  sessionId: string | undefined,\r\n  latestInitialOptionsRef: React.MutableRefObject<OptionsType<T> | null>\r\n): EffectiveSetState<T> {\r\n  // The returned function is the core setter that gets called by all state operations.\r\n  // It is now much simpler, delegating all work to the executeUpdate function.\r\n  return (newStateOrFunction, path, updateObj, validationKey?) => {\r\n    executeUpdate(thisKey, path, newStateOrFunction, updateObj);\r\n  };\r\n\r\n  // This inner function handles the logic for a single state update.\r\n  function executeUpdate(\r\n    stateKey: string,\r\n    path: string[],\r\n    payload: any,\r\n    options: UpdateOptions\r\n  ) {\r\n    // --- Step 1: Execute the core state change (Synchronous & Fast) ---\r\n    // This part modifies the in-memory state representation immediately.\r\n    let result: any;\r\n    switch (options.updateType) {\r\n      case 'update':\r\n        result = handleUpdate(stateKey, path, payload);\r\n        break;\r\n      case 'insert':\r\n        result = handleInsert(stateKey, path, payload);\r\n        break;\r\n      case 'cut':\r\n        result = handleCut(stateKey, path);\r\n        break;\r\n    }\r\n\r\n    result.stateKey = stateKey;\r\n    result.path = path;\r\n    updateBatchQueue.push(result);\r\n    scheduleFlush();\r\n\r\n    const newUpdate: UpdateTypeDetail = {\r\n      timeStamp: Date.now(),\r\n      stateKey,\r\n      path,\r\n      updateType: options.updateType,\r\n      status: 'new',\r\n      oldValue: result.oldValue,\r\n      newValue: result.newValue ?? null,\r\n    };\r\n\r\n    updateBatchQueue.push(newUpdate);\r\n\r\n    if (result.newValue !== undefined) {\r\n      saveToLocalStorage(\r\n        result.newValue,\r\n        stateKey,\r\n        latestInitialOptionsRef.current,\r\n        sessionId\r\n      );\r\n    }\r\n\r\n    if (latestInitialOptionsRef.current?.middleware) {\r\n      latestInitialOptionsRef.current.middleware({ update: newUpdate });\r\n    }\r\n\r\n    if (options.sync !== false && syncApiRef.current?.connected) {\r\n      syncApiRef.current.updateState({ operation: newUpdate });\r\n    }\r\n  }\r\n}\r\n\r\nexport function useCogsStateFn<TStateObject extends unknown>(\r\n  stateObject: TStateObject,\r\n  {\r\n    stateKey,\r\n\r\n    localStorage,\r\n    formElements,\r\n    reactiveDeps,\r\n    reactiveType,\r\n    componentId,\r\n    defaultState,\r\n    syncUpdate,\r\n    dependencies,\r\n    serverState,\r\n    __useSync,\r\n  }: {\r\n    stateKey?: string;\r\n    componentId?: string;\r\n    defaultState?: TStateObject;\r\n    __useSync?: UseSyncType<TStateObject>;\r\n    syncOptions?: SyncOptionsType<any>;\r\n  } & OptionsType<TStateObject> = {}\r\n) {\r\n  const [reactiveForce, forceUpdate] = useState({}); //this is the key to reactivity\r\n  const { sessionId } = useCogsConfig();\r\n  let noStateKey = stateKey ? false : true;\r\n  const [thisKey] = useState(stateKey ?? uuidv4());\r\n  const componentIdRef = useRef(componentId ?? uuidv4());\r\n  const latestInitialOptionsRef = useRef<OptionsType<TStateObject> | null>(\r\n    null\r\n  );\r\n  latestInitialOptionsRef.current = (getInitialOptions(thisKey as string) ??\r\n    null) as OptionsType<TStateObject> | null;\r\n\r\n  useEffect(() => {\r\n    if (syncUpdate && syncUpdate.stateKey === thisKey && syncUpdate.path?.[0]) {\r\n      const syncKey = `${syncUpdate.stateKey}:${syncUpdate.path.join('.')}`;\r\n      setSyncInfo(syncKey, {\r\n        timeStamp: syncUpdate.timeStamp!,\r\n        userId: syncUpdate.userId!,\r\n      });\r\n    }\r\n  }, [syncUpdate]);\r\n\r\n  const resolveInitialState = useCallback(\r\n    (\r\n      overrideOptions?: OptionsType<TStateObject>\r\n    ): {\r\n      value: TStateObject;\r\n      source: 'default' | 'server' | 'localStorage';\r\n      timestamp: number;\r\n    } => {\r\n      // If we pass in options, use them. Otherwise, get from the global store.\r\n      const optionsToUse = overrideOptions\r\n        ? { ...getInitialOptions(thisKey as string), ...overrideOptions }\r\n        : getInitialOptions(thisKey as string);\r\n\r\n      const currentOptions = optionsToUse;\r\n      const finalDefaultState =\r\n        currentOptions?.defaultState || defaultState || stateObject;\r\n\r\n      // 1. Check server state\r\n      const hasValidServerData =\r\n        currentOptions?.serverState?.status === 'success' &&\r\n        currentOptions?.serverState?.data !== undefined;\r\n\r\n      if (hasValidServerData) {\r\n        return {\r\n          value: currentOptions.serverState!.data! as any,\r\n          source: 'server',\r\n          timestamp: currentOptions.serverState!.timestamp || Date.now(),\r\n        };\r\n      }\r\n      // 2. Check localStorage\r\n      if (currentOptions?.localStorage?.key && sessionId) {\r\n        const localKey = isFunction(currentOptions.localStorage.key)\r\n          ? currentOptions.localStorage.key(finalDefaultState)\r\n          : currentOptions.localStorage.key;\r\n\r\n        const localData = loadFromLocalStorage(\r\n          `${sessionId}-${thisKey}-${localKey}`\r\n        );\r\n\r\n        if (\r\n          localData &&\r\n          localData.lastUpdated > (currentOptions?.serverState?.timestamp || 0)\r\n        ) {\r\n          return {\r\n            value: localData.state,\r\n            source: 'localStorage',\r\n            timestamp: localData.lastUpdated,\r\n          };\r\n        }\r\n      }\r\n\r\n      // 3. Use default state\r\n      return {\r\n        value: finalDefaultState || (stateObject as any),\r\n        source: 'default',\r\n        timestamp: Date.now(),\r\n      };\r\n    },\r\n    [thisKey, defaultState, stateObject, sessionId]\r\n  );\r\n\r\n  // Effect 1: When this component's serverState prop changes, broadcast it\r\n  useEffect(() => {\r\n    setServerStateUpdate(thisKey, serverState);\r\n  }, [serverState, thisKey]);\r\n\r\n  // Effect 2: Listen for server state updates from ANY component\r\n  useEffect(() => {\r\n    const unsubscribe = getGlobalStore\r\n      .getState()\r\n      .subscribeToPath(thisKey, (event) => {\r\n        if (event?.type === 'SERVER_STATE_UPDATE') {\r\n          const serverStateData = event.serverState;\r\n\r\n          if (\r\n            serverStateData?.status !== 'success' ||\r\n            serverStateData.data === undefined\r\n          ) {\r\n            return; // Ignore if no valid data\r\n          }\r\n\r\n          console.log(\r\n            '✅ SERVER_STATE_UPDATE received with data:',\r\n            serverStateData\r\n          );\r\n\r\n          setAndMergeOptions(thisKey, { serverState: serverStateData });\r\n\r\n          const mergeConfig =\r\n            typeof serverStateData.merge === 'object'\r\n              ? serverStateData.merge\r\n              : serverStateData.merge === true\r\n                ? { strategy: 'append' }\r\n                : null;\r\n\r\n          // ✅ FIX 1: The path for the root value is now `[]`.\r\n          const currentState = getShadowValue(thisKey, []);\r\n          const incomingData = serverStateData.data;\r\n\r\n          if (\r\n            mergeConfig &&\r\n            mergeConfig.strategy === 'append' &&\r\n            'key' in mergeConfig && // Type guard for key\r\n            Array.isArray(currentState) &&\r\n            Array.isArray(incomingData)\r\n          ) {\r\n            const keyField = mergeConfig.key;\r\n            if (!keyField) {\r\n              console.error(\r\n                \"CogsState: Merge strategy 'append' requires a 'key' field.\"\r\n              );\r\n              return;\r\n            }\r\n            console.log('SERVER_STATE_UPDATE 2');\r\n            const existingIds = new Set(\r\n              currentState.map((item: any) => item[keyField])\r\n            );\r\n\r\n            const newUniqueItems = incomingData.filter(\r\n              (item: any) => !existingIds.has(item[keyField])\r\n            );\r\n\r\n            if (newUniqueItems.length > 0) {\r\n              newUniqueItems.forEach((item) => {\r\n                insertShadowArrayElement(thisKey, [], item);\r\n              });\r\n            }\r\n\r\n            // Mark the entire final state as synced\r\n            const finalState = getShadowValue(thisKey, []);\r\n            markEntireStateAsServerSynced(\r\n              thisKey,\r\n              [],\r\n              finalState,\r\n              serverStateData.timestamp\r\n            );\r\n          } else {\r\n            // This handles the \"replace\" strategy (initial load)\r\n            initializeShadowState(thisKey, incomingData);\r\n\r\n            markEntireStateAsServerSynced(\r\n              thisKey,\r\n              [],\r\n              incomingData,\r\n              serverStateData.timestamp\r\n            );\r\n          }\r\n        }\r\n      });\r\n\r\n    return unsubscribe;\r\n  }, [thisKey, resolveInitialState]);\r\n\r\n  useEffect(() => {\r\n    const existingMeta = getGlobalStore\r\n      .getState()\r\n      .getShadowMetadata(thisKey, []);\r\n    if (existingMeta && existingMeta.stateSource) {\r\n      return; // Already initialized, bail out.\r\n    }\r\n\r\n    const options = getInitialOptions(thisKey as string);\r\n\r\n    const features = {\r\n      syncEnabled: !!cogsSyncFn && !!syncOpt,\r\n      validationEnabled: !!(\r\n        options?.validation?.zodSchemaV4 || options?.validation?.zodSchemaV3\r\n      ),\r\n      localStorageEnabled: !!options?.localStorage?.key,\r\n    };\r\n    setShadowMetadata(thisKey, [], {\r\n      ...existingMeta,\r\n      features,\r\n    });\r\n    if (options?.defaultState !== undefined || defaultState !== undefined) {\r\n      const finalDefaultState = options?.defaultState || defaultState;\r\n\r\n      // Only set defaultState if it's not already set\r\n      if (!options?.defaultState) {\r\n        setAndMergeOptions(thisKey as string, {\r\n          defaultState: finalDefaultState,\r\n        });\r\n      }\r\n\r\n      const { value: resolvedState, source, timestamp } = resolveInitialState();\r\n\r\n      initializeShadowState(thisKey, resolvedState);\r\n\r\n      // Set shadow metadata with the correct source info\r\n      setShadowMetadata(thisKey, [], {\r\n        stateSource: source,\r\n        lastServerSync: source === 'server' ? timestamp : undefined,\r\n        isDirty: false,\r\n        baseServerState: source === 'server' ? resolvedState : undefined,\r\n      });\r\n\r\n      notifyComponents(thisKey);\r\n    }\r\n  }, [thisKey, ...(dependencies || [])]);\r\n\r\n  useLayoutEffect(() => {\r\n    if (noStateKey) {\r\n      setAndMergeOptions(thisKey as string, {\r\n        formElements,\r\n        defaultState,\r\n        localStorage,\r\n        middleware: latestInitialOptionsRef.current?.middleware,\r\n      });\r\n    }\r\n\r\n    const componentKey = `${thisKey}////${componentIdRef.current}`;\r\n\r\n    // Register component in shadow metadata at root level\r\n    const rootMeta = getShadowMetadata(thisKey, []);\r\n    const components = rootMeta?.components || new Map();\r\n\r\n    components.set(componentKey, {\r\n      forceUpdate: () => forceUpdate({}),\r\n      reactiveType: reactiveType ?? ['component'],\r\n      paths: new Set(),\r\n      depsFunction: reactiveDeps || undefined,\r\n      deps: reactiveDeps ? reactiveDeps(getShadowValue(thisKey, [])) : [],\r\n      prevDeps: reactiveDeps // Initialize prevDeps with the same initial value\r\n        ? reactiveDeps(getShadowValue(thisKey, []))\r\n        : [],\r\n    });\r\n\r\n    setShadowMetadata(thisKey, [], {\r\n      ...rootMeta,\r\n      components,\r\n    });\r\n    forceUpdate({});\r\n    return () => {\r\n      const meta = getShadowMetadata(thisKey, []);\r\n      const component = meta?.components?.get(componentKey);\r\n\r\n      // Remove from each path we registered to\r\n      if (component?.paths) {\r\n        component.paths.forEach((fullPath) => {\r\n          // fullPath is like \"todos.0.name\", need to split and remove stateKey\r\n          const pathParts = fullPath.split('.');\r\n          const path = pathParts.slice(1); // Remove stateKey part\r\n\r\n          const pathMeta = getGlobalStore\r\n            .getState()\r\n            .getShadowMetadata(thisKey, path);\r\n          if (pathMeta?.pathComponents) {\r\n            // Optionally clean up empty Sets\r\n\r\n            if (pathMeta.pathComponents.size === 0) {\r\n              delete pathMeta.pathComponents;\r\n              getGlobalStore\r\n                .getState()\r\n                .setShadowMetadata(thisKey, path, pathMeta);\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // Remove from root components\r\n      if (meta?.components) {\r\n        setShadowMetadata(thisKey, [], meta);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const syncApiRef = useRef<SyncApi | null>(null);\r\n  const effectiveSetState = createEffectiveSetState(\r\n    thisKey,\r\n    syncApiRef,\r\n    sessionId,\r\n    latestInitialOptionsRef\r\n  );\r\n\r\n  if (!getGlobalStore.getState().initialStateGlobal[thisKey]) {\r\n    updateInitialStateGlobal(thisKey, stateObject);\r\n  }\r\n\r\n  const updaterFinal = useMemo(() => {\r\n    const handler = createProxyHandler<TStateObject>(\r\n      thisKey,\r\n      effectiveSetState,\r\n      componentIdRef.current,\r\n      sessionId\r\n    );\r\n\r\n    return handler;\r\n  }, [thisKey, sessionId]);\r\n\r\n  const cogsSyncFn = __useSync;\r\n  const syncOpt = latestInitialOptionsRef.current?.syncOptions;\r\n\r\n  if (cogsSyncFn) {\r\n    syncApiRef.current = cogsSyncFn(\r\n      updaterFinal as any,\r\n      syncOpt ?? ({} as any)\r\n    );\r\n  }\r\n\r\n  return updaterFinal;\r\n}\r\n\r\ntype MetaData = {\r\n  // Map array paths to their filtered/sorted ID order\r\n  arrayViews?: {\r\n    [arrayPath: string]: string[]; // e.g. { \"todos\": [\"id:xxx\", \"id:yyy\"], \"todos.id:xxx.subtasks\": [\"id:aaa\"] }\r\n  };\r\n  transforms?: Array<{\r\n    type: 'filter' | 'sort';\r\n    fn: Function;\r\n    path: string[]; // Which array this transform applies to\r\n  }>;\r\n};\r\n\r\nfunction hashTransforms(transforms: any[]) {\r\n  if (!transforms || transforms.length === 0) {\r\n    return '';\r\n  }\r\n  return transforms\r\n    .map(\r\n      (transform) =>\r\n        `${transform.type}${JSON.stringify(transform.dependencies || [])}`\r\n    )\r\n    .join('');\r\n}\r\nconst applyTransforms = (\r\n  stateKey: string,\r\n  path: string[],\r\n  transforms?: Array<{ type: 'filter' | 'sort'; fn: Function }>\r\n): string[] => {\r\n  const node = getShadowMetadata(stateKey, path);\r\n  let ids = Object.keys(node || {}).filter((k) => k.startsWith('id:'));\r\n\r\n  if (!transforms || transforms.length === 0) {\r\n    return ids;\r\n  }\r\n\r\n  // Apply each transform using just IDs\r\n  for (const transform of transforms) {\r\n    if (transform.type === 'filter') {\r\n      const filtered: any[] = [];\r\n      ids.forEach((id, index) => {\r\n        const value = getShadowValue(stateKey, [...path, id]);\r\n        if (transform.fn(value, index)) {\r\n          filtered.push(id);\r\n        }\r\n      });\r\n      ids = filtered;\r\n    } else if (transform.type === 'sort') {\r\n      ids.sort((a, b) => {\r\n        const aValue = getShadowValue(stateKey, [...path, a]);\r\n        const bValue = getShadowValue(stateKey, [...path, b]);\r\n        return transform.fn(aValue, bValue);\r\n      });\r\n    }\r\n  }\r\n\r\n  return ids;\r\n};\r\nconst registerComponentDependency = (\r\n  stateKey: string,\r\n  componentId: string,\r\n  dependencyPath: string[]\r\n) => {\r\n  const fullComponentId = `${stateKey}////${componentId}`;\r\n\r\n  const rootMeta = getShadowMetadata(stateKey, []);\r\n  const component = rootMeta?.components?.get(fullComponentId);\r\n\r\n  if (\r\n    !component ||\r\n    component.reactiveType === 'none' ||\r\n    !(\r\n      Array.isArray(component.reactiveType)\r\n        ? component.reactiveType\r\n        : [component.reactiveType]\r\n    ).includes('component')\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  addPathComponent(stateKey, dependencyPath, fullComponentId);\r\n};\r\nconst notifySelectionComponents = (\r\n  stateKey: string,\r\n  parentPath: string[],\r\n  currentSelected?: string | undefined\r\n) => {\r\n  const store = getGlobalStore.getState();\r\n  const rootMeta = store.getShadowMetadata(stateKey, []);\r\n  const notifiedComponents = new Set<string>();\r\n\r\n  // Handle \"all\" reactive components first\r\n  if (rootMeta?.components) {\r\n    rootMeta.components.forEach((component, componentId) => {\r\n      const reactiveTypes = Array.isArray(component.reactiveType)\r\n        ? component.reactiveType\r\n        : [component.reactiveType || 'component'];\r\n\r\n      if (reactiveTypes.includes('all')) {\r\n        component.forceUpdate();\r\n        notifiedComponents.add(componentId);\r\n      }\r\n    });\r\n  }\r\n\r\n  store\r\n    .getShadowMetadata(stateKey, [...parentPath, 'getSelected'])\r\n    ?.pathComponents?.forEach((componentId) => {\r\n      const thisComp = rootMeta?.components?.get(componentId);\r\n      thisComp?.forceUpdate();\r\n    });\r\n\r\n  const parentMeta = store.getShadowMetadata(stateKey, parentPath);\r\n  for (let arrayKey of parentMeta?.arrayKeys || []) {\r\n    const key = arrayKey + '.selected';\r\n    const selectedItem = store.getShadowMetadata(\r\n      stateKey,\r\n      key.split('.').slice(1)\r\n    );\r\n    if (arrayKey == currentSelected) {\r\n      selectedItem?.pathComponents?.forEach((componentId) => {\r\n        const thisComp = rootMeta?.components?.get(componentId);\r\n        thisComp?.forceUpdate();\r\n      });\r\n    }\r\n  }\r\n};\r\nfunction getScopedData(stateKey: string, path: string[], meta?: MetaData) {\r\n  const shadowMeta = getShadowMetadata(stateKey, path);\r\n\r\n  // Just get the value directly from getShadowValue\r\n  const arrayPathKey = path.join('.');\r\n  const arrayKeys = meta?.arrayViews?.[arrayPathKey];\r\n  const value = getShadowValue(stateKey, path, arrayKeys);\r\n\r\n  return {\r\n    shadowMeta,\r\n    value,\r\n    arrayKeys: shadowMeta?.arrayKeys, // Get arrayKeys from the metadata\r\n  };\r\n}\r\n\r\nfunction createProxyHandler<T>(\r\n  stateKey: string,\r\n  effectiveSetState: EffectiveSetState<T>,\r\n  componentId: string,\r\n  sessionId?: string\r\n): StateObject<T> {\r\n  const proxyCache = new Map<string, any>();\r\n  let stateVersion = 0;\r\n\r\n  const methodNames = new Set([\r\n    'getDifferences',\r\n    'sync',\r\n    'getStatus',\r\n    'removeStorage',\r\n    'showValidationErrors',\r\n    'getSelected',\r\n    'getSelectedIndex',\r\n    'clearSelected',\r\n    'useVirtualView',\r\n    'stateMap',\r\n    '$stateMap',\r\n    'stateFind',\r\n    'stateFilter',\r\n    'stateSort',\r\n    'stream',\r\n    'stateList',\r\n    'stateFlattenOn',\r\n    'index',\r\n    'last',\r\n    'insert',\r\n    'uniqueInsert',\r\n    'cut',\r\n    'cutSelected',\r\n    'cutByValue',\r\n    'toggleByValue',\r\n    'findWith',\r\n    'cutThis',\r\n    'get',\r\n    'getState',\r\n    '$derive',\r\n    '$get',\r\n    'lastSynced',\r\n    'getLocalStorage',\r\n    'isSelected',\r\n    'setSelected',\r\n    'toggleSelected',\r\n    '_componentId',\r\n    'addZodValidation',\r\n    'clearZodValidation',\r\n    'applyJsonPatch',\r\n    'getComponents',\r\n    'getAllFormRefs',\r\n    'getFormRef',\r\n    'validationWrapper',\r\n    '_stateKey',\r\n    '_path',\r\n    'update',\r\n    'toggle',\r\n    'formElement',\r\n    // Add ANY other method names here\r\n  ]);\r\n\r\n  function rebuildStateShape({\r\n    path = [],\r\n    meta,\r\n    componentId,\r\n  }: {\r\n    path: string[];\r\n    componentId: string;\r\n    meta?: MetaData;\r\n  }): any {\r\n    const derivationSignature = meta\r\n      ? JSON.stringify(meta.arrayViews || meta.transforms)\r\n      : '';\r\n    const cacheKey = path.join('.') + ':' + derivationSignature;\r\n    if (proxyCache.has(cacheKey)) {\r\n      return proxyCache.get(cacheKey);\r\n    }\r\n    const stateKeyPathKey = [stateKey, ...path].join('.');\r\n\r\n    // We attach baseObj properties *inside* the get trap now to avoid recursion\r\n    // This is a placeholder for the proxy.\r\n\r\n    const handler = {\r\n      get(target: any, prop: string) {\r\n        if (path.length === 0 && prop in rootLevelMethods) {\r\n          return rootLevelMethods[prop as keyof typeof rootLevelMethods];\r\n        }\r\n        if (!methodNames.has(prop)) {\r\n          const nextPath = [...path, prop];\r\n          return rebuildStateShape({\r\n            path: nextPath,\r\n            componentId: componentId!,\r\n            meta,\r\n          });\r\n        }\r\n        if (prop === '_rebuildStateShape') {\r\n          return rebuildStateShape;\r\n        }\r\n\r\n        if (prop === 'getDifferences') {\r\n          return () => {\r\n            const { value: currentState, shadowMeta } = getScopedData(\r\n              stateKey,\r\n              path,\r\n              meta\r\n            );\r\n            const baseState =\r\n              shadowMeta?.baseServerState ??\r\n              getGlobalStore.getState().initialStateGlobal[stateKey];\r\n            return getDifferences(currentState, baseState);\r\n          };\r\n        }\r\n        if (prop === 'sync' && path.length === 0) {\r\n          return async function () {\r\n            const options = getGlobalStore\r\n              .getState()\r\n              .getInitialOptions(stateKey);\r\n            const sync = options?.sync;\r\n\r\n            if (!sync) {\r\n              console.error(`No mutation defined for state key \"${stateKey}\"`);\r\n              return { success: false, error: `No mutation defined` };\r\n            }\r\n\r\n            const state = getGlobalStore\r\n              .getState()\r\n              .getShadowValue(stateKey, []);\r\n            const validationKey = options?.validation?.key;\r\n\r\n            try {\r\n              const response = await sync.action(state);\r\n              if (\r\n                response &&\r\n                !response.success &&\r\n                response.errors &&\r\n                validationKey\r\n              ) {\r\n                //  getGlobalStore.getState().removeValidationError(validationKey);\r\n                // response.errors.forEach((error) => {\r\n                //   const errorPath = [validationKey, ...error.path].join('.');\r\n                //   getGlobalStore\r\n                //     .getState()\r\n                //     .addValidationError(errorPath, error.message);\r\n                // });\r\n                //   notifyComponents(stateKey);\r\n              }\r\n\r\n              if (response?.success) {\r\n                // Mark as synced and not dirty\r\n                const shadowMeta = getGlobalStore\r\n                  .getState()\r\n                  .getShadowMetadata(stateKey, []);\r\n                setShadowMetadata(stateKey, [], {\r\n                  ...shadowMeta,\r\n                  isDirty: false,\r\n                  lastServerSync: Date.now(),\r\n                  stateSource: 'server',\r\n                  baseServerState: state, // Update base server state\r\n                });\r\n\r\n                if (sync.onSuccess) {\r\n                  sync.onSuccess(response.data);\r\n                }\r\n              } else if (!response?.success && sync.onError)\r\n                sync.onError(response.error);\r\n\r\n              return response;\r\n            } catch (error) {\r\n              if (sync.onError) sync.onError(error);\r\n              return { success: false, error };\r\n            }\r\n          };\r\n        }\r\n        // Fixed getStatus function in createProxyHandler\r\n        if (prop === '_status' || prop === 'getStatus') {\r\n          const getStatusFunc = () => {\r\n            // ✅ Use the optimized helper to get all data in one efficient call\r\n            const { shadowMeta, value } = getScopedData(stateKey, path, meta);\r\n\r\n            // Priority 1: Explicitly dirty items. This is the most important status.\r\n            if (shadowMeta?.isDirty === true) {\r\n              return 'dirty';\r\n            }\r\n\r\n            // ✅ Priority 2: Synced items. This condition is now cleaner.\r\n            // An item is considered synced if it came from the server OR was explicitly\r\n            // marked as not dirty (isDirty: false), covering all sync-related cases.\r\n            if (\r\n              shadowMeta?.stateSource === 'server' ||\r\n              shadowMeta?.isDirty === false\r\n            ) {\r\n              return 'synced';\r\n            }\r\n\r\n            // Priority 3: Items restored from localStorage.\r\n            if (shadowMeta?.stateSource === 'localStorage') {\r\n              return 'restored';\r\n            }\r\n\r\n            // Priority 4: Items from default/initial state.\r\n            if (shadowMeta?.stateSource === 'default') {\r\n              return 'fresh';\r\n            }\r\n\r\n            // ✅ REMOVED the redundant \"root\" check. The item's own `stateSource` is sufficient.\r\n\r\n            // Priority 5: A value exists but has no metadata. This is a fallback.\r\n            if (value !== undefined && !shadowMeta) {\r\n              return 'fresh';\r\n            }\r\n\r\n            // Fallback if no other condition is met.\r\n            return 'unknown';\r\n          };\r\n\r\n          // This part remains the same\r\n          return prop === '_status' ? getStatusFunc() : getStatusFunc;\r\n        }\r\n        if (prop === 'removeStorage') {\r\n          return () => {\r\n            const initialState =\r\n              getGlobalStore.getState().initialStateGlobal[stateKey];\r\n            const initalOptionsGet = getInitialOptions(stateKey as string);\r\n            const localKey = isFunction(initalOptionsGet?.localStorage?.key)\r\n              ? initalOptionsGet.localStorage.key(initialState)\r\n              : initalOptionsGet?.localStorage?.key;\r\n            const storageKey = `${sessionId}-${stateKey}-${localKey}`;\r\n            if (storageKey) localStorage.removeItem(storageKey);\r\n          };\r\n        }\r\n        if (prop === 'showValidationErrors') {\r\n          return () => {\r\n            const { shadowMeta } = getScopedData(stateKey, path, meta);\r\n            if (\r\n              shadowMeta?.validation?.status === 'INVALID' &&\r\n              shadowMeta.validation.errors.length > 0\r\n            ) {\r\n              // Return only error-severity messages (not warnings)\r\n              return shadowMeta.validation.errors\r\n                .filter((err) => err.severity === 'error')\r\n                .map((err) => err.message);\r\n            }\r\n            return [];\r\n          };\r\n        }\r\n\r\n        if (prop === 'getSelected') {\r\n          return () => {\r\n            const arrayKey = [stateKey, ...path].join('.');\r\n            registerComponentDependency(stateKey, componentId, [\r\n              ...path,\r\n              'getSelected',\r\n            ]);\r\n\r\n            const selectedItemKey = getGlobalStore\r\n              .getState()\r\n              .selectedIndicesMap.get(arrayKey);\r\n            if (!selectedItemKey) {\r\n              return undefined;\r\n            }\r\n\r\n            const viewKey = path.join('.');\r\n            const currentViewIds = meta?.arrayViews?.[viewKey];\r\n            const selectedItemId = selectedItemKey.split('.').pop();\r\n\r\n            // FIX: Only return the selected item if it exists in the current filtered/sorted view.\r\n            if (currentViewIds && !currentViewIds.includes(selectedItemId!)) {\r\n              return undefined;\r\n            }\r\n\r\n            const value = getShadowValue(\r\n              stateKey,\r\n              selectedItemKey.split('.').slice(1)\r\n            );\r\n            if (value === undefined) {\r\n              return undefined;\r\n            }\r\n\r\n            return rebuildStateShape({\r\n              path: selectedItemKey.split('.').slice(1) as string[],\r\n              componentId: componentId!,\r\n              meta,\r\n            });\r\n          };\r\n        }\r\n        if (prop === 'getSelectedIndex') {\r\n          return () => {\r\n            // Key for the array in the global selection map (e.g., \"myState.products\")\r\n            const arrayKey = stateKey + '.' + path.join('.');\r\n            // Key for this specific view in the meta object (e.g., \"products\")\r\n            const viewKey = path.join('.');\r\n\r\n            // Get the full path of the selected item (e.g., \"myState.products.id:abc\")\r\n            const selectedItemKey = getGlobalStore\r\n              .getState()\r\n              .selectedIndicesMap.get(arrayKey);\r\n\r\n            if (!selectedItemKey) {\r\n              return -1; // Nothing is selected for this array.\r\n            }\r\n\r\n            // Get the list of item IDs for the current filtered/sorted view.\r\n            const { keys: viewIds } = getArrayData(stateKey, path, meta);\r\n\r\n            if (!viewIds) {\r\n              return -1; // Should not happen if it's an array, but a safe guard.\r\n            }\r\n\r\n            // FIX: Extract just the ID from the full selected item path.\r\n            const selectedId = selectedItemKey.split('.').pop();\r\n\r\n            // Return the index of that ID within the current view's list of IDs.\r\n            return (viewIds as string[]).indexOf(selectedId as string);\r\n          };\r\n        }\r\n        if (prop === 'clearSelected') {\r\n          notifySelectionComponents(stateKey, path);\r\n          return () => {\r\n            clearSelectedIndex({\r\n              arrayKey: stateKey + '.' + path.join('.'),\r\n            });\r\n          };\r\n        }\r\n\r\n        if (prop === 'useVirtualView') {\r\n          return (\r\n            options: VirtualViewOptions\r\n          ): VirtualStateObjectResult<any[]> => {\r\n            const {\r\n              itemHeight = 50,\r\n              overscan = 6,\r\n              stickToBottom = false,\r\n              scrollStickTolerance = 75,\r\n            } = options;\r\n\r\n            const containerRef = useRef<HTMLDivElement | null>(null);\r\n            const [range, setRange] = useState({\r\n              startIndex: 0,\r\n              endIndex: 10,\r\n            });\r\n            const [rerender, forceUpdate] = useState({});\r\n            const initialScrollRef = useRef(true);\r\n\r\n            // Scroll state management\r\n            const scrollStateRef = useRef({\r\n              isUserScrolling: false,\r\n              lastScrollTop: 0,\r\n              scrollUpCount: 0,\r\n              isNearBottom: true,\r\n            });\r\n\r\n            // Measurement cache\r\n            const measurementCache = useRef(\r\n              new Map<string, { height: number; offset: number }>()\r\n            );\r\n\r\n            // Separate effect for handling rerender updates\r\n            useLayoutEffect(() => {\r\n              if (\r\n                !stickToBottom ||\r\n                !containerRef.current ||\r\n                scrollStateRef.current.isUserScrolling\r\n              )\r\n                return;\r\n\r\n              const container = containerRef.current;\r\n              container.scrollTo({\r\n                top: container.scrollHeight,\r\n                behavior: initialScrollRef.current ? 'instant' : 'smooth',\r\n              });\r\n            }, [rerender, stickToBottom]);\r\n\r\n            const { arrayKeys = [] } = getScopedData(stateKey, path, meta);\r\n\r\n            // Calculate total height and offsets\r\n            const { totalHeight, itemOffsets } = useMemo(() => {\r\n              let runningOffset = 0;\r\n              const offsets = new Map<\r\n                string,\r\n                { height: number; offset: number }\r\n              >();\r\n              const allItemKeys =\r\n                getGlobalStore.getState().getShadowMetadata(stateKey, path)\r\n                  ?.arrayKeys || [];\r\n\r\n              allItemKeys.forEach((itemKey) => {\r\n                const itemPath = itemKey.split('.').slice(1);\r\n                const measuredHeight =\r\n                  getGlobalStore\r\n                    .getState()\r\n                    .getShadowMetadata(stateKey, itemPath)?.virtualizer\r\n                    ?.itemHeight || itemHeight;\r\n\r\n                offsets.set(itemKey, {\r\n                  height: measuredHeight,\r\n                  offset: runningOffset,\r\n                });\r\n\r\n                runningOffset += measuredHeight;\r\n              });\r\n\r\n              measurementCache.current = offsets;\r\n              return { totalHeight: runningOffset, itemOffsets: offsets };\r\n            }, [arrayKeys.length, itemHeight]);\r\n\r\n            // Improved initial positioning effect\r\n            useLayoutEffect(() => {\r\n              if (\r\n                stickToBottom &&\r\n                arrayKeys.length > 0 &&\r\n                containerRef.current &&\r\n                !scrollStateRef.current.isUserScrolling &&\r\n                initialScrollRef.current\r\n              ) {\r\n                const container = containerRef.current;\r\n\r\n                // Wait for container to have dimensions\r\n                const waitForContainer = () => {\r\n                  if (container.clientHeight > 0) {\r\n                    const visibleCount = Math.ceil(\r\n                      container.clientHeight / itemHeight\r\n                    );\r\n                    const endIndex = arrayKeys.length - 1;\r\n                    const startIndex = Math.max(\r\n                      0,\r\n                      endIndex - visibleCount - overscan\r\n                    );\r\n\r\n                    setRange({ startIndex, endIndex });\r\n\r\n                    // Ensure scroll after range is set\r\n                    requestAnimationFrame(() => {\r\n                      scrollToBottom('instant');\r\n                      initialScrollRef.current = false; // Mark initial scroll as done\r\n                    });\r\n                  } else {\r\n                    // Container not ready, try again\r\n                    requestAnimationFrame(waitForContainer);\r\n                  }\r\n                };\r\n\r\n                waitForContainer();\r\n              }\r\n            }, [arrayKeys.length, stickToBottom, itemHeight, overscan]);\r\n\r\n            // Combined scroll handler\r\n            const handleScroll = useCallback(() => {\r\n              const container = containerRef.current;\r\n              if (!container) return;\r\n\r\n              const currentScrollTop = container.scrollTop;\r\n              const { scrollHeight, clientHeight } = container;\r\n              const scrollState = scrollStateRef.current;\r\n\r\n              // Check if user is near bottom\r\n              const distanceFromBottom =\r\n                scrollHeight - (currentScrollTop + clientHeight);\r\n              const wasNearBottom = scrollState.isNearBottom;\r\n              scrollState.isNearBottom =\r\n                distanceFromBottom <= scrollStickTolerance;\r\n\r\n              // Detect scroll direction\r\n              if (currentScrollTop < scrollState.lastScrollTop) {\r\n                // User scrolled up\r\n                scrollState.scrollUpCount++;\r\n\r\n                if (scrollState.scrollUpCount > 3 && wasNearBottom) {\r\n                  // User has deliberately scrolled away from bottom\r\n                  scrollState.isUserScrolling = true;\r\n                  console.log('User scrolled away from bottom');\r\n                }\r\n              } else if (scrollState.isNearBottom) {\r\n                // Reset if we're back near the bottom\r\n                scrollState.isUserScrolling = false;\r\n                scrollState.scrollUpCount = 0;\r\n              }\r\n\r\n              scrollState.lastScrollTop = currentScrollTop;\r\n\r\n              // Update visible range\r\n              let newStartIndex = 0;\r\n              for (let i = 0; i < arrayKeys.length; i++) {\r\n                const itemKey = arrayKeys[i];\r\n                const item = measurementCache.current.get(itemKey!);\r\n                if (item && item.offset + item.height > currentScrollTop) {\r\n                  newStartIndex = i;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              // Only update if range actually changed\r\n              if (newStartIndex !== range.startIndex) {\r\n                const visibleCount = Math.ceil(clientHeight / itemHeight);\r\n                setRange({\r\n                  startIndex: Math.max(0, newStartIndex - overscan),\r\n                  endIndex: Math.min(\r\n                    arrayKeys.length - 1,\r\n                    newStartIndex + visibleCount + overscan\r\n                  ),\r\n                });\r\n              }\r\n            }, [\r\n              arrayKeys.length,\r\n              range.startIndex,\r\n              itemHeight,\r\n              overscan,\r\n              scrollStickTolerance,\r\n            ]);\r\n\r\n            // Set up scroll listener\r\n            useEffect(() => {\r\n              const container = containerRef.current;\r\n              if (!container || !stickToBottom) return;\r\n\r\n              container.addEventListener('scroll', handleScroll, {\r\n                passive: true,\r\n              });\r\n\r\n              return () => {\r\n                container.removeEventListener('scroll', handleScroll);\r\n              };\r\n            }, [handleScroll, stickToBottom]);\r\n            const scrollToBottom = useCallback(\r\n              (behavior: ScrollBehavior = 'smooth') => {\r\n                const container = containerRef.current;\r\n                if (!container) return;\r\n\r\n                // Reset scroll state\r\n                scrollStateRef.current.isUserScrolling = false;\r\n                scrollStateRef.current.isNearBottom = true;\r\n                scrollStateRef.current.scrollUpCount = 0;\r\n\r\n                const performScroll = () => {\r\n                  // Multiple attempts to ensure we hit the bottom\r\n                  const attemptScroll = (attempts = 0) => {\r\n                    if (attempts > 5) return; // Prevent infinite loops\r\n\r\n                    const currentHeight = container.scrollHeight;\r\n                    const currentScroll = container.scrollTop;\r\n                    const clientHeight = container.clientHeight;\r\n\r\n                    // Check if we're already at the bottom\r\n                    if (currentScroll + clientHeight >= currentHeight - 1) {\r\n                      return;\r\n                    }\r\n\r\n                    container.scrollTo({\r\n                      top: currentHeight,\r\n                      behavior: behavior,\r\n                    });\r\n\r\n                    // In slow environments, check again after a short delay\r\n                    setTimeout(() => {\r\n                      const newHeight = container.scrollHeight;\r\n                      const newScroll = container.scrollTop;\r\n\r\n                      // If height changed or we're not at bottom, try again\r\n                      if (\r\n                        newHeight !== currentHeight ||\r\n                        newScroll + clientHeight < newHeight - 1\r\n                      ) {\r\n                        attemptScroll(attempts + 1);\r\n                      }\r\n                    }, 50);\r\n                  };\r\n\r\n                  attemptScroll();\r\n                };\r\n\r\n                // Use requestIdleCallback for better performance in slow environments\r\n                if ('requestIdleCallback' in window) {\r\n                  requestIdleCallback(performScroll, { timeout: 100 });\r\n                } else {\r\n                  // Fallback to rAF chain\r\n                  requestAnimationFrame(() => {\r\n                    requestAnimationFrame(performScroll);\r\n                  });\r\n                }\r\n              },\r\n              []\r\n            );\r\n            // Auto-scroll to bottom when new content arrives\r\n            // Consolidated auto-scroll effect with debouncing\r\n            useEffect(() => {\r\n              if (!stickToBottom || !containerRef.current) return;\r\n\r\n              const container = containerRef.current;\r\n              const scrollState = scrollStateRef.current;\r\n\r\n              // Debounced scroll function\r\n              let scrollTimeout: NodeJS.Timeout;\r\n              const debouncedScrollToBottom = () => {\r\n                clearTimeout(scrollTimeout);\r\n                scrollTimeout = setTimeout(() => {\r\n                  if (\r\n                    !scrollState.isUserScrolling &&\r\n                    scrollState.isNearBottom\r\n                  ) {\r\n                    scrollToBottom(\r\n                      initialScrollRef.current ? 'instant' : 'smooth'\r\n                    );\r\n                  }\r\n                }, 100);\r\n              };\r\n\r\n              // Single MutationObserver for all DOM changes\r\n              const observer = new MutationObserver(() => {\r\n                if (!scrollState.isUserScrolling) {\r\n                  debouncedScrollToBottom();\r\n                }\r\n              });\r\n\r\n              observer.observe(container, {\r\n                childList: true,\r\n                subtree: true,\r\n                attributes: true,\r\n                attributeFilter: ['style', 'class'], // More specific than just 'height'\r\n              });\r\n\r\n              // Handle image loads with event delegation\r\n              const handleImageLoad = (e: Event) => {\r\n                if (\r\n                  e.target instanceof HTMLImageElement &&\r\n                  !scrollState.isUserScrolling\r\n                ) {\r\n                  debouncedScrollToBottom();\r\n                }\r\n              };\r\n\r\n              container.addEventListener('load', handleImageLoad, true);\r\n\r\n              // Initial scroll with proper timing\r\n              if (initialScrollRef.current) {\r\n                // For initial load, wait for next tick to ensure DOM is ready\r\n                setTimeout(() => {\r\n                  scrollToBottom('instant');\r\n                }, 0);\r\n              } else {\r\n                debouncedScrollToBottom();\r\n              }\r\n\r\n              return () => {\r\n                clearTimeout(scrollTimeout);\r\n                observer.disconnect();\r\n                container.removeEventListener('load', handleImageLoad, true);\r\n              };\r\n            }, [stickToBottom, arrayKeys.length, scrollToBottom]);\r\n            // Create virtual state\r\n            const virtualState = useMemo(() => {\r\n              const store = getGlobalStore.getState();\r\n              const sourceArray = store.getShadowValue(stateKey, path) as any[];\r\n              const currentKeys =\r\n                store.getShadowMetadata(stateKey, path)?.arrayKeys || [];\r\n\r\n              const slicedArray = sourceArray.slice(\r\n                range.startIndex,\r\n                range.endIndex + 1\r\n              );\r\n              const slicedIds = currentKeys.slice(\r\n                range.startIndex,\r\n                range.endIndex + 1\r\n              );\r\n              const arrayPath = path.length > 0 ? path.join('.') : 'root';\r\n              return rebuildStateShape({\r\n                path,\r\n                componentId: componentId!,\r\n                meta: { ...meta, arrayViews: { [arrayPath]: slicedIds } },\r\n              });\r\n            }, [range.startIndex, range.endIndex, arrayKeys.length]);\r\n\r\n            return {\r\n              virtualState,\r\n              virtualizerProps: {\r\n                outer: {\r\n                  ref: containerRef,\r\n                  style: {\r\n                    overflowY: 'auto',\r\n                    height: '100%',\r\n                    position: 'relative',\r\n                  },\r\n                },\r\n                inner: {\r\n                  style: {\r\n                    height: `${totalHeight}px`,\r\n                    position: 'relative',\r\n                  },\r\n                },\r\n                list: {\r\n                  style: {\r\n                    transform: `translateY(${\r\n                      measurementCache.current.get(arrayKeys[range.startIndex]!)\r\n                        ?.offset || 0\r\n                    }px)`,\r\n                  },\r\n                },\r\n              },\r\n              scrollToBottom,\r\n              scrollToIndex: (\r\n                index: number,\r\n                behavior: ScrollBehavior = 'smooth'\r\n              ) => {\r\n                if (containerRef.current && arrayKeys[index]) {\r\n                  const offset =\r\n                    measurementCache.current.get(arrayKeys[index]!)?.offset ||\r\n                    0;\r\n                  containerRef.current.scrollTo({ top: offset, behavior });\r\n                }\r\n              },\r\n            };\r\n          };\r\n        }\r\n        if (prop === 'stateMap') {\r\n          return (\r\n            callbackfn: (setter: any, index: number, arraySetter: any) => void\r\n          ) => {\r\n            // FIX: Use getArrayData to reliably get both the value and the keys of the current view.\r\n            const { value: shadowValue, keys: arrayKeys } = getArrayData(\r\n              stateKey,\r\n              path,\r\n              meta\r\n            );\r\n\r\n            if (!arrayKeys || !Array.isArray(shadowValue)) {\r\n              return []; // It's valid to map over an empty array.\r\n            }\r\n\r\n            const arraySetter = rebuildStateShape({\r\n              path,\r\n              componentId: componentId!,\r\n              meta,\r\n            });\r\n\r\n            return shadowValue.map((_item, index) => {\r\n              const itemKey = arrayKeys[index];\r\n              if (!itemKey) return undefined;\r\n\r\n              // FIX: Construct the correct path to the item in the original store.\r\n              // The path is the array's path plus the specific item's unique key.\r\n              const itemPath = [...path, itemKey];\r\n\r\n              const itemSetter = rebuildStateShape({\r\n                path: itemPath, // This now correctly points to the item in the shadow store.\r\n                componentId: componentId!,\r\n                meta,\r\n              });\r\n\r\n              return callbackfn(itemSetter, index, arraySetter);\r\n            });\r\n          };\r\n        }\r\n\r\n        if (prop === 'stateFilter') {\r\n          return (callbackfn: (value: any, index: number) => boolean) => {\r\n            // --- CHANGED LOGIC START ---\r\n\r\n            const arrayPathKey = path.length > 0 ? path.join('.') : 'root';\r\n            // Get the IDs for the current view of THIS array, or all keys if no view exists\r\n            const currentViewIds =\r\n              meta?.arrayViews?.[arrayPathKey] ??\r\n              Object.keys(getShadowMetadata(stateKey, path) || {}).filter((k) =>\r\n                k.startsWith('id:')\r\n              );\r\n\r\n            const array = getShadowValue(stateKey, path, currentViewIds);\r\n\r\n            if (!Array.isArray(array)) {\r\n              throw new Error('stateFilter can only be used on arrays');\r\n            }\r\n\r\n            // Filter the array and collect the IDs of the items that pass\r\n            const filteredIds: string[] = [];\r\n            array.forEach((item, index) => {\r\n              if (callbackfn(item, index)) {\r\n                // currentViewIds[index] is the original ID before filtering\r\n                const id = currentViewIds[index];\r\n                if (id) {\r\n                  filteredIds.push(id);\r\n                }\r\n              }\r\n            });\r\n            const arrayPath = path.length > 0 ? path.join('.') : 'root';\r\n            return rebuildStateShape({\r\n              path,\r\n              componentId: componentId!,\r\n              meta: {\r\n                ...meta,\r\n                // Create a new arrayViews object, preserving other views and setting the new one for this path\r\n                arrayViews: {\r\n                  ...(meta?.arrayViews || {}),\r\n                  [arrayPath]: filteredIds,\r\n                },\r\n                transforms: [\r\n                  ...(meta?.transforms || []),\r\n                  { type: 'filter', fn: callbackfn, path },\r\n                ],\r\n              },\r\n            });\r\n\r\n            // --- CHANGED LOGIC END ---\r\n          };\r\n        }\r\n        if (prop === 'stateSort') {\r\n          return (compareFn: (a: any, b: any) => number) => {\r\n            const arrayPathKey = path.join('.');\r\n\r\n            // FIX: Use the more robust `getArrayData` which always correctly resolves the keys for a view.\r\n            const { value: currentArray, keys: currentViewIds } = getArrayData(\r\n              stateKey,\r\n              path,\r\n              meta\r\n            );\r\n\r\n            if (!Array.isArray(currentArray) || !currentViewIds) {\r\n              throw new Error('No array keys found for sorting');\r\n            }\r\n\r\n            // ... (rest of the function is the same and now works)\r\n            const itemsWithIds = currentArray.map((item, index) => ({\r\n              item,\r\n              key: currentViewIds[index],\r\n            }));\r\n            itemsWithIds.sort((a, b) => compareFn(a.item, b.item));\r\n            const sortedIds = itemsWithIds.map((i) => i.key as string);\r\n\r\n            return rebuildStateShape({\r\n              path,\r\n              componentId: componentId!,\r\n              meta: {\r\n                ...meta,\r\n                arrayViews: {\r\n                  ...(meta?.arrayViews || {}),\r\n                  ['arrayPathKey']: sortedIds,\r\n                },\r\n                transforms: [\r\n                  ...(meta?.transforms || []),\r\n                  { type: 'sort', fn: compareFn, path },\r\n                ],\r\n              },\r\n            });\r\n          };\r\n        }\r\n        // In createProxyHandler, inside the get trap where you have other array methods:\r\n        if (prop === 'stream') {\r\n          return function <U = InferArrayElement<T>, R = U>(\r\n            options: StreamOptions<U, R> = {}\r\n          ): StreamHandle<U> {\r\n            const {\r\n              bufferSize = 100,\r\n              flushInterval = 100,\r\n              bufferStrategy = 'accumulate',\r\n              store,\r\n              onFlush,\r\n            } = options;\r\n\r\n            let buffer: U[] = [];\r\n            let isPaused = false;\r\n            let flushTimer: NodeJS.Timeout | null = null;\r\n\r\n            const addToBuffer = (item: U) => {\r\n              if (isPaused) return;\r\n\r\n              if (bufferStrategy === 'sliding' && buffer.length >= bufferSize) {\r\n                buffer.shift();\r\n              } else if (\r\n                bufferStrategy === 'dropping' &&\r\n                buffer.length >= bufferSize\r\n              ) {\r\n                return;\r\n              }\r\n\r\n              buffer.push(item);\r\n\r\n              if (buffer.length >= bufferSize) {\r\n                flushBuffer();\r\n              }\r\n            };\r\n\r\n            const flushBuffer = () => {\r\n              if (buffer.length === 0) return;\r\n\r\n              const toFlush = [...buffer];\r\n              buffer = [];\r\n\r\n              if (store) {\r\n                const result = store(toFlush);\r\n                if (result !== undefined) {\r\n                  const items = Array.isArray(result) ? result : [result];\r\n                  items.forEach((item) => {\r\n                    effectiveSetState(item as any, path, {\r\n                      updateType: 'insert',\r\n                    });\r\n                  });\r\n                }\r\n              } else {\r\n                toFlush.forEach((item) => {\r\n                  effectiveSetState(item as any, path, {\r\n                    updateType: 'insert',\r\n                  });\r\n                });\r\n              }\r\n\r\n              onFlush?.(toFlush);\r\n            };\r\n\r\n            if (flushInterval > 0) {\r\n              flushTimer = setInterval(flushBuffer, flushInterval);\r\n            }\r\n\r\n            const streamId = uuidv4();\r\n            const currentMeta = getShadowMetadata(stateKey, path) || {};\r\n            const streams = currentMeta.streams || new Map();\r\n            streams.set(streamId, { buffer, flushTimer });\r\n\r\n            setShadowMetadata(stateKey, path, {\r\n              ...currentMeta,\r\n              streams,\r\n            });\r\n\r\n            return {\r\n              write: (data: U) => addToBuffer(data),\r\n              writeMany: (data: U[]) => data.forEach(addToBuffer),\r\n              flush: () => flushBuffer(),\r\n              pause: () => {\r\n                isPaused = true;\r\n              },\r\n              resume: () => {\r\n                isPaused = false;\r\n                if (buffer.length > 0) flushBuffer();\r\n              },\r\n              close: () => {\r\n                flushBuffer();\r\n                if (flushTimer) clearInterval(flushTimer);\r\n\r\n                const meta = getGlobalStore\r\n                  .getState()\r\n                  .getShadowMetadata(stateKey, path);\r\n                if (meta?.streams) {\r\n                  meta.streams.delete(streamId);\r\n                }\r\n              },\r\n            };\r\n          };\r\n        }\r\n\r\n        if (prop === 'stateList') {\r\n          return (\r\n            callbackfn: (\r\n              setter: any,\r\n              index: number,\r\n              arraySetter: any\r\n            ) => ReactNode\r\n          ) => {\r\n            const StateListWrapper = () => {\r\n              const componentIdsRef = useRef<Map<string, string>>(new Map());\r\n\r\n              const cacheKey =\r\n                meta?.transforms && meta.transforms.length > 0\r\n                  ? `${componentId}-${hashTransforms(meta.transforms)}`\r\n                  : `${componentId}-base`;\r\n\r\n              const [updateTrigger, forceUpdate] = useState({});\r\n\r\n              const { keys: validIds, value: arrayValues } = getArrayData(\r\n                stateKey,\r\n                path,\r\n                meta\r\n              );\r\n              useEffect(() => {\r\n                const unsubscribe = getGlobalStore\r\n                  .getState()\r\n                  .subscribeToPath(stateKeyPathKey, (e) => {\r\n                    // A data change has occurred for the source array.\r\n                    console.log('changed array statelist  ', e);\r\n                    if (e.type === 'GET_SELECTED') {\r\n                      return;\r\n                    }\r\n                    const shadowMeta = getGlobalStore\r\n                      .getState()\r\n                      .getShadowMetadata(stateKey, path);\r\n\r\n                    const caches = shadowMeta?.transformCaches;\r\n                    if (caches) {\r\n                      // Iterate over ALL keys in the cache map.\r\n                      for (const key of caches.keys()) {\r\n                        // If the key belongs to this component instance, delete it.\r\n                        // This purges caches for 'sort by name', 'sort by score', etc.\r\n                        if (key.startsWith(componentId)) {\r\n                          caches.delete(key);\r\n                        }\r\n                      }\r\n                    }\r\n\r\n                    if (\r\n                      e.type === 'INSERT' ||\r\n                      e.type === 'REMOVE' ||\r\n                      e.type === 'CLEAR_SELECTION'\r\n                    ) {\r\n                      forceUpdate({});\r\n                    }\r\n                  });\r\n\r\n                return () => {\r\n                  unsubscribe();\r\n                };\r\n\r\n                // This effect's logic now depends on the componentId to perform the purge.\r\n              }, [componentId, stateKeyPathKey]);\r\n\r\n              if (!Array.isArray(arrayValues)) {\r\n                return null;\r\n              }\r\n\r\n              const arraySetter = rebuildStateShape({\r\n                path,\r\n                componentId: componentId!,\r\n                meta,\r\n              });\r\n\r\n              console.log('arrayValues', arrayValues);\r\n\r\n              return (\r\n                <>\r\n                  {arrayValues.map((item, localIndex) => {\r\n                    const itemKey = validIds[localIndex];\r\n\r\n                    if (!itemKey) {\r\n                      return null;\r\n                    }\r\n\r\n                    let itemComponentId = componentIdsRef.current.get(itemKey);\r\n                    if (!itemComponentId) {\r\n                      itemComponentId = uuidv4();\r\n                      componentIdsRef.current.set(itemKey, itemComponentId);\r\n                    }\r\n\r\n                    const itemPath = [...path, itemKey];\r\n\r\n                    return createElement(MemoizedCogsItemWrapper, {\r\n                      key: itemKey,\r\n                      stateKey,\r\n                      itemComponentId,\r\n                      itemPath,\r\n                      localIndex,\r\n                      arraySetter,\r\n                      rebuildStateShape,\r\n                      renderFn: callbackfn,\r\n                    });\r\n                  })}\r\n                </>\r\n              );\r\n            };\r\n\r\n            return <StateListWrapper />;\r\n          };\r\n        }\r\n        if (prop === 'stateFlattenOn') {\r\n          return (fieldName: string) => {\r\n            // FIX: Get the definitive list of IDs for the current view from meta.arrayViews.\r\n            const arrayPathKey = path.join('.');\r\n            const viewIds = meta?.arrayViews?.[arrayPathKey];\r\n\r\n            const currentState = getGlobalStore\r\n              .getState()\r\n              .getShadowValue(stateKey, path, viewIds);\r\n\r\n            if (!Array.isArray(currentState)) return [];\r\n\r\n            stateVersion++;\r\n\r\n            return rebuildStateShape({\r\n              path: [...path, '[*]', fieldName],\r\n              componentId: componentId!,\r\n              meta,\r\n            });\r\n          };\r\n        }\r\n        if (prop === 'index') {\r\n          return (index: number) => {\r\n            const arrayPathKey = path.join('.');\r\n            const viewIds = meta?.arrayViews?.[arrayPathKey];\r\n\r\n            if (viewIds) {\r\n              const itemId = viewIds[index];\r\n              if (!itemId) return undefined;\r\n\r\n              return rebuildStateShape({\r\n                path: [...path, itemId],\r\n                componentId: componentId!,\r\n                meta,\r\n              });\r\n            }\r\n\r\n            // No view, use natural order\r\n            const node = getShadowMetadata(stateKey, path);\r\n            if (!node) return undefined;\r\n\r\n            const idKeys = Object.keys(node).filter((k) => k.startsWith('id:'));\r\n            const itemId = idKeys[index];\r\n            if (!itemId) return undefined;\r\n\r\n            return rebuildStateShape({\r\n              path: [...path, itemId],\r\n              componentId: componentId!,\r\n              meta,\r\n            });\r\n          };\r\n        }\r\n        if (prop === 'last') {\r\n          return () => {\r\n            const { value: currentArray } = getScopedData(stateKey, path, meta);\r\n            if (currentArray.length === 0) return undefined;\r\n            const lastIndex = currentArray.length - 1;\r\n            const lastValue = currentArray[lastIndex];\r\n            const newPath = [...path, lastIndex.toString()];\r\n            return rebuildStateShape({\r\n              path: newPath,\r\n              componentId: componentId!,\r\n              meta,\r\n            });\r\n          };\r\n        }\r\n        if (prop === 'insert') {\r\n          return (\r\n            payload: InsertParams<InferArrayElement<T>>,\r\n            index?: number\r\n          ) => {\r\n            effectiveSetState(payload as any, path, { updateType: 'insert' });\r\n          };\r\n        }\r\n        if (prop === 'uniqueInsert') {\r\n          return (\r\n            payload: UpdateArg<T>,\r\n            fields?: (keyof InferArrayElement<T>)[],\r\n            onMatch?: (existingItem: any) => any\r\n          ) => {\r\n            const { value: currentArray } = getScopedData(\r\n              stateKey,\r\n              path,\r\n              meta\r\n            ) as {\r\n              value: any[];\r\n            };\r\n            const newValue = isFunction<T>(payload)\r\n              ? payload(currentArray as any)\r\n              : (payload as any);\r\n\r\n            let matchedItem: any = null;\r\n            const isUnique = !currentArray.some((item) => {\r\n              const isMatch = fields\r\n                ? fields.every((field) =>\r\n                    isDeepEqual(item[field], newValue[field])\r\n                  )\r\n                : isDeepEqual(item, newValue);\r\n              if (isMatch) matchedItem = item;\r\n              return isMatch;\r\n            });\r\n\r\n            if (isUnique) {\r\n              effectiveSetState(newValue, path, { updateType: 'insert' });\r\n            } else if (onMatch && matchedItem) {\r\n              const updatedItem = onMatch(matchedItem);\r\n              const updatedArray = currentArray.map((item) =>\r\n                isDeepEqual(item, matchedItem) ? updatedItem : item\r\n              );\r\n\r\n              effectiveSetState(updatedArray as any, path, {\r\n                updateType: 'update',\r\n              });\r\n            }\r\n          };\r\n        }\r\n\r\n        if (prop === 'cut') {\r\n          return (index?: number, options?: { waitForSync?: boolean }) => {\r\n            const array = getShadowValue(stateKey, path);\r\n\r\n            if (!Array.isArray(array) || array.length === 0) return;\r\n\r\n            const node = getShadowMetadata(stateKey, path);\r\n            if (!node) return;\r\n\r\n            // Get the ID keys in their natural order\r\n            const idKeys = Object.keys(node).filter((k) => k.startsWith('id:'));\r\n\r\n            const indexToCut =\r\n              index === -1\r\n                ? idKeys.length - 1\r\n                : index !== undefined\r\n                  ? index\r\n                  : idKeys.length - 1;\r\n\r\n            const idToCut = idKeys[indexToCut];\r\n            if (!idToCut) return;\r\n\r\n            // Cut uses the path with the id\r\n            effectiveSetState(null, [...path, idToCut], {\r\n              updateType: 'cut',\r\n            });\r\n          };\r\n        }\r\n        if (prop === 'cutSelected') {\r\n          return () => {\r\n            const arrayKey = [stateKey, ...path].join('.');\r\n\r\n            // FIX: Get the definitive list of IDs for the current view directly from meta.arrayViews.\r\n            const arrayPathKey = path.join('.');\r\n            const { keys: currentViewIds } = getArrayData(stateKey, path, meta);\r\n\r\n            if (!currentViewIds || currentViewIds.length === 0) {\r\n              return;\r\n            }\r\n\r\n            const selectedItemKey = getGlobalStore\r\n              .getState()\r\n              .selectedIndicesMap.get(arrayKey);\r\n\r\n            if (!selectedItemKey) {\r\n              return;\r\n            }\r\n\r\n            // Important: The original code was missing this check.\r\n            // We must ensure the selected item is part of the CURRENT view before cutting.\r\n            const selectedId = selectedItemKey.split('.').pop() as string;\r\n            if (!(currentViewIds as any[]).includes(selectedId!)) {\r\n              return;\r\n            }\r\n\r\n            // The rest of the logic remains untouched.\r\n            const pathForCut = selectedItemKey.split('.').slice(1);\r\n            getGlobalStore.getState().clearSelectedIndex({ arrayKey });\r\n\r\n            const parentPath = pathForCut.slice(0, -1);\r\n            notifySelectionComponents(stateKey, parentPath);\r\n\r\n            effectiveSetState(null, pathForCut, {\r\n              updateType: 'cut',\r\n            });\r\n          };\r\n        }\r\n        if (prop === 'cutByValue') {\r\n          return (value: string | number | boolean) => {\r\n            const {\r\n              isArray,\r\n              value: array,\r\n              keys,\r\n            } = getArrayData(stateKey, path, meta);\r\n\r\n            if (!isArray) return;\r\n\r\n            const found = findArrayItem(array, keys, (item) => item === value);\r\n            if (found) {\r\n              effectiveSetState(null, [...path, found.key], {\r\n                updateType: 'cut',\r\n              });\r\n            }\r\n          };\r\n        }\r\n\r\n        if (prop === 'toggleByValue') {\r\n          return (value: string | number | boolean) => {\r\n            const {\r\n              isArray,\r\n              value: array,\r\n              keys,\r\n            } = getArrayData(stateKey, path, meta);\r\n\r\n            if (!isArray) return;\r\n\r\n            const found = findArrayItem(array, keys, (item) => item === value);\r\n\r\n            if (found) {\r\n              const pathForItem = [...path, found.key];\r\n\r\n              effectiveSetState(null, pathForItem, {\r\n                updateType: 'cut',\r\n              });\r\n            } else {\r\n              effectiveSetState(value as any, path, { updateType: 'insert' });\r\n            }\r\n          };\r\n        }\r\n        if (prop === 'findWith') {\r\n          return (searchKey: string, searchValue: any) => {\r\n            const { isArray, value, keys } = getArrayData(stateKey, path, meta);\r\n\r\n            if (!isArray) {\r\n              throw new Error('findWith can only be used on arrays');\r\n            }\r\n\r\n            const found = findArrayItem(\r\n              value,\r\n              keys,\r\n              (item) => item?.[searchKey] === searchValue\r\n            );\r\n\r\n            // FIX: If found, return a proxy to the item by appending its key to the current path.\r\n            if (found) {\r\n              return rebuildStateShape({\r\n                path: [...path, found.key], // e.g., ['itemInstances', 'inst-1', 'properties', 'prop-b']\r\n                componentId: componentId!,\r\n                meta,\r\n              });\r\n            }\r\n\r\n            // If not found, return an 'empty' proxy that will resolve to undefined on .get()\r\n            // This prevents \"cannot read property 'get' of undefined\" errors.\r\n            return rebuildStateShape({\r\n              path: [...path, `not_found_${uuidv4()}`],\r\n              componentId: componentId!,\r\n              meta,\r\n            });\r\n          };\r\n        }\r\n        if (prop === 'cutThis') {\r\n          const { value: shadowValue } = getScopedData(stateKey, path, meta);\r\n\r\n          return () => {\r\n            effectiveSetState(shadowValue, path, { updateType: 'cut' });\r\n          };\r\n        }\r\n\r\n        if (prop === 'get') {\r\n          return () => {\r\n            registerComponentDependency(stateKey, componentId, path);\r\n            const { value } = getScopedData(stateKey, path, meta);\r\n            return value;\r\n          };\r\n        }\r\n\r\n        if (prop === '$derive') {\r\n          return (fn: any) =>\r\n            $cogsSignal({\r\n              _stateKey: stateKey,\r\n              _path: path,\r\n              _effect: fn.toString(),\r\n              _meta: meta,\r\n            });\r\n        }\r\n        // in CogsState.ts -> createProxyHandler -> handler -> get\r\n\r\n        if (prop === '$get') {\r\n          return () =>\r\n            $cogsSignal({ _stateKey: stateKey, _path: path, _meta: meta });\r\n        }\r\n        if (prop === 'lastSynced') {\r\n          const syncKey = `${stateKey}:${path.join('.')}`;\r\n          return getSyncInfo(syncKey);\r\n        }\r\n        if (prop == 'getLocalStorage') {\r\n          return (key: string) =>\r\n            loadFromLocalStorage(sessionId + '-' + stateKey + '-' + key);\r\n        }\r\n        if (prop === 'isSelected') {\r\n          const parentPathArray = path.slice(0, -1);\r\n          const parentMeta = getShadowMetadata(stateKey, parentPathArray);\r\n\r\n          // FIX: Check if the parent is an array by looking for arrayKeys in its metadata.\r\n          if (parentMeta?.arrayKeys) {\r\n            const fullParentKey = stateKey + '.' + parentPathArray.join('.');\r\n            const selectedItemKey = getGlobalStore\r\n              .getState()\r\n              .selectedIndicesMap.get(fullParentKey);\r\n\r\n            const fullItemKey = stateKey + '.' + path.join('.');\r\n\r\n            // Logic remains the same.\r\n            notifySelectionComponents(stateKey, parentPathArray, undefined);\r\n            return selectedItemKey === fullItemKey;\r\n          }\r\n          return undefined;\r\n        }\r\n\r\n        // Then use it in both:\r\n        if (prop === 'setSelected') {\r\n          return (value: boolean) => {\r\n            const parentPath = path.slice(0, -1);\r\n            const fullParentKey = stateKey + '.' + parentPath.join('.');\r\n            const fullItemKey = stateKey + '.' + path.join('.');\r\n\r\n            notifySelectionComponents(stateKey, parentPath, undefined);\r\n\r\n            const selectedIndex = getGlobalStore\r\n              .getState()\r\n              .selectedIndicesMap.get(fullParentKey);\r\n\r\n            if (value) {\r\n              getGlobalStore\r\n                .getState()\r\n                .setSelectedIndex(fullParentKey, fullItemKey);\r\n            }\r\n          };\r\n        }\r\n\r\n        if (prop === 'toggleSelected') {\r\n          return () => {\r\n            const parentPath = path.slice(0, -1);\r\n            const fullParentKey = stateKey + '.' + parentPath.join('.');\r\n            const fullItemKey = stateKey + '.' + path.join('.');\r\n\r\n            const currentSelected = getGlobalStore\r\n              .getState()\r\n              .selectedIndicesMap.get(fullParentKey);\r\n\r\n            if (currentSelected === fullItemKey) {\r\n              getGlobalStore\r\n                .getState()\r\n                .clearSelectedIndex({ arrayKey: fullParentKey });\r\n            } else {\r\n              getGlobalStore\r\n                .getState()\r\n                .setSelectedIndex(fullParentKey, fullItemKey);\r\n            }\r\n          };\r\n        }\r\n        if (prop === '_componentId') {\r\n          return componentId;\r\n        }\r\n        if (path.length == 0) {\r\n          if (prop === 'addZodValidation') {\r\n            return (zodErrors: any[]) => {\r\n              zodErrors.forEach((error) => {\r\n                const currentMeta =\r\n                  getGlobalStore\r\n                    .getState()\r\n                    .getShadowMetadata(stateKey, error.path) || {};\r\n\r\n                getGlobalStore\r\n                  .getState()\r\n                  .setShadowMetadata(stateKey, error.path, {\r\n                    ...currentMeta,\r\n                    validation: {\r\n                      status: 'INVALID',\r\n                      errors: [\r\n                        {\r\n                          source: 'client',\r\n                          message: error.message,\r\n                          severity: 'error',\r\n                          code: error.code,\r\n                        },\r\n                      ],\r\n                      lastValidated: Date.now(),\r\n                      validatedValue: undefined,\r\n                    },\r\n                  });\r\n              });\r\n            };\r\n          }\r\n          if (prop === 'clearZodValidation') {\r\n            return (path?: string[]) => {\r\n              if (!path) {\r\n                throw new Error('clearZodValidation requires a path');\r\n              }\r\n\r\n              const currentMeta = getShadowMetadata(stateKey, path) || {};\r\n\r\n              setShadowMetadata(stateKey, path, {\r\n                ...currentMeta,\r\n                validation: {\r\n                  status: 'NOT_VALIDATED',\r\n                  errors: [],\r\n                  lastValidated: Date.now(),\r\n                },\r\n              });\r\n            };\r\n          }\r\n          if (prop === 'applyJsonPatch') {\r\n            return (patches: Operation[]) => {\r\n              const store = getGlobalStore.getState();\r\n              const rootMeta = store.getShadowMetadata(stateKey, []);\r\n              if (!rootMeta?.components) return;\r\n\r\n              const convertPath = (jsonPath: string): string[] => {\r\n                if (!jsonPath || jsonPath === '/') return [];\r\n                return jsonPath\r\n                  .split('/')\r\n                  .slice(1)\r\n                  .map((p) => p.replace(/~1/g, '/').replace(/~0/g, '~'));\r\n              };\r\n\r\n              const notifiedComponents = new Set<string>();\r\n\r\n              for (const patch of patches) {\r\n                const relativePath = convertPath(patch.path);\r\n\r\n                switch (patch.op) {\r\n                  case 'add':\r\n                  case 'replace': {\r\n                    const { value } = patch as {\r\n                      op: 'add' | 'replace';\r\n                      path: string;\r\n                      value: any;\r\n                    };\r\n                    store.updateShadowAtPath(stateKey, relativePath, value);\r\n\r\n                    store.markAsDirty(stateKey, relativePath, { bubble: true });\r\n\r\n                    // Bubble up - notify components at this path and all parent paths\r\n                    let currentPath = [...relativePath];\r\n                    while (true) {\r\n                      const pathMeta = store.getShadowMetadata(\r\n                        stateKey,\r\n                        currentPath\r\n                      );\r\n\r\n                      if (pathMeta?.pathComponents) {\r\n                        pathMeta.pathComponents.forEach((componentId) => {\r\n                          if (!notifiedComponents.has(componentId)) {\r\n                            const component =\r\n                              rootMeta.components?.get(componentId);\r\n                            if (component) {\r\n                              component.forceUpdate();\r\n                              notifiedComponents.add(componentId);\r\n                            }\r\n                          }\r\n                        });\r\n                      }\r\n\r\n                      if (currentPath.length === 0) break;\r\n                      currentPath.pop(); // Go up one level\r\n                    }\r\n                    break;\r\n                  }\r\n                  case 'remove': {\r\n                    const parentPath = relativePath.slice(0, -1);\r\n                    store.removeShadowArrayElement(stateKey, relativePath);\r\n                    store.markAsDirty(stateKey, parentPath, { bubble: true });\r\n\r\n                    // Bubble up from parent path\r\n                    let currentPath = [...parentPath];\r\n                    while (true) {\r\n                      const pathMeta = store.getShadowMetadata(\r\n                        stateKey,\r\n                        currentPath\r\n                      );\r\n                      if (pathMeta?.pathComponents) {\r\n                        pathMeta.pathComponents.forEach((componentId) => {\r\n                          if (!notifiedComponents.has(componentId)) {\r\n                            const component =\r\n                              rootMeta.components?.get(componentId);\r\n                            if (component) {\r\n                              component.forceUpdate();\r\n                              notifiedComponents.add(componentId);\r\n                            }\r\n                          }\r\n                        });\r\n                      }\r\n\r\n                      if (currentPath.length === 0) break;\r\n                      currentPath.pop();\r\n                    }\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n            };\r\n          }\r\n\r\n          if (prop === 'getComponents')\r\n            return () => getShadowMetadata(stateKey, [])?.components;\r\n          if (prop === 'getAllFormRefs')\r\n            return () =>\r\n              formRefStore.getState().getFormRefsByStateKey(stateKey);\r\n        }\r\n        if (prop === 'getFormRef') {\r\n          return () =>\r\n            formRefStore.getState().getFormRef(stateKey + '.' + path.join('.'));\r\n        }\r\n        if (prop === 'validationWrapper') {\r\n          return ({\r\n            children,\r\n            hideMessage,\r\n          }: {\r\n            children: React.ReactNode;\r\n            hideMessage?: boolean;\r\n          }) => (\r\n            <ValidationWrapper\r\n              formOpts={\r\n                hideMessage ? { validation: { message: '' } } : undefined\r\n              }\r\n              path={path}\r\n              stateKey={stateKey}\r\n            >\r\n              {children}\r\n            </ValidationWrapper>\r\n          );\r\n        }\r\n        if (prop === '_stateKey') return stateKey;\r\n        if (prop === '_path') return path;\r\n        if (prop === 'update') {\r\n          // This method is now greatly simplified.\r\n          // All the complex batching logic has been removed because our new,\r\n          // universal `createEffectiveSetState` function handles it automatically for all operations.\r\n          return (payload: UpdateArg<T>) => {\r\n            // Simply call effectiveSetState. It will automatically handle queuing\r\n            // this operation in the batch for efficient processing.\r\n            effectiveSetState(payload as any, path, { updateType: 'update' });\r\n\r\n            // The .synced() method is a useful feature that allows developers\r\n            // to manually mark a piece of state as \"synced with the server\"\r\n            // after an update. This part of the functionality is preserved.\r\n            return {\r\n              synced: () => {\r\n                const shadowMeta = getGlobalStore\r\n                  .getState()\r\n                  .getShadowMetadata(stateKey, path);\r\n\r\n                // Update the metadata for this specific path\r\n                setShadowMetadata(stateKey, path, {\r\n                  ...shadowMeta,\r\n                  isDirty: false,\r\n                  stateSource: 'server',\r\n                  lastServerSync: Date.now(),\r\n                });\r\n\r\n                // Notify any components that might be subscribed to the sync status\r\n                const fullPath = [stateKey, ...path].join('.');\r\n                notifyPathSubscribers(fullPath, {\r\n                  type: 'SYNC_STATUS_CHANGE',\r\n                  isDirty: false,\r\n                });\r\n              },\r\n            };\r\n          };\r\n        }\r\n        if (prop === 'toggle') {\r\n          const { value: currentValueAtPath } = getScopedData(\r\n            stateKey,\r\n            path,\r\n            meta\r\n          );\r\n\r\n          if (typeof currentValueAtPath != 'boolean') {\r\n            throw new Error('toggle() can only be used on boolean values');\r\n          }\r\n          return () => {\r\n            effectiveSetState(!currentValueAtPath as any, path, {\r\n              updateType: 'update',\r\n            });\r\n          };\r\n        }\r\n        if (prop === 'formElement') {\r\n          return (child: FormControl<T>, formOpts?: FormOptsType) => {\r\n            return (\r\n              <FormElementWrapper\r\n                stateKey={stateKey}\r\n                path={path}\r\n                rebuildStateShape={rebuildStateShape}\r\n                setState={effectiveSetState}\r\n                formOpts={formOpts}\r\n                renderFn={child as any}\r\n              />\r\n            );\r\n          };\r\n        }\r\n        const nextPath = [...path, prop];\r\n        const nextValue = getGlobalStore\r\n          .getState()\r\n          .getShadowValue(stateKey, nextPath);\r\n        return rebuildStateShape({\r\n          path: nextPath,\r\n          componentId: componentId!,\r\n          meta,\r\n        });\r\n      },\r\n    };\r\n\r\n    const proxyInstance = new Proxy({}, handler);\r\n    proxyCache.set(cacheKey, proxyInstance);\r\n\r\n    return proxyInstance;\r\n  }\r\n\r\n  const rootLevelMethods = {\r\n    revertToInitialState: (obj?: { validationKey?: string }) => {\r\n      const shadowMeta = getGlobalStore\r\n        .getState()\r\n        .getShadowMetadata(stateKey, []);\r\n      let revertState;\r\n\r\n      if (shadowMeta?.stateSource === 'server' && shadowMeta.baseServerState) {\r\n        // Revert to last known server state\r\n        revertState = shadowMeta.baseServerState;\r\n      } else {\r\n        // Revert to initial/default state\r\n        revertState = getGlobalStore.getState().initialStateGlobal[stateKey];\r\n      }\r\n      const initialState =\r\n        getGlobalStore.getState().initialStateGlobal[stateKey];\r\n\r\n      clearSelectedIndexesForState(stateKey);\r\n\r\n      stateVersion++;\r\n      initializeShadowState(stateKey, initialState);\r\n      rebuildStateShape({\r\n        path: [],\r\n        componentId: componentId!,\r\n      });\r\n      const initalOptionsGet = getInitialOptions(stateKey as string);\r\n      const localKey = isFunction(initalOptionsGet?.localStorage?.key)\r\n        ? initalOptionsGet?.localStorage?.key(initialState)\r\n        : initalOptionsGet?.localStorage?.key;\r\n\r\n      const storageKey = `${sessionId}-${stateKey}-${localKey}`;\r\n\r\n      if (storageKey) {\r\n        localStorage.removeItem(storageKey);\r\n      }\r\n\r\n      const stateEntry = getGlobalStore\r\n        .getState()\r\n        .getShadowMetadata(stateKey, []);\r\n      if (stateEntry) {\r\n        stateEntry?.components?.forEach((component) => {\r\n          component.forceUpdate();\r\n        });\r\n      }\r\n\r\n      return initialState;\r\n    },\r\n    updateInitialState: (newState: T) => {\r\n      stateVersion++;\r\n\r\n      const newUpdaterState = createProxyHandler(\r\n        stateKey,\r\n        effectiveSetState,\r\n        componentId,\r\n        sessionId\r\n      );\r\n      const initialState =\r\n        getGlobalStore.getState().initialStateGlobal[stateKey];\r\n      const initalOptionsGet = getInitialOptions(stateKey as string);\r\n      const localKey = isFunction(initalOptionsGet?.localStorage?.key)\r\n        ? initalOptionsGet?.localStorage?.key(initialState)\r\n        : initalOptionsGet?.localStorage?.key;\r\n\r\n      const storageKey = `${sessionId}-${stateKey}-${localKey}`;\r\n\r\n      if (localStorage.getItem(storageKey)) {\r\n        localStorage.removeItem(storageKey);\r\n      }\r\n      startTransition(() => {\r\n        updateInitialStateGlobal(stateKey, newState);\r\n        initializeShadowState(stateKey, newState);\r\n        // initializeShadowStateNEW(stateKey, newState);\r\n\r\n        const stateEntry = getGlobalStore\r\n          .getState()\r\n          .getShadowMetadata(stateKey, []);\r\n\r\n        if (stateEntry) {\r\n          stateEntry?.components?.forEach((component) => {\r\n            component.forceUpdate();\r\n          });\r\n        }\r\n      });\r\n\r\n      return {\r\n        fetchId: (field: keyof T) => (newUpdaterState.get() as any)[field],\r\n      };\r\n    },\r\n  };\r\n\r\n  const returnShape = rebuildStateShape({\r\n    componentId,\r\n    path: [],\r\n  });\r\n\r\n  return returnShape;\r\n}\r\n\r\nexport function $cogsSignal(proxy: {\r\n  _path: string[];\r\n  _stateKey: string;\r\n  _effect?: string;\r\n\r\n  _meta?: MetaData;\r\n}) {\r\n  return createElement(SignalRenderer, { proxy });\r\n}\r\n\r\nfunction SignalRenderer({\r\n  proxy,\r\n}: {\r\n  proxy: {\r\n    _path: string[];\r\n    _stateKey: string;\r\n    _effect?: string;\r\n    _meta?: MetaData;\r\n  };\r\n}) {\r\n  const elementRef = useRef<HTMLSpanElement>(null);\r\n  const instanceIdRef = useRef<string | null>(null);\r\n  const isSetupRef = useRef(false);\r\n  const signalId = `${proxy._stateKey}-${proxy._path.join('.')}`;\r\n  const arrayPathKey = proxy._path.join('.');\r\n  const viewIds = proxy._meta?.arrayViews?.[arrayPathKey];\r\n\r\n  const value = getShadowValue(proxy._stateKey, proxy._path, viewIds);\r\n\r\n  // Setup effect - runs only once\r\n  useEffect(() => {\r\n    const element = elementRef.current;\r\n    if (!element || isSetupRef.current) return;\r\n\r\n    const timeoutId = setTimeout(() => {\r\n      if (!element.parentElement) {\r\n        console.warn('Parent element not found for signal', signalId);\r\n        return;\r\n      }\r\n\r\n      const parentElement = element.parentElement;\r\n      const childNodes = Array.from(parentElement.childNodes);\r\n      const position = childNodes.indexOf(element);\r\n\r\n      let parentId = parentElement.getAttribute('data-parent-id');\r\n      if (!parentId) {\r\n        parentId = `parent-${crypto.randomUUID()}`;\r\n        parentElement.setAttribute('data-parent-id', parentId);\r\n      }\r\n\r\n      instanceIdRef.current = `instance-${crypto.randomUUID()}`;\r\n\r\n      // Store signal info in shadow metadata\r\n      const currentMeta =\r\n        getGlobalStore\r\n          .getState()\r\n          .getShadowMetadata(proxy._stateKey, proxy._path) || {};\r\n      const signals = currentMeta.signals || [];\r\n      signals.push({\r\n        instanceId: instanceIdRef.current,\r\n        parentId,\r\n        position,\r\n        effect: proxy._effect,\r\n      });\r\n\r\n      getGlobalStore\r\n        .getState()\r\n        .setShadowMetadata(proxy._stateKey, proxy._path, {\r\n          ...currentMeta,\r\n          signals,\r\n        });\r\n\r\n      let displayValue = value;\r\n      if (proxy._effect) {\r\n        try {\r\n          displayValue = new Function(\r\n            'state',\r\n            `return (${proxy._effect})(state)`\r\n          )(value);\r\n        } catch (err) {\r\n          console.error('Error evaluating effect function:', err);\r\n        }\r\n      }\r\n\r\n      if (displayValue !== null && typeof displayValue === 'object') {\r\n        displayValue = JSON.stringify(displayValue);\r\n      }\r\n      const textNode = document.createTextNode(String(displayValue ?? ''));\r\n      element.replaceWith(textNode);\r\n      isSetupRef.current = true;\r\n    }, 0);\r\n\r\n    return () => {\r\n      clearTimeout(timeoutId);\r\n      if (instanceIdRef.current) {\r\n        const currentMeta =\r\n          getGlobalStore\r\n            .getState()\r\n            .getShadowMetadata(proxy._stateKey, proxy._path) || {};\r\n        if (currentMeta.signals) {\r\n          currentMeta.signals = currentMeta.signals.filter(\r\n            (s) => s.instanceId !== instanceIdRef.current\r\n          );\r\n          getGlobalStore\r\n            .getState()\r\n            .setShadowMetadata(proxy._stateKey, proxy._path, currentMeta);\r\n        }\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return createElement('span', {\r\n    ref: elementRef,\r\n    style: { display: 'contents' },\r\n    'data-signal-id': signalId,\r\n  });\r\n}\r\n\r\nconst MemoizedCogsItemWrapper = memo(\r\n  ListItemWrapper,\r\n  (prevProps, nextProps) => {\r\n    // Re-render if any of these change:\r\n    return (\r\n      prevProps.itemPath.join('.') === nextProps.itemPath.join('.') &&\r\n      prevProps.stateKey === nextProps.stateKey &&\r\n      prevProps.itemComponentId === nextProps.itemComponentId &&\r\n      prevProps.localIndex === nextProps.localIndex\r\n    );\r\n  }\r\n);\r\n\r\nconst useImageLoaded = (ref: RefObject<HTMLElement>): boolean => {\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  useLayoutEffect(() => {\r\n    if (!ref.current) {\r\n      setLoaded(true);\r\n      return;\r\n    }\r\n\r\n    const images = Array.from(ref.current.querySelectorAll('img'));\r\n\r\n    // If there are no images, we are \"loaded\" immediately.\r\n    if (images.length === 0) {\r\n      setLoaded(true);\r\n      return;\r\n    }\r\n\r\n    let loadedCount = 0;\r\n    const handleImageLoad = () => {\r\n      loadedCount++;\r\n      if (loadedCount === images.length) {\r\n        setLoaded(true);\r\n      }\r\n    };\r\n\r\n    images.forEach((image) => {\r\n      if (image.complete) {\r\n        handleImageLoad();\r\n      } else {\r\n        image.addEventListener('load', handleImageLoad);\r\n        image.addEventListener('error', handleImageLoad);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      images.forEach((image) => {\r\n        image.removeEventListener('load', handleImageLoad);\r\n        image.removeEventListener('error', handleImageLoad);\r\n      });\r\n    };\r\n  }, [ref.current]);\r\n\r\n  return loaded;\r\n};\r\n\r\nfunction ListItemWrapper({\r\n  stateKey,\r\n  itemComponentId,\r\n  itemPath,\r\n  localIndex,\r\n  arraySetter,\r\n  rebuildStateShape,\r\n  renderFn,\r\n}: {\r\n  stateKey: string;\r\n  itemComponentId: string;\r\n  itemPath: string[];\r\n  localIndex: number;\r\n  arraySetter: any;\r\n\r\n  rebuildStateShape: (options: {\r\n    currentState: any;\r\n    path: string[];\r\n    componentId: string;\r\n    meta?: any;\r\n  }) => any;\r\n  renderFn: (\r\n    setter: any,\r\n    index: number,\r\n\r\n    arraySetter: any\r\n  ) => React.ReactNode;\r\n}) {\r\n  const [, forceUpdate] = useState({});\r\n  const { ref: inViewRef, inView } = useInView();\r\n  const elementRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  const imagesLoaded = useImageLoaded(elementRef);\r\n  const hasReportedInitialHeight = useRef(false);\r\n  const fullKey = [stateKey, ...itemPath].join('.');\r\n  useRegisterComponent(stateKey, itemComponentId, forceUpdate);\r\n\r\n  const setRefs = useCallback(\r\n    (element: HTMLDivElement | null) => {\r\n      elementRef.current = element;\r\n      inViewRef(element); // This is the ref from useInView\r\n    },\r\n    [inViewRef]\r\n  );\r\n\r\n  useEffect(() => {\r\n    subscribeToPath(fullKey, (e) => {\r\n      forceUpdate({});\r\n    });\r\n  }, []);\r\n  useEffect(() => {\r\n    if (!inView || !imagesLoaded || hasReportedInitialHeight.current) {\r\n      return;\r\n    }\r\n\r\n    const element = elementRef.current;\r\n    if (element && element.offsetHeight > 0) {\r\n      hasReportedInitialHeight.current = true;\r\n      const newHeight = element.offsetHeight;\r\n\r\n      setShadowMetadata(stateKey, itemPath, {\r\n        virtualizer: {\r\n          itemHeight: newHeight,\r\n          domRef: element,\r\n        },\r\n      });\r\n\r\n      const arrayPath = itemPath.slice(0, -1);\r\n      const arrayPathKey = [stateKey, ...arrayPath].join('.');\r\n      notifyPathSubscribers(arrayPathKey, {\r\n        type: 'ITEMHEIGHT',\r\n        itemKey: itemPath.join('.'),\r\n\r\n        ref: elementRef.current,\r\n      });\r\n    }\r\n  }, [inView, imagesLoaded, stateKey, itemPath]);\r\n\r\n  const itemValue = getShadowValue(stateKey, itemPath);\r\n\r\n  if (itemValue === undefined) {\r\n    return null;\r\n  }\r\n\r\n  const itemSetter = rebuildStateShape({\r\n    currentState: itemValue,\r\n    path: itemPath,\r\n    componentId: itemComponentId,\r\n  });\r\n  const children = renderFn(itemSetter, localIndex, arraySetter);\r\n\r\n  return <div ref={setRefs}>{children}</div>;\r\n}\r\n\r\nfunction FormElementWrapper({\r\n  stateKey,\r\n  path,\r\n  rebuildStateShape,\r\n  renderFn,\r\n  formOpts,\r\n  setState,\r\n}: {\r\n  stateKey: string;\r\n  path: string[];\r\n  rebuildStateShape: (options: {\r\n    path: string[];\r\n    componentId: string;\r\n    meta?: any;\r\n  }) => any;\r\n  renderFn: (params: FormElementParams<any>) => React.ReactNode;\r\n  formOpts?: FormOptsType;\r\n  setState: any;\r\n}) {\r\n  const [componentId] = useState(() => uuidv4());\r\n  const [, forceUpdate] = useState({});\r\n\r\n  const stateKeyPathKey = [stateKey, ...path].join('.');\r\n  useRegisterComponent(stateKey, componentId, forceUpdate);\r\n  const globalStateValue = getShadowValue(stateKey, path);\r\n  const [localValue, setLocalValue] = useState<any>(globalStateValue);\r\n  const isCurrentlyDebouncing = useRef(false);\r\n  const debounceTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !isCurrentlyDebouncing.current &&\r\n      !isDeepEqual(globalStateValue, localValue)\r\n    ) {\r\n      setLocalValue(globalStateValue);\r\n    }\r\n  }, [globalStateValue]);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = getGlobalStore\r\n      .getState()\r\n      .subscribeToPath(stateKeyPathKey, (newValue) => {\r\n        if (!isCurrentlyDebouncing.current && localValue !== newValue) {\r\n          forceUpdate({});\r\n        }\r\n      });\r\n    return () => {\r\n      unsubscribe();\r\n      if (debounceTimeoutRef.current) {\r\n        clearTimeout(debounceTimeoutRef.current);\r\n        isCurrentlyDebouncing.current = false;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const debouncedUpdate = useCallback(\r\n    (newValue: any) => {\r\n      const currentType = typeof globalStateValue;\r\n      if (currentType === 'number' && typeof newValue === 'string') {\r\n        newValue = newValue === '' ? 0 : Number(newValue);\r\n      }\r\n      setLocalValue(newValue);\r\n      isCurrentlyDebouncing.current = true;\r\n\r\n      if (debounceTimeoutRef.current) {\r\n        clearTimeout(debounceTimeoutRef.current);\r\n      }\r\n\r\n      const debounceTime = formOpts?.debounceTime ?? 200;\r\n\r\n      debounceTimeoutRef.current = setTimeout(() => {\r\n        isCurrentlyDebouncing.current = false;\r\n        setState(newValue, path, { updateType: 'update' });\r\n\r\n        // NEW: Check if validation is enabled via features\r\n        const rootMeta = getGlobalStore\r\n          .getState()\r\n          .getShadowMetadata(stateKey, []);\r\n        if (!rootMeta?.features?.validationEnabled) return;\r\n\r\n        const validationOptions = getInitialOptions(stateKey)?.validation;\r\n        const zodSchema =\r\n          validationOptions?.zodSchemaV4 || validationOptions?.zodSchemaV3;\r\n\r\n        if (zodSchema) {\r\n          const fullState = getShadowValue(stateKey, []);\r\n          const result = zodSchema.safeParse(fullState);\r\n          const currentMeta = getShadowMetadata(stateKey, path) || {};\r\n\r\n          if (!result.success) {\r\n            const errors =\r\n              'issues' in result.error\r\n                ? result.error.issues\r\n                : (result.error as any).errors;\r\n\r\n            const pathErrors = errors.filter(\r\n              (error: any) =>\r\n                JSON.stringify(error.path) === JSON.stringify(path)\r\n            );\r\n\r\n            if (pathErrors.length > 0) {\r\n              setShadowMetadata(stateKey, path, {\r\n                ...currentMeta,\r\n                validation: {\r\n                  status: 'INVALID',\r\n                  errors: [\r\n                    {\r\n                      source: 'client',\r\n                      message: pathErrors[0]?.message,\r\n                      severity: 'warning', // Gentle error during typing\r\n                    },\r\n                  ],\r\n                  lastValidated: Date.now(),\r\n                  validatedValue: newValue,\r\n                },\r\n              });\r\n            } else {\r\n              setShadowMetadata(stateKey, path, {\r\n                ...currentMeta,\r\n                validation: {\r\n                  status: 'VALID',\r\n                  errors: [],\r\n                  lastValidated: Date.now(),\r\n                  validatedValue: newValue,\r\n                },\r\n              });\r\n            }\r\n          } else {\r\n            setShadowMetadata(stateKey, path, {\r\n              ...currentMeta,\r\n              validation: {\r\n                status: 'VALID',\r\n                errors: [],\r\n                lastValidated: Date.now(),\r\n                validatedValue: newValue,\r\n              },\r\n            });\r\n          }\r\n        }\r\n      }, debounceTime);\r\n      forceUpdate({});\r\n    },\r\n    [setState, path, formOpts?.debounceTime, stateKey]\r\n  );\r\n\r\n  // --- NEW onBlur HANDLER ---\r\n  // This replaces the old commented-out method with a modern approach.\r\n  const handleBlur = useCallback(async () => {\r\n    console.log('handleBlur triggered');\r\n\r\n    // Commit any pending changes\r\n    if (debounceTimeoutRef.current) {\r\n      clearTimeout(debounceTimeoutRef.current);\r\n      debounceTimeoutRef.current = null;\r\n      isCurrentlyDebouncing.current = false;\r\n      setState(localValue, path, { updateType: 'update' });\r\n    }\r\n    const rootMeta = getShadowMetadata(stateKey, []);\r\n    if (!rootMeta?.features?.validationEnabled) return;\r\n    const { getInitialOptions } = getGlobalStore.getState();\r\n    const validationOptions = getInitialOptions(stateKey)?.validation;\r\n    const zodSchema =\r\n      validationOptions?.zodSchemaV4 || validationOptions?.zodSchemaV3;\r\n\r\n    if (!zodSchema) return;\r\n\r\n    // Get the full path including stateKey\r\n\r\n    // Update validation state to \"validating\"\r\n    const currentMeta = getShadowMetadata(stateKey, path);\r\n\r\n    setShadowMetadata(stateKey, path, {\r\n      ...currentMeta,\r\n      validation: {\r\n        status: 'VALIDATING',\r\n        errors: [],\r\n        lastValidated: Date.now(),\r\n        validatedValue: localValue,\r\n      },\r\n    });\r\n\r\n    // Validate full state\r\n    const fullState = getShadowValue(stateKey, []);\r\n    const result = zodSchema.safeParse(fullState);\r\n    console.log('result ', result);\r\n    if (!result.success) {\r\n      const errors =\r\n        'issues' in result.error\r\n          ? result.error.issues\r\n          : (result.error as any).errors;\r\n\r\n      console.log('All validation errors:', errors);\r\n      console.log('Current blur path:', path);\r\n\r\n      // Find errors for this specific path\r\n      const pathErrors = errors.filter((error: any) => {\r\n        console.log('Processing error:', error);\r\n\r\n        // For array paths, we need to translate indices to ULIDs\r\n        if (path.some((p) => p.startsWith('id:'))) {\r\n          console.log('Detected array path with ULID');\r\n\r\n          // This is an array item path like [\"id:xyz\", \"name\"]\r\n          const parentPath = path[0]!.startsWith('id:')\r\n            ? []\r\n            : path.slice(0, -1);\r\n\r\n          console.log('Parent path:', parentPath);\r\n\r\n          const arrayMeta = getGlobalStore\r\n            .getState()\r\n            .getShadowMetadata(stateKey, parentPath);\r\n\r\n          console.log('Array metadata:', arrayMeta);\r\n\r\n          if (arrayMeta?.arrayKeys) {\r\n            const itemKey = [stateKey, ...path.slice(0, -1)].join('.');\r\n            const itemIndex = arrayMeta.arrayKeys.indexOf(itemKey);\r\n\r\n            console.log('Item key:', itemKey, 'Index:', itemIndex);\r\n\r\n            // Compare with Zod path\r\n            const zodPath = [...parentPath, itemIndex, ...path.slice(-1)];\r\n            const match =\r\n              JSON.stringify(error.path) === JSON.stringify(zodPath);\r\n\r\n            console.log('Zod path comparison:', {\r\n              zodPath,\r\n              errorPath: error.path,\r\n              match,\r\n            });\r\n            return match;\r\n          }\r\n        }\r\n\r\n        const directMatch = JSON.stringify(error.path) === JSON.stringify(path);\r\n        console.log('Direct path comparison:', {\r\n          errorPath: error.path,\r\n          currentPath: path,\r\n          match: directMatch,\r\n        });\r\n        return directMatch;\r\n      });\r\n\r\n      console.log('Filtered path errors:', pathErrors);\r\n      // Update shadow metadata with validation result\r\n      setShadowMetadata(stateKey, path, {\r\n        ...currentMeta,\r\n        validation: {\r\n          status: 'INVALID',\r\n          errors: pathErrors.map((err: any) => ({\r\n            source: 'client' as const,\r\n            message: err.message,\r\n            severity: 'error' as const, // Hard error on blur\r\n          })),\r\n          lastValidated: Date.now(),\r\n          validatedValue: localValue,\r\n        },\r\n      });\r\n    } else {\r\n      // Validation passed\r\n      setShadowMetadata(stateKey, path, {\r\n        ...currentMeta,\r\n        validation: {\r\n          status: 'VALID',\r\n          errors: [],\r\n          lastValidated: Date.now(),\r\n          validatedValue: localValue,\r\n        },\r\n      });\r\n    }\r\n    forceUpdate({});\r\n  }, [stateKey, path, localValue, setState]);\r\n\r\n  const baseState = rebuildStateShape({\r\n    path: path,\r\n    componentId: componentId,\r\n  });\r\n\r\n  const stateWithInputProps = new Proxy(baseState, {\r\n    get(target, prop) {\r\n      if (prop === 'inputProps') {\r\n        return {\r\n          value: localValue ?? '',\r\n          onChange: (e: any) => {\r\n            debouncedUpdate(e.target.value);\r\n          },\r\n          // 5. Wire the new onBlur handler to the input props.\r\n          onBlur: handleBlur,\r\n          ref: formRefStore\r\n            .getState()\r\n            .getFormRef(stateKey + '.' + path.join('.')),\r\n        };\r\n      }\r\n\r\n      return target[prop];\r\n    },\r\n  });\r\n\r\n  return (\r\n    <ValidationWrapper formOpts={formOpts} path={path} stateKey={stateKey}>\r\n      {renderFn(stateWithInputProps)}\r\n    </ValidationWrapper>\r\n  );\r\n}\r\nfunction useRegisterComponent(\r\n  stateKey: string,\r\n  componentId: string,\r\n  forceUpdate: (o: object) => void\r\n) {\r\n  const fullComponentId = `${stateKey}////${componentId}`;\r\n\r\n  useLayoutEffect(() => {\r\n    // Call the safe, centralized function to register\r\n    registerComponent(stateKey, fullComponentId, {\r\n      forceUpdate: () => forceUpdate({}),\r\n      paths: new Set(),\r\n      reactiveType: ['component'],\r\n    });\r\n\r\n    // The cleanup now calls the safe, centralized unregister function\r\n    return () => {\r\n      unregisterComponent(stateKey, fullComponentId);\r\n    };\r\n  }, [stateKey, fullComponentId]); // Dependencies are stable and correct\r\n}\r\n"],"names":["getInitialOptions","updateInitialStateGlobal","getShadowMetadata","setShadowMetadata","getShadowValue","initializeShadowState","updateShadowAtPath","insertShadowArrayElement","removeShadowArrayElement","getSelectedIndex","setInitialStateOptions","setServerStateUpdate","markAsDirty","registerComponent","unregisterComponent","addPathComponent","clearSelectedIndexesForState","addStateLog","setSyncInfo","clearSelectedIndex","getSyncInfo","notifyPathSubscribers","subscribeToPath","getGlobalStore","getArrayData","stateKey","path","meta","shadowNode","arrayPathKey","viewIds","value","findArrayItem","array","keys","predicate","i","key","setAndMergeOptions","newOptions","initialOptions","setOptions","options","initialOptionsPart","mergedOptions","needToAdd","isDeepEqual","addStateOptions","initialState","formElements","validation","createCogsState","opt","newInitialState","statePart","transformStateFunc","existingOptions","existingGlobalOptions","useCogsState","componentId","useState","uuidv4","thiState","partialState","useCogsStateFn","setCogsOptions","loadAndApplyLocalStorage","notifyComponents","createCogsStateFromSync","syncSchema","useSync","schemas","apiParamsMap","entry","saveToLocalStorage","state","thisKey","currentInitialOptions","sessionId","lastSyncedWithServer","isFunction","storageKey","existingLastSynced","loadFromLocalStorage","shadowMeta","data","superJsonResult","superjson","localStorageKey","storedData","error","currentState","useCogsConfig","localkey","localData","stateEntry","updates","component","update","markEntireStateAsServerSynced","timestamp","currentMeta","arrayMeta","itemKey","index","itemPath","itemData","fieldPath","fieldData","updateBatchQueue","isFlushScheduled","scheduleFlush","flushQueue","handleUpdate","payload","existingNode","currentValue","newValue","newNode","buildShadowNode","METADATA_KEYS","newShadowMeta","updateSignals","displayValue","parentId","position","effect","parent","childNodes","finalDisplayValue","err","getComponentNotifications","result","rootMeta","componentsToNotify","currentPath","pathMeta","isArray","getDifferences","subPathString","subPath","fullSubPath","subPathMeta","parentArrayPath","parentMeta","reactiveTypes","newDeps","handleInsert","getScopedData","updatedMeta","newItemKey","newItemPath","handleCut","oldValue","allComponentsToNotify","signalUpdates","logsToAdd","item","createEffectiveSetState","syncApiRef","latestInitialOptionsRef","newStateOrFunction","updateObj","validationKey","executeUpdate","newUpdate","stateObject","localStorage","reactiveDeps","reactiveType","defaultState","syncUpdate","dependencies","serverState","__useSync","reactiveForce","forceUpdate","noStateKey","componentIdRef","useRef","useEffect","syncKey","resolveInitialState","useCallback","overrideOptions","currentOptions","finalDefaultState","localKey","event","serverStateData","mergeConfig","incomingData","keyField","existingIds","newUniqueItems","finalState","existingMeta","features","cogsSyncFn","syncOpt","resolvedState","source","useLayoutEffect","componentKey","components","fullPath","effectiveSetState","updaterFinal","useMemo","createProxyHandler","hashTransforms","transforms","transform","registerComponentDependency","dependencyPath","fullComponentId","notifySelectionComponents","parentPath","currentSelected","store","notifiedComponents","arrayKey","selectedItem","arrayKeys","proxyCache","methodNames","rebuildStateShape","derivationSignature","cacheKey","stateKeyPathKey","handler","target","prop","rootLevelMethods","nextPath","baseState","sync","response","getStatusFunc","initalOptionsGet","selectedItemKey","viewKey","currentViewIds","selectedItemId","selectedId","itemHeight","overscan","stickToBottom","scrollStickTolerance","containerRef","range","setRange","rerender","initialScrollRef","scrollStateRef","measurementCache","container","totalHeight","itemOffsets","runningOffset","offsets","measuredHeight","waitForContainer","visibleCount","endIndex","startIndex","scrollToBottom","handleScroll","currentScrollTop","scrollHeight","clientHeight","scrollState","distanceFromBottom","wasNearBottom","newStartIndex","behavior","performScroll","attemptScroll","attempts","currentHeight","currentScroll","newHeight","newScroll","scrollTimeout","debouncedScrollToBottom","observer","handleImageLoad","e","sourceArray","currentKeys","slicedIds","arrayPath","offset","callbackfn","shadowValue","arraySetter","_item","itemSetter","k","filteredIds","id","compareFn","currentArray","itemsWithIds","a","b","sortedIds","bufferSize","flushInterval","bufferStrategy","onFlush","buffer","isPaused","flushTimer","addToBuffer","flushBuffer","toFlush","streamId","streams","componentIdsRef","updateTrigger","validIds","arrayValues","unsubscribe","caches","jsx","Fragment","localIndex","itemComponentId","createElement","MemoizedCogsItemWrapper","fieldName","itemId","node","lastIndex","newPath","fields","onMatch","matchedItem","isMatch","field","updatedItem","updatedArray","idKeys","indexToCut","idToCut","pathForCut","found","pathForItem","searchKey","searchValue","fn","$cogsSignal","parentPathArray","fullParentKey","fullItemKey","zodErrors","patches","convertPath","jsonPath","p","patch","relativePath","formRefStore","children","hideMessage","ValidationWrapper","currentValueAtPath","child","formOpts","FormElementWrapper","proxyInstance","obj","newState","newUpdaterState","startTransition","proxy","SignalRenderer","elementRef","instanceIdRef","isSetupRef","signalId","element","timeoutId","parentElement","signals","textNode","s","memo","ListItemWrapper","prevProps","nextProps","useImageLoaded","ref","loaded","setLoaded","images","loadedCount","image","renderFn","inViewRef","inView","useInView","imagesLoaded","hasReportedInitialHeight","fullKey","useRegisterComponent","setRefs","itemValue","setState","globalStateValue","localValue","setLocalValue","isCurrentlyDebouncing","debounceTimeoutRef","debouncedUpdate","debounceTime","validationOptions","zodSchema","fullState","pathErrors","handleBlur","errors","itemIndex","zodPath","match","directMatch","stateWithInputProps"],"mappings":"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"}