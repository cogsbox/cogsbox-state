{"version":3,"file":"CogsState.jsx","sources":["../src/CogsState.tsx"],"sourcesContent":["'use client';\r\n\r\nimport {\r\n  createElement,\r\n  memo,\r\n  startTransition,\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n  type CSSProperties,\r\n  type ReactNode,\r\n  type RefObject,\r\n} from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport {\r\n  debounce,\r\n  getDifferences,\r\n  isArray,\r\n  isFunction,\r\n  type GenericObject,\r\n} from './utility.js';\r\nimport { ValidationWrapper } from './Functions.js';\r\nimport { isDeepEqual, transformStateFunc } from './utility.js';\r\nimport superjson from 'superjson';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport {\r\n  formRefStore,\r\n  getGlobalStore,\r\n  ValidationStatus,\r\n  type ComponentsType,\r\n} from './store.js';\r\nimport { useCogsConfig } from './CogsStateClient.js';\r\nimport { Operation } from 'fast-json-patch';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport * as z3 from 'zod/v3';\r\nimport * as z4 from 'zod/v4';\r\nimport z from 'zod';\r\n\r\ntype Prettify<T> = T extends any ? { [K in keyof T]: T[K] } : never;\r\n\r\nexport type VirtualViewOptions = {\r\n  itemHeight?: number;\r\n  overscan?: number;\r\n  stickToBottom?: boolean;\r\n  dependencies?: any[];\r\n  scrollStickTolerance?: number;\r\n};\r\n\r\n// The result now returns a real StateObject\r\nexport type VirtualStateObjectResult<T extends any[]> = {\r\n  /**\r\n   * A new, fully-functional StateObject that represents the virtualized slice.\r\n   * You can use `.get()`, `.stateMap()`, `.insert()`, `.cut()` etc. on this object.\r\n   */\r\n\r\n  virtualState: StateObject<T>;\r\n  /**\r\n   * Props to be spread onto your DOM elements to enable virtualization.\r\n   */\r\n  virtualizerProps: {\r\n    outer: { ref: RefObject<HTMLDivElement>; style: CSSProperties };\r\n    inner: { style: CSSProperties };\r\n    list: { style: CSSProperties };\r\n  };\r\n  scrollToBottom: (behavior?: ScrollBehavior) => void;\r\n  scrollToIndex: (index: number, behavior?: ScrollBehavior) => void;\r\n};\r\n\r\nexport type SyncInfo = {\r\n  timeStamp: number;\r\n  userId: number;\r\n};\r\n\r\nexport type FormElementParams<T> = StateObject<T> & {\r\n  inputProps: {\r\n    ref?: React.RefObject<any>;\r\n    value?: T extends boolean ? never : T;\r\n    onChange?: (\r\n      event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n    ) => void;\r\n    onBlur?: () => void;\r\n  };\r\n};\r\n\r\nexport type StateKeys = string;\r\n\r\ntype findWithFuncType<U> = (\r\n  thisKey: keyof U,\r\n  thisValue: U[keyof U]\r\n) => EndType<U> & StateObject<U>;\r\n\r\ntype CutFunctionType<T> = (\r\n  index?: number,\r\n  options?: { waitForSync?: boolean }\r\n) => StateObject<T>;\r\n\r\nexport type InferArrayElement<T> = T extends (infer U)[] ? U : never;\r\ntype ArraySpecificPrototypeKeys =\r\n  | 'concat'\r\n  | 'copyWithin'\r\n  | 'fill'\r\n  | 'find'\r\n  | 'findIndex'\r\n  | 'flat'\r\n  | 'flatMap'\r\n  | 'includes'\r\n  | 'indexOf'\r\n  | 'join'\r\n  | 'keys'\r\n  | 'lastIndexOf'\r\n  | 'map'\r\n  | 'pop'\r\n  | 'push'\r\n  | 'reduce'\r\n  | 'reduceRight'\r\n  | 'reverse'\r\n  | 'shift'\r\n  | 'slice'\r\n  | 'some'\r\n  | 'sort'\r\n  | 'splice'\r\n  | 'unshift'\r\n  | 'values'\r\n  | 'entries'\r\n  | 'every'\r\n  | 'filter'\r\n  | 'forEach'\r\n  | 'with';\r\nexport type StreamOptions<T, R = T> = {\r\n  bufferSize?: number;\r\n  flushInterval?: number;\r\n  bufferStrategy?: 'sliding' | 'dropping' | 'accumulate';\r\n  store?: (buffer: T[]) => R | R[];\r\n  onFlush?: (buffer: T[]) => void;\r\n};\r\n\r\nexport type StreamHandle<T> = {\r\n  write: (data: T) => void;\r\n  writeMany: (data: T[]) => void;\r\n  flush: () => void;\r\n  close: () => void;\r\n  pause: () => void;\r\n  resume: () => void;\r\n};\r\nexport type ArrayEndType<TShape extends unknown> = {\r\n  stream: <T = Prettify<InferArrayElement<TShape>>, R = T>(\r\n    options?: StreamOptions<T, R>\r\n  ) => StreamHandle<T>;\r\n  findWith: findWithFuncType<Prettify<InferArrayElement<TShape>>>;\r\n  index: (index: number) => StateObject<Prettify<InferArrayElement<TShape>>> & {\r\n    insert: InsertTypeObj<Prettify<InferArrayElement<TShape>>>;\r\n    cut: CutFunctionType<TShape>;\r\n    _index: number;\r\n  } & EndType<Prettify<InferArrayElement<TShape>>>;\r\n  insert: InsertType<Prettify<InferArrayElement<TShape>>>;\r\n  cut: CutFunctionType<TShape>;\r\n  cutSelected: () => void;\r\n  cutByValue: (value: string | number | boolean) => void;\r\n  toggleByValue: (value: string | number | boolean) => void;\r\n  stateSort: (\r\n    compareFn: (\r\n      a: Prettify<InferArrayElement<TShape>>,\r\n      b: Prettify<InferArrayElement<TShape>>\r\n    ) => number\r\n  ) => ArrayEndType<TShape>;\r\n  useVirtualView: (\r\n    options: VirtualViewOptions\r\n  ) => VirtualStateObjectResult<Prettify<InferArrayElement<TShape>>[]>;\r\n\r\n  stateList: (\r\n    callbackfn: (\r\n      setter: StateObject<Prettify<InferArrayElement<TShape>>>,\r\n      index: number,\r\n      arraySetter: StateObject<TShape>\r\n    ) => void\r\n  ) => any;\r\n  stateMap: <U>(\r\n    callbackfn: (\r\n      setter: StateObject<Prettify<InferArrayElement<TShape>>>,\r\n      index: number,\r\n      arraySetter: StateObject<TShape>\r\n    ) => U\r\n  ) => U[];\r\n  $stateMap: (\r\n    callbackfn: (\r\n      setter: StateObject<Prettify<InferArrayElement<TShape>>>,\r\n      index: number,\r\n      arraySetter: StateObject<TShape>\r\n    ) => void\r\n  ) => any;\r\n  stateFlattenOn: <K extends keyof Prettify<InferArrayElement<TShape>>>(\r\n    field: K\r\n  ) => StateObject<InferArrayElement<Prettify<InferArrayElement<TShape>>[K]>[]>;\r\n  uniqueInsert: (\r\n    payload: InsertParams<Prettify<InferArrayElement<TShape>>>,\r\n    fields?: (keyof Prettify<InferArrayElement<TShape>>)[],\r\n    onMatch?: (existingItem: any) => any\r\n  ) => void;\r\n  stateFind: (\r\n    callbackfn: (\r\n      value: Prettify<InferArrayElement<TShape>>,\r\n      index: number\r\n    ) => boolean\r\n  ) => StateObject<Prettify<InferArrayElement<TShape>>> | undefined;\r\n  stateFilter: (\r\n    callbackfn: (\r\n      value: Prettify<InferArrayElement<TShape>>,\r\n      index: number\r\n    ) => void\r\n  ) => ArrayEndType<TShape>;\r\n  getSelected: () =>\r\n    | StateObject<Prettify<InferArrayElement<TShape>>>\r\n    | undefined;\r\n  clearSelected: () => void;\r\n  getSelectedIndex: () => number;\r\n  last: () => StateObject<Prettify<InferArrayElement<TShape>>> | undefined;\r\n} & EndType<TShape>;\r\n\r\nexport type FormOptsType = {\r\n  validation?: {\r\n    hideMessage?: boolean;\r\n    message?: string;\r\n\r\n    props?: GenericObject;\r\n    disable?: boolean;\r\n  };\r\n\r\n  debounceTime?: number;\r\n  sync?: {\r\n    allowInvalidValues?: boolean; // default: false\r\n  };\r\n};\r\n\r\nexport type FormControl<T> = (obj: FormElementParams<T>) => JSX.Element;\r\n\r\nexport type UpdateArg<S> = S | ((prevState: S) => S);\r\nexport type InsertParams<S> =\r\n  | S\r\n  | ((prevState: { state: S; uuid: string }) => S);\r\nexport type UpdateType<T> = (payload: UpdateArg<T>) => { synced: () => void };\r\n\r\nexport type InsertType<T> = (payload: InsertParams<T>, index?: number) => void;\r\nexport type InsertTypeObj<T> = (payload: InsertParams<T>) => void;\r\nexport type ValidationError = {\r\n  path: (string | number)[];\r\n  message: string;\r\n};\r\ntype EffectFunction<T, R> = (state: T, deps: any[]) => R;\r\nexport type EndType<T, IsArrayElement = false> = {\r\n  addZodValidation: (errors: ValidationError[]) => void;\r\n  clearZodValidation: (paths?: string[]) => void;\r\n  applyJsonPatch: (patches: any[]) => void;\r\n  update: UpdateType<T>;\r\n  _path: string[];\r\n  _stateKey: string;\r\n  formElement: (control: FormControl<T>, opts?: FormOptsType) => JSX.Element;\r\n  get: () => T;\r\n  getState: () => T;\r\n  $get: () => T;\r\n  $derive: <R>(fn: EffectFunction<T, R>) => R;\r\n\r\n  _status: 'fresh' | 'dirty' | 'synced' | 'restored' | 'unknown';\r\n  getStatus: () => 'fresh' | 'dirty' | 'synced' | 'restored' | 'unknown';\r\n\r\n  showValidationErrors: () => string[];\r\n  setValidation: (ctx: string) => void;\r\n  removeValidation: (ctx: string) => void;\r\n  ignoreFields: (fields: string[]) => StateObject<T>;\r\n  isSelected: boolean;\r\n  setSelected: (value: boolean) => void;\r\n  toggleSelected: () => void;\r\n  getFormRef: () => React.RefObject<any> | undefined;\r\n  removeStorage: () => void;\r\n  sync: () => void;\r\n  validationWrapper: ({\r\n    children,\r\n    hideMessage,\r\n  }: {\r\n    children: React.ReactNode;\r\n    hideMessage?: boolean;\r\n  }) => JSX.Element;\r\n  lastSynced?: SyncInfo;\r\n} & (IsArrayElement extends true ? { cutThis: () => void } : {});\r\n\r\nexport type StateObject<T> = (T extends any[]\r\n  ? ArrayEndType<T>\r\n  : T extends Record<string, unknown> | object\r\n    ? { [K in keyof T]-?: StateObject<T[K]> }\r\n    : T extends string | number | boolean | null\r\n      ? EndType<T, true>\r\n      : never) &\r\n  EndType<T, true> & {\r\n    toggle: T extends boolean ? () => void : never;\r\n    getAllFormRefs: () => Map<string, React.RefObject<any>>;\r\n    _componentId: string | null;\r\n    getComponents: () => ComponentsType;\r\n\r\n    _initialState: T;\r\n    updateInitialState: (newState: T | null) => {\r\n      fetchId: (field: keyof T) => string | number;\r\n    };\r\n    _isLoading: boolean;\r\n    _serverState: T;\r\n    revertToInitialState: (obj?: { validationKey?: string }) => T;\r\n    getDifferences: () => string[];\r\n    middleware: (\r\n      middles: ({\r\n        updateLog,\r\n        update,\r\n      }: {\r\n        updateLog: UpdateTypeDetail[] | undefined;\r\n        update: UpdateTypeDetail;\r\n      }) => void\r\n    ) => void;\r\n\r\n    getLocalStorage: (key: string) => LocalStorageData<T> | null;\r\n  };\r\n\r\nexport type CogsUpdate<T extends unknown> = UpdateType<T>;\r\ntype EffectiveSetStateArg<\r\n  T,\r\n  UpdateType extends 'update' | 'insert' | 'cut',\r\n> = UpdateType extends 'insert'\r\n  ? T extends any[]\r\n    ? InsertParams<InferArrayElement<T>>\r\n    : never\r\n  : UpdateArg<T>;\r\ntype UpdateOptions = {\r\n  updateType: 'insert' | 'cut' | 'update';\r\n\r\n  sync?: boolean;\r\n};\r\ntype EffectiveSetState<TStateObject> = (\r\n  newStateOrFunction:\r\n    | EffectiveSetStateArg<TStateObject, 'update'>\r\n    | EffectiveSetStateArg<TStateObject, 'insert'>,\r\n  path: string[],\r\n  updateObj: UpdateOptions,\r\n  validationKey?: string\r\n) => void;\r\n\r\nexport type UpdateTypeDetail = {\r\n  timeStamp: number;\r\n  stateKey: string;\r\n  updateType: 'update' | 'insert' | 'cut';\r\n  path: string[];\r\n  status: 'new' | 'sent' | 'synced';\r\n  oldValue: any;\r\n  newValue: any;\r\n  userId?: number;\r\n};\r\n\r\nexport type ReactivityUnion = 'none' | 'component' | 'deps' | 'all';\r\nexport type ReactivityType =\r\n  | 'none'\r\n  | 'component'\r\n  | 'deps'\r\n  | 'all'\r\n  | Array<Prettify<'none' | 'component' | 'deps' | 'all'>>;\r\n\r\n// Define the return type of the sync hook locally\r\ntype SyncApi = {\r\n  updateState: (data: { operation: any }) => void;\r\n  connected: boolean;\r\n  clientId: string | null;\r\n  subscribers: string[];\r\n};\r\ntype ValidationOptionsType = {\r\n  key?: string;\r\n  zodSchemaV3?: z3.ZodType<any, any, any>;\r\n  zodSchemaV4?: z4.ZodType<any, any, any>;\r\n\r\n  onBlur?: boolean;\r\n};\r\ntype UseSyncType<T> = (state: T, a: SyncOptionsType<any>) => SyncApi;\r\ntype SyncOptionsType<TApiParams> = {\r\n  apiParams: TApiParams;\r\n  stateKey?: string;\r\n  stateRoom:\r\n    | number\r\n    | string\r\n    | (({ clientId }: { clientId: string }) => string | null);\r\n  connect?: boolean;\r\n  inMemoryState?: boolean;\r\n};\r\nexport type OptionsType<T extends unknown = unknown, TApiParams = never> = {\r\n  log?: boolean;\r\n  componentId?: string;\r\n  syncOptions?: SyncOptionsType<TApiParams>;\r\n\r\n  validation?: ValidationOptionsType;\r\n  serverState?: {\r\n    id?: string | number;\r\n    data?: T;\r\n    status?: 'pending' | 'error' | 'success' | 'loading';\r\n    timestamp?: number;\r\n    merge?:\r\n      | boolean\r\n      | {\r\n          strategy: 'append' | 'prepend' | 'diff';\r\n          key?: string;\r\n        };\r\n  };\r\n\r\n  sync?: {\r\n    action: (state: T) => Promise<{\r\n      success: boolean;\r\n      data?: any;\r\n      error?: any;\r\n      errors?: Array<{\r\n        path: (string | number)[];\r\n        message: string;\r\n      }>;\r\n    }>;\r\n    onSuccess?: (data: any) => void;\r\n    onError?: (error: any) => void;\r\n  };\r\n  middleware?: ({ update }: { update: UpdateTypeDetail }) => void;\r\n\r\n  modifyState?: (state: T) => T;\r\n  localStorage?: {\r\n    key: string | ((state: T) => string);\r\n    onChange?: (state: T) => void;\r\n  };\r\n  formElements?: FormsElementsType<T>;\r\n\r\n  reactiveDeps?: (state: T) => any[] | true;\r\n  reactiveType?: ReactivityType;\r\n  syncUpdate?: Partial<UpdateTypeDetail>;\r\n\r\n  defaultState?: T;\r\n\r\n  dependencies?: any[];\r\n};\r\n\r\nexport type SyncRenderOptions<T extends unknown = unknown> = {\r\n  children: React.ReactNode;\r\n  time: number;\r\n  data?: T;\r\n  key?: string;\r\n};\r\n\r\ntype FormsElementsType<T> = {\r\n  validation?: (options: {\r\n    children: React.ReactNode;\r\n    status: ValidationStatus; // Instead of 'active' boolean\r\n\r\n    path: string[];\r\n    message?: string;\r\n    data?: T;\r\n    key?: string;\r\n  }) => React.ReactNode;\r\n  syncRender?: (options: SyncRenderOptions<T>) => React.ReactNode;\r\n};\r\n\r\nexport type InitialStateInnerType<T extends unknown = unknown> = {\r\n  initialState: T;\r\n} & OptionsType<T>;\r\n\r\nexport type InitialStateType<T> = {\r\n  [key: string]: InitialStateInnerType<T>;\r\n};\r\n\r\nexport type AllStateTypes<T extends unknown> = Record<string, T>;\r\n\r\nexport type CogsInitialState<T> = {\r\n  initialState: T;\r\n  formElements?: FormsElementsType<T>;\r\n};\r\n\r\nexport type TransformedStateType<T> = {\r\n  [P in keyof T]: T[P] extends CogsInitialState<infer U> ? U : T[P];\r\n};\r\n\r\nfunction setAndMergeOptions(stateKey: string, newOptions: OptionsType<any>) {\r\n  const getInitialOptions = getGlobalStore.getState().getInitialOptions;\r\n  const setInitialStateOptions =\r\n    getGlobalStore.getState().setInitialStateOptions;\r\n\r\n  const initialOptions = getInitialOptions(stateKey as string) || {};\r\n\r\n  setInitialStateOptions(stateKey as string, {\r\n    ...initialOptions,\r\n    ...newOptions,\r\n  });\r\n}\r\nfunction setOptions<StateKey, Opt>({\r\n  stateKey,\r\n  options,\r\n  initialOptionsPart,\r\n}: {\r\n  stateKey: StateKey;\r\n  options?: OptionsType<any>;\r\n  initialOptionsPart: Record<string, any>;\r\n}) {\r\n  const initialOptions = getInitialOptions(stateKey as string) || {};\r\n  const initialOptionsPartState = initialOptionsPart[stateKey as string] || {};\r\n  const setInitialStateOptions =\r\n    getGlobalStore.getState().setInitialStateOptions;\r\n  const mergedOptions = { ...initialOptionsPartState, ...initialOptions };\r\n\r\n  let needToAdd = false;\r\n  if (options) {\r\n    for (const key in options) {\r\n      if (!mergedOptions.hasOwnProperty(key)) {\r\n        needToAdd = true;\r\n        mergedOptions[key] = options[key as keyof typeof options];\r\n      } else {\r\n        if (\r\n          key == 'localStorage' &&\r\n          options[key] &&\r\n          mergedOptions[key].key !== options[key]?.key\r\n        ) {\r\n          needToAdd = true;\r\n          mergedOptions[key] = options[key];\r\n        }\r\n        if (\r\n          key == 'defaultState' &&\r\n          options[key] &&\r\n          mergedOptions[key] !== options[key] &&\r\n          !isDeepEqual(mergedOptions[key], options[key])\r\n        ) {\r\n          needToAdd = true;\r\n          mergedOptions[key] = options[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Always preserve syncOptions if it exists in mergedOptions but not in options\r\n  if (\r\n    mergedOptions.syncOptions &&\r\n    (!options || !options.hasOwnProperty('syncOptions'))\r\n  ) {\r\n    needToAdd = true;\r\n  }\r\n\r\n  if (needToAdd) {\r\n    setInitialStateOptions(stateKey as string, mergedOptions);\r\n  }\r\n}\r\n\r\nexport function addStateOptions<T extends unknown>(\r\n  initialState: T,\r\n  { formElements, validation }: OptionsType<T>\r\n) {\r\n  return { initialState: initialState, formElements, validation } as T;\r\n}\r\n\r\n// Define the type for the options setter using the Transformed state\r\ntype SetCogsOptionsFunc<T extends Record<string, any>> = <\r\n  StateKey extends keyof TransformedStateType<T>,\r\n>(\r\n  stateKey: StateKey,\r\n  options: OptionsType<TransformedStateType<T>[StateKey]>\r\n) => void;\r\n\r\nexport const createCogsState = <State extends Record<StateKeys, unknown>>(\r\n  initialState: State,\r\n  opt?: {\r\n    formElements?: FormsElementsType<State>;\r\n    validation?: ValidationOptionsType;\r\n    __fromSyncSchema?: boolean;\r\n    __syncNotifications?: Record<string, Function>;\r\n    __apiParamsMap?: Record<string, any>;\r\n    __useSync?: UseSyncType<State>;\r\n    __syncSchemas?: Record<string, any>;\r\n  }\r\n) => {\r\n  let newInitialState = initialState;\r\n  console.log('optsc', opt?.__useSync);\r\n  const [statePart, initialOptionsPart] =\r\n    transformStateFunc<State>(newInitialState);\r\n\r\n  // Store notifications if provided\r\n  if (opt?.__fromSyncSchema && opt?.__syncNotifications) {\r\n    getGlobalStore\r\n      .getState()\r\n      .setInitialStateOptions('__notifications', opt.__syncNotifications);\r\n  }\r\n\r\n  // Store apiParams map if provided\r\n  if (opt?.__fromSyncSchema && opt?.__apiParamsMap) {\r\n    getGlobalStore\r\n      .getState()\r\n      .setInitialStateOptions('__apiParamsMap', opt.__apiParamsMap);\r\n  }\r\n\r\n  // ... rest of your existing createCogsState code unchanged ...\r\n\r\n  Object.keys(statePart).forEach((key) => {\r\n    let existingOptions = initialOptionsPart[key] || {};\r\n\r\n    const mergedOptions: any = {\r\n      ...existingOptions,\r\n    };\r\n\r\n    if (opt?.formElements) {\r\n      mergedOptions.formElements = {\r\n        ...opt.formElements,\r\n        ...(existingOptions.formElements || {}),\r\n      };\r\n    }\r\n\r\n    if (opt?.validation) {\r\n      mergedOptions.validation = {\r\n        ...opt.validation,\r\n        ...(existingOptions.validation || {}),\r\n      };\r\n\r\n      if (opt.validation.key && !existingOptions.validation?.key) {\r\n        mergedOptions.validation.key = `${opt.validation.key}.${key}`;\r\n      }\r\n    }\r\n    if (opt?.__syncSchemas?.[key]?.schemas?.validation) {\r\n      mergedOptions.validation = {\r\n        zodSchemaV4: opt.__syncSchemas[key].schemas.validation,\r\n        ...existingOptions.validation,\r\n      };\r\n    }\r\n    if (Object.keys(mergedOptions).length > 0) {\r\n      const existingGlobalOptions = getInitialOptions(key);\r\n\r\n      if (!existingGlobalOptions) {\r\n        getGlobalStore.getState().setInitialStateOptions(key, mergedOptions);\r\n      } else {\r\n        // Merge with existing global options\r\n        getGlobalStore.getState().setInitialStateOptions(key, {\r\n          ...existingGlobalOptions,\r\n          ...mergedOptions,\r\n        });\r\n      }\r\n    }\r\n  });\r\n\r\n  Object.keys(statePart).forEach((key) => {\r\n    getGlobalStore.getState().initializeShadowState(key, statePart[key]);\r\n  });\r\n\r\n  type StateKeys = keyof typeof statePart;\r\n\r\n  const useCogsState = <StateKey extends StateKeys>(\r\n    stateKey: StateKey,\r\n    options?: Prettify<OptionsType<(typeof statePart)[StateKey]>>\r\n  ) => {\r\n    const [componentId] = useState(options?.componentId ?? uuidv4());\r\n\r\n    setOptions({\r\n      stateKey,\r\n      options,\r\n      initialOptionsPart,\r\n    });\r\n    const thiState =\r\n      getGlobalStore.getState().getShadowValue(stateKey as string) ||\r\n      statePart[stateKey as string];\r\n    const partialState = options?.modifyState\r\n      ? options.modifyState(thiState)\r\n      : thiState;\r\n\r\n    const updater = useCogsStateFn<(typeof statePart)[StateKey]>(partialState, {\r\n      stateKey: stateKey as string,\r\n      syncUpdate: options?.syncUpdate,\r\n      componentId,\r\n      localStorage: options?.localStorage,\r\n      middleware: options?.middleware,\r\n      reactiveType: options?.reactiveType,\r\n      reactiveDeps: options?.reactiveDeps,\r\n      defaultState: options?.defaultState as any,\r\n      dependencies: options?.dependencies,\r\n      serverState: options?.serverState,\r\n      syncOptions: options?.syncOptions,\r\n      __useSync: opt?.__useSync as UseSyncType<(typeof statePart)[StateKey]>,\r\n    });\r\n\r\n    return updater;\r\n  };\r\n\r\n  function setCogsOptions<StateKey extends StateKeys>(\r\n    stateKey: StateKey,\r\n    options: OptionsType<(typeof statePart)[StateKey]>\r\n  ) {\r\n    setOptions({ stateKey, options, initialOptionsPart });\r\n\r\n    if (options.localStorage) {\r\n      loadAndApplyLocalStorage(stateKey as string, options);\r\n    }\r\n\r\n    notifyComponents(stateKey as string);\r\n  }\r\n\r\n  return { useCogsState, setCogsOptions } as CogsApi<State, never>;\r\n};\r\ntype UseCogsStateHook<\r\n  T extends Record<string, any>,\r\n  TApiParamsMap extends Record<string, any> = never,\r\n> = <StateKey extends keyof TransformedStateType<T> & string>(\r\n  stateKey: StateKey,\r\n  options?: [TApiParamsMap] extends [never]\r\n    ? // When TApiParamsMap is never (no sync)\r\n      Prettify<OptionsType<TransformedStateType<T>[StateKey]>>\r\n    : // When TApiParamsMap exists (sync enabled)\r\n      StateKey extends keyof TApiParamsMap\r\n      ? Prettify<\r\n          OptionsType<\r\n            TransformedStateType<T>[StateKey],\r\n            TApiParamsMap[StateKey]\r\n          > & {\r\n            syncOptions: Prettify<SyncOptionsType<TApiParamsMap[StateKey]>>;\r\n          }\r\n        >\r\n      : Prettify<OptionsType<TransformedStateType<T>[StateKey]>>\r\n) => StateObject<TransformedStateType<T>[StateKey]>;\r\n\r\n// Update CogsApi to default to never instead of Record<string, never>\r\ntype CogsApi<\r\n  T extends Record<string, any>,\r\n  TApiParamsMap extends Record<string, any> = never,\r\n> = {\r\n  useCogsState: UseCogsStateHook<T, TApiParamsMap>;\r\n  setCogsOptions: SetCogsOptionsFunc<T>;\r\n};\r\ntype GetParamType<SchemaEntry> = SchemaEntry extends {\r\n  api?: { queryData?: { _paramType?: infer P } };\r\n}\r\n  ? P\r\n  : never;\r\n\r\nexport function createCogsStateFromSync<\r\n  TSyncSchema extends {\r\n    schemas: Record<\r\n      string,\r\n      {\r\n        schemas: { defaultValues: any };\r\n        api?: {\r\n          queryData?: any;\r\n        };\r\n        [key: string]: any;\r\n      }\r\n    >;\r\n    notifications: Record<string, any>;\r\n  },\r\n>(\r\n  syncSchema: TSyncSchema,\r\n  useSync: UseSyncType<any>\r\n): CogsApi<\r\n  {\r\n    [K in keyof TSyncSchema['schemas']]: TSyncSchema['schemas'][K]['schemas']['defaultValues'];\r\n  },\r\n  {\r\n    [K in keyof TSyncSchema['schemas']]: GetParamType<\r\n      TSyncSchema['schemas'][K]\r\n    >;\r\n  }\r\n> {\r\n  const schemas = syncSchema.schemas;\r\n  const initialState: any = {};\r\n  const apiParamsMap: any = {};\r\n\r\n  // Extract defaultValues AND apiParams from each entry\r\n  for (const key in schemas) {\r\n    const entry = schemas[key];\r\n    initialState[key] = entry?.schemas?.defaultValues || {};\r\n\r\n    // Extract apiParams from the api.queryData._paramType\r\n    if (entry?.api?.queryData?._paramType) {\r\n      apiParamsMap[key] = entry.api.queryData._paramType;\r\n    }\r\n  }\r\n\r\n  return createCogsState(initialState, {\r\n    __fromSyncSchema: true,\r\n    __syncNotifications: syncSchema.notifications,\r\n    __apiParamsMap: apiParamsMap,\r\n    __useSync: useSync,\r\n    __syncSchemas: schemas,\r\n  }) as any;\r\n}\r\nconst {\r\n  getInitialOptions,\r\n\r\n  addStateLog,\r\n  updateInitialStateGlobal,\r\n} = getGlobalStore.getState();\r\nconst saveToLocalStorage = <T,>(\r\n  state: T,\r\n  thisKey: string,\r\n  currentInitialOptions: any,\r\n  sessionId?: string,\r\n  lastSyncedWithServer?: number\r\n) => {\r\n  if (currentInitialOptions?.log) {\r\n    console.log(\r\n      'saving to localstorage',\r\n      thisKey,\r\n      currentInitialOptions.localStorage?.key,\r\n      sessionId\r\n    );\r\n  }\r\n\r\n  const key = isFunction(currentInitialOptions?.localStorage?.key)\r\n    ? currentInitialOptions.localStorage?.key(state)\r\n    : currentInitialOptions?.localStorage?.key;\r\n\r\n  if (key && sessionId) {\r\n    const storageKey = `${sessionId}-${thisKey}-${key}`;\r\n\r\n    // Get existing data to preserve lastSyncedWithServer if not explicitly updating it\r\n    let existingLastSynced: number | undefined;\r\n    try {\r\n      const existing = loadFromLocalStorage(storageKey);\r\n      existingLastSynced = existing?.lastSyncedWithServer;\r\n    } catch {\r\n      // Ignore errors, will use undefined\r\n    }\r\n    const shadowMeta = getGlobalStore.getState().getShadowMetadata(thisKey, []);\r\n\r\n    const data: LocalStorageData<T> = {\r\n      state,\r\n      lastUpdated: Date.now(),\r\n      lastSyncedWithServer: lastSyncedWithServer ?? existingLastSynced,\r\n      stateSource: shadowMeta?.stateSource,\r\n      baseServerState: shadowMeta?.baseServerState,\r\n    };\r\n\r\n    // Use SuperJSON serialize to get the json part only\r\n    const superJsonResult = superjson.serialize(data);\r\n    window.localStorage.setItem(\r\n      storageKey,\r\n      JSON.stringify(superJsonResult.json)\r\n    );\r\n  }\r\n};\r\n\r\nconst loadFromLocalStorage = (localStorageKey: string) => {\r\n  if (!localStorageKey) return null;\r\n\r\n  try {\r\n    const storedData = window.localStorage.getItem(localStorageKey);\r\n    if (!storedData) return null;\r\n\r\n    // Parse the json part back normally\r\n    const parsedData = JSON.parse(storedData);\r\n\r\n    return parsedData;\r\n  } catch (error) {\r\n    console.error('Error loading from localStorage:', error);\r\n    return null;\r\n  }\r\n};\r\nconst loadAndApplyLocalStorage = (stateKey: string, options: any) => {\r\n  const currentState = getGlobalStore.getState().getShadowValue(stateKey);\r\n  const { sessionId } = useCogsConfig();\r\n  const localkey = isFunction(options?.localStorage?.key)\r\n    ? options.localStorage.key(currentState)\r\n    : options?.localStorage?.key;\r\n\r\n  if (localkey && sessionId) {\r\n    const localData = loadFromLocalStorage(\r\n      `${sessionId}-${stateKey}-${localkey}`\r\n    );\r\n\r\n    if (\r\n      localData &&\r\n      localData.lastUpdated > (localData.lastSyncedWithServer || 0)\r\n    ) {\r\n      notifyComponents(stateKey);\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\ntype LocalStorageData<T> = {\r\n  state: T;\r\n  lastUpdated: number;\r\n  lastSyncedWithServer?: number;\r\n  baseServerState?: T; // Keep reference to what server state this is based on\r\n  stateSource?: 'default' | 'server' | 'localStorage'; // Track origin\r\n};\r\n\r\nconst notifyComponents = (thisKey: string) => {\r\n  const stateEntry = getGlobalStore.getState().getShadowMetadata(thisKey, []);\r\n  if (!stateEntry) return;\r\n\r\n  // Batch component updates\r\n  const updates = new Set<() => void>();\r\n  stateEntry?.components?.forEach((component) => {\r\n    const reactiveTypes = component\r\n      ? Array.isArray(component.reactiveType)\r\n        ? component.reactiveType\r\n        : [component.reactiveType || 'component']\r\n      : null;\r\n    if (!reactiveTypes?.includes('none')) {\r\n      updates.add(() => component.forceUpdate());\r\n    }\r\n  });\r\n\r\n  // Schedule updates in the next tick to allow batching\r\n  queueMicrotask(() => {\r\n    updates.forEach((update) => update());\r\n  });\r\n};\r\n\r\nexport const notifyComponent = (stateKey: string, componentId: string) => {\r\n  const stateEntry = getGlobalStore.getState().getShadowMetadata(stateKey, []);\r\n  if (stateEntry) {\r\n    const fullComponentId = `${stateKey}////${componentId}`;\r\n    const component = stateEntry?.components?.get(fullComponentId);\r\n    const reactiveTypes = component\r\n      ? Array.isArray(component.reactiveType)\r\n        ? component.reactiveType\r\n        : [component.reactiveType || 'component']\r\n      : null;\r\n\r\n    // Skip if reactivity is disabled\r\n    if (reactiveTypes?.includes('none')) {\r\n      return;\r\n    }\r\n\r\n    if (component) {\r\n      // Force an update to ensure the current value is saved\r\n\r\n      component.forceUpdate();\r\n    }\r\n  }\r\n};\r\nfunction markEntireStateAsServerSynced(\r\n  stateKey: string,\r\n  path: string[],\r\n  data: any,\r\n  timestamp: number\r\n) {\r\n  const store = getGlobalStore.getState();\r\n\r\n  // Mark current path as synced\r\n  const currentMeta = store.getShadowMetadata(stateKey, path);\r\n  store.setShadowMetadata(stateKey, path, {\r\n    ...currentMeta,\r\n    isDirty: false,\r\n    stateSource: 'server',\r\n    lastServerSync: timestamp || Date.now(),\r\n  });\r\n\r\n  // If it's an array, mark each item as synced\r\n  if (Array.isArray(data)) {\r\n    const arrayMeta = store.getShadowMetadata(stateKey, path);\r\n    if (arrayMeta?.arrayKeys) {\r\n      arrayMeta.arrayKeys.forEach((itemKey, index) => {\r\n        const itemPath = itemKey.split('.').slice(1);\r\n        const itemData = data[index];\r\n        if (itemData !== undefined) {\r\n          markEntireStateAsServerSynced(\r\n            stateKey,\r\n            itemPath,\r\n            itemData,\r\n            timestamp\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }\r\n  // If it's an object, mark each field as synced\r\n  else if (data && typeof data === 'object' && data.constructor === Object) {\r\n    Object.keys(data).forEach((key) => {\r\n      const fieldPath = [...path, key];\r\n      const fieldData = data[key];\r\n      markEntireStateAsServerSynced(stateKey, fieldPath, fieldData, timestamp);\r\n    });\r\n  }\r\n}\r\n\r\nexport function useCogsStateFn<TStateObject extends unknown>(\r\n  stateObject: TStateObject,\r\n  {\r\n    stateKey,\r\n\r\n    localStorage,\r\n    formElements,\r\n    reactiveDeps,\r\n    reactiveType,\r\n    componentId,\r\n    defaultState,\r\n    syncUpdate,\r\n    dependencies,\r\n    serverState,\r\n    __useSync,\r\n    syncOptions,\r\n  }: {\r\n    stateKey?: string;\r\n    componentId?: string;\r\n    defaultState?: TStateObject;\r\n    __useSync?: UseSyncType<TStateObject>;\r\n    syncOptions?: SyncOptionsType<any>;\r\n  } & OptionsType<TStateObject> = {}\r\n) {\r\n  const [reactiveForce, forceUpdate] = useState({}); //this is the key to reactivity\r\n  const { sessionId } = useCogsConfig();\r\n\r\n  let noStateKey = stateKey ? false : true;\r\n  const [thisKey] = useState(stateKey ?? uuidv4());\r\n\r\n  const componentIdRef = useRef(componentId ?? uuidv4());\r\n  const latestInitialOptionsRef = useRef<OptionsType<TStateObject> | null>(\r\n    null\r\n  );\r\n  latestInitialOptionsRef.current = (getInitialOptions(thisKey as string) ??\r\n    null) as OptionsType<TStateObject> | null;\r\n\r\n  useEffect(() => {\r\n    if (syncUpdate && syncUpdate.stateKey === thisKey && syncUpdate.path?.[0]) {\r\n      // Update the actual state value\r\n\r\n      // Create combined key and update sync info\r\n      const syncKey = `${syncUpdate.stateKey}:${syncUpdate.path.join('.')}`;\r\n      getGlobalStore.getState().setSyncInfo(syncKey, {\r\n        timeStamp: syncUpdate.timeStamp!,\r\n        userId: syncUpdate.userId!,\r\n      });\r\n    }\r\n  }, [syncUpdate]);\r\n\r\n  const resolveInitialState = useCallback(\r\n    (\r\n      overrideOptions?: OptionsType<TStateObject>\r\n    ): {\r\n      value: TStateObject;\r\n      source: 'default' | 'server' | 'localStorage';\r\n      timestamp: number;\r\n    } => {\r\n      // If we pass in options, use them. Otherwise, get from the global store.\r\n      const optionsToUse = overrideOptions\r\n        ? { ...getInitialOptions(thisKey as string), ...overrideOptions }\r\n        : getInitialOptions(thisKey as string);\r\n\r\n      const currentOptions = optionsToUse;\r\n      const finalDefaultState =\r\n        currentOptions?.defaultState || defaultState || stateObject;\r\n\r\n      // 1. Check server state\r\n      const hasValidServerData =\r\n        currentOptions?.serverState?.status === 'success' &&\r\n        currentOptions?.serverState?.data !== undefined;\r\n\r\n      if (hasValidServerData) {\r\n        return {\r\n          value: currentOptions.serverState!.data! as any,\r\n          source: 'server',\r\n          timestamp: currentOptions.serverState!.timestamp || Date.now(),\r\n        };\r\n      }\r\n      // 2. Check localStorage\r\n      if (currentOptions?.localStorage?.key && sessionId) {\r\n        const localKey = isFunction(currentOptions.localStorage.key)\r\n          ? currentOptions.localStorage.key(finalDefaultState)\r\n          : currentOptions.localStorage.key;\r\n\r\n        const localData = loadFromLocalStorage(\r\n          `${sessionId}-${thisKey}-${localKey}`\r\n        );\r\n\r\n        if (\r\n          localData &&\r\n          localData.lastUpdated > (currentOptions?.serverState?.timestamp || 0)\r\n        ) {\r\n          return {\r\n            value: localData.state,\r\n            source: 'localStorage',\r\n            timestamp: localData.lastUpdated,\r\n          };\r\n        }\r\n      }\r\n\r\n      // 3. Use default state\r\n      return {\r\n        value: finalDefaultState || (stateObject as any),\r\n        source: 'default',\r\n        timestamp: Date.now(),\r\n      };\r\n    },\r\n    [thisKey, defaultState, stateObject, sessionId]\r\n  );\r\n\r\n  // Effect 1: When this component's serverState prop changes, broadcast it\r\n  useEffect(() => {\r\n    getGlobalStore.getState().setServerStateUpdate(thisKey, serverState);\r\n  }, [serverState, thisKey]);\r\n\r\n  // Effect 2: Listen for server state updates from ANY component\r\n  useEffect(() => {\r\n    const unsubscribe = getGlobalStore\r\n      .getState()\r\n      .subscribeToPath(thisKey, (event) => {\r\n        if (event?.type === 'SERVER_STATE_UPDATE') {\r\n          const serverStateData = event.serverState;\r\n          console.log('SERVER_STATE_UPDATE', event);\r\n          if (\r\n            serverStateData?.status === 'success' &&\r\n            serverStateData.data !== undefined\r\n          ) {\r\n            const newOptions = { serverState: serverStateData };\r\n            setAndMergeOptions(thisKey, newOptions);\r\n\r\n            const mergeConfig =\r\n              typeof serverStateData.merge === 'object'\r\n                ? serverStateData.merge\r\n                : serverStateData.merge === true\r\n                  ? { strategy: 'append' }\r\n                  : null;\r\n\r\n            const currentState = getGlobalStore\r\n              .getState()\r\n              .getShadowValue(thisKey);\r\n            const incomingData = serverStateData.data;\r\n            if (\r\n              mergeConfig &&\r\n              Array.isArray(currentState) &&\r\n              Array.isArray(incomingData)\r\n            ) {\r\n              const keyField = mergeConfig.key;\r\n              const existingIds = new Set(\r\n                currentState.map((item: any) => item[keyField])\r\n              );\r\n\r\n              const newUniqueItems = incomingData.filter((item: any) => {\r\n                return !existingIds.has(item[keyField]);\r\n              });\r\n\r\n              if (newUniqueItems.length > 0) {\r\n                newUniqueItems.forEach((item) => {\r\n                  getGlobalStore\r\n                    .getState()\r\n                    .insertShadowArrayElement(thisKey, [], item);\r\n\r\n                  // MARK NEW SERVER ITEMS AS SYNCED\r\n                  const arrayMeta = getGlobalStore\r\n                    .getState()\r\n                    .getShadowMetadata(thisKey, []);\r\n\r\n                  if (arrayMeta?.arrayKeys) {\r\n                    const newItemKey =\r\n                      arrayMeta.arrayKeys[arrayMeta.arrayKeys.length - 1];\r\n                    if (newItemKey) {\r\n                      const newItemPath = newItemKey.split('.').slice(1);\r\n\r\n                      // Mark the new server item as synced, not dirty\r\n                      getGlobalStore\r\n                        .getState()\r\n                        .setShadowMetadata(thisKey, newItemPath, {\r\n                          isDirty: false,\r\n                          stateSource: 'server',\r\n                          lastServerSync:\r\n                            serverStateData.timestamp || Date.now(),\r\n                        });\r\n\r\n                      // Also mark all its child fields as synced if it's an object\r\n                      const itemValue = getGlobalStore\r\n                        .getState()\r\n                        .getShadowValue(newItemKey);\r\n                      if (\r\n                        itemValue &&\r\n                        typeof itemValue === 'object' &&\r\n                        !Array.isArray(itemValue)\r\n                      ) {\r\n                        Object.keys(itemValue).forEach((fieldKey) => {\r\n                          const fieldPath = [...newItemPath, fieldKey];\r\n                          getGlobalStore\r\n                            .getState()\r\n                            .setShadowMetadata(thisKey, fieldPath, {\r\n                              isDirty: false,\r\n                              stateSource: 'server',\r\n                              lastServerSync:\r\n                                serverStateData.timestamp || Date.now(),\r\n                            });\r\n                        });\r\n                      }\r\n                    }\r\n                  }\r\n                });\r\n              }\r\n            } else {\r\n              // For replace strategy or initial load\r\n              getGlobalStore\r\n                .getState()\r\n                .initializeShadowState(thisKey, incomingData);\r\n\r\n              // Mark the entire state tree as synced from server\r\n              markEntireStateAsServerSynced(\r\n                thisKey,\r\n                [],\r\n                incomingData,\r\n                serverStateData.timestamp\r\n              );\r\n            }\r\n\r\n            const meta = getGlobalStore\r\n              .getState()\r\n              .getShadowMetadata(thisKey, []);\r\n            getGlobalStore.getState().setShadowMetadata(thisKey, [], {\r\n              ...meta,\r\n              stateSource: 'server',\r\n              lastServerSync: serverStateData.timestamp || Date.now(),\r\n              isDirty: false,\r\n            });\r\n          }\r\n        }\r\n      });\r\n\r\n    return unsubscribe;\r\n  }, [thisKey, resolveInitialState]);\r\n\r\n  useEffect(() => {\r\n    const existingMeta = getGlobalStore\r\n      .getState()\r\n      .getShadowMetadata(thisKey, []);\r\n    if (existingMeta && existingMeta.stateSource) {\r\n      return; // Already initialized, bail out.\r\n    }\r\n\r\n    const options = getInitialOptions(thisKey as string);\r\n\r\n    if (options?.defaultState !== undefined || defaultState !== undefined) {\r\n      const finalDefaultState = options?.defaultState || defaultState;\r\n\r\n      // Only set defaultState if it's not already set\r\n      if (!options?.defaultState) {\r\n        setAndMergeOptions(thisKey as string, {\r\n          defaultState: finalDefaultState,\r\n        });\r\n      }\r\n\r\n      const { value: resolvedState, source, timestamp } = resolveInitialState();\r\n\r\n      getGlobalStore.getState().initializeShadowState(thisKey, resolvedState);\r\n\r\n      // Set shadow metadata with the correct source info\r\n      getGlobalStore.getState().setShadowMetadata(thisKey, [], {\r\n        stateSource: source,\r\n        lastServerSync: source === 'server' ? timestamp : undefined,\r\n        isDirty: false,\r\n        baseServerState: source === 'server' ? resolvedState : undefined,\r\n      });\r\n\r\n      notifyComponents(thisKey);\r\n    }\r\n  }, [thisKey, ...(dependencies || [])]);\r\n\r\n  useLayoutEffect(() => {\r\n    if (noStateKey) {\r\n      setAndMergeOptions(thisKey as string, {\r\n        formElements,\r\n        defaultState,\r\n        localStorage,\r\n        middleware: latestInitialOptionsRef.current?.middleware,\r\n      });\r\n    }\r\n\r\n    const componentKey = `${thisKey}////${componentIdRef.current}`;\r\n\r\n    // Register component in shadow metadata at root level\r\n    const rootMeta = getGlobalStore.getState().getShadowMetadata(thisKey, []);\r\n    const components = rootMeta?.components || new Map();\r\n\r\n    components.set(componentKey, {\r\n      forceUpdate: () => forceUpdate({}),\r\n      reactiveType: reactiveType ?? ['component', 'deps'],\r\n      paths: new Set(),\r\n      depsFunction: reactiveDeps || undefined,\r\n      deps: reactiveDeps\r\n        ? reactiveDeps(getGlobalStore.getState().getShadowValue(thisKey))\r\n        : [],\r\n      prevDeps: reactiveDeps // Initialize prevDeps with the same initial value\r\n        ? reactiveDeps(getGlobalStore.getState().getShadowValue(thisKey))\r\n        : [],\r\n    });\r\n\r\n    getGlobalStore.getState().setShadowMetadata(thisKey, [], {\r\n      ...rootMeta,\r\n      components,\r\n    });\r\n    forceUpdate({});\r\n    return () => {\r\n      const meta = getGlobalStore.getState().getShadowMetadata(thisKey, []);\r\n      const component = meta?.components?.get(componentKey);\r\n\r\n      // Remove from each path we registered to\r\n      if (component?.paths) {\r\n        component.paths.forEach((fullPath) => {\r\n          // fullPath is like \"todos.0.name\", need to split and remove stateKey\r\n          const pathParts = fullPath.split('.');\r\n          const path = pathParts.slice(1); // Remove stateKey part\r\n\r\n          const pathMeta = getGlobalStore\r\n            .getState()\r\n            .getShadowMetadata(thisKey, path);\r\n          if (pathMeta?.pathComponents) {\r\n            // Optionally clean up empty Sets\r\n\r\n            if (pathMeta.pathComponents.size === 0) {\r\n              delete pathMeta.pathComponents;\r\n              getGlobalStore\r\n                .getState()\r\n                .setShadowMetadata(thisKey, path, pathMeta);\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // Remove from root components\r\n      if (meta?.components) {\r\n        getGlobalStore.getState().setShadowMetadata(thisKey, [], meta);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const syncApiRef = useRef<SyncApi | null>(null);\r\n\r\n  const effectiveSetState = (\r\n    newStateOrFunction: UpdateArg<TStateObject> | InsertParams<TStateObject>,\r\n    path: string[],\r\n    updateObj: UpdateOptions\r\n  ) => {\r\n    const fullPath = [thisKey, ...path].join('.');\r\n\r\n    const store = getGlobalStore.getState();\r\n\r\n    const shadowMeta = store.getShadowMetadata(thisKey, path);\r\n    const nestedShadowValue = store.getShadowValue(fullPath) as TStateObject;\r\n\r\n    const payload = (\r\n      updateObj.updateType === 'insert' && isFunction(newStateOrFunction)\r\n        ? newStateOrFunction({ state: nestedShadowValue, uuid: uuidv4() })\r\n        : isFunction(newStateOrFunction)\r\n          ? newStateOrFunction(nestedShadowValue)\r\n          : newStateOrFunction\r\n    ) as TStateObject;\r\n\r\n    const timeStamp = Date.now();\r\n\r\n    const newUpdate = {\r\n      timeStamp,\r\n      stateKey: thisKey,\r\n      path,\r\n      updateType: updateObj.updateType,\r\n      status: 'new' as const,\r\n      oldValue: nestedShadowValue,\r\n      newValue: payload,\r\n    } satisfies UpdateTypeDetail;\r\n\r\n    // Perform the update\r\n    switch (updateObj.updateType) {\r\n      case 'insert': {\r\n        store.insertShadowArrayElement(thisKey, path, newUpdate.newValue);\r\n        // The array at `path` has been modified. Mark it AND all its parents as dirty.\r\n        store.markAsDirty(thisKey, path, { bubble: true });\r\n\r\n        // ALSO mark the newly inserted item itself as dirty\r\n        // Get the new item's path and mark it as dirty\r\n        const arrayMeta = store.getShadowMetadata(thisKey, path);\r\n        if (arrayMeta?.arrayKeys) {\r\n          const newItemKey =\r\n            arrayMeta.arrayKeys[arrayMeta.arrayKeys.length - 1];\r\n          if (newItemKey) {\r\n            const newItemPath = newItemKey.split('.').slice(1); // Remove stateKey\r\n            store.markAsDirty(thisKey, newItemPath, { bubble: false });\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case 'cut': {\r\n        const parentArrayPath = path.slice(0, -1);\r\n\r\n        store.removeShadowArrayElement(thisKey, path);\r\n        store.markAsDirty(thisKey, parentArrayPath, { bubble: true });\r\n        break;\r\n      }\r\n      case 'update': {\r\n        store.updateShadowAtPath(thisKey, path, newUpdate.newValue);\r\n        store.markAsDirty(thisKey, path, { bubble: true });\r\n        break;\r\n      }\r\n    }\r\n    const shouldSync = updateObj.sync !== false;\r\n\r\n    if (shouldSync && syncApiRef.current && syncApiRef.current.connected) {\r\n      syncApiRef.current.updateState({ operation: newUpdate });\r\n    }\r\n    // Handle signals - reuse shadowMeta from the beginning\r\n    if (shadowMeta?.signals && shadowMeta.signals.length > 0) {\r\n      // Use updatedShadowValue if we need the new value, otherwise use payload\r\n      const displayValue = updateObj.updateType === 'cut' ? null : payload;\r\n\r\n      shadowMeta.signals.forEach(({ parentId, position, effect }) => {\r\n        const parent = document.querySelector(`[data-parent-id=\"${parentId}\"]`);\r\n        if (parent) {\r\n          const childNodes = Array.from(parent.childNodes);\r\n          if (childNodes[position]) {\r\n            let finalDisplayValue = displayValue;\r\n            if (effect && displayValue !== null) {\r\n              try {\r\n                finalDisplayValue = new Function(\r\n                  'state',\r\n                  `return (${effect})(state)`\r\n                )(displayValue);\r\n              } catch (err) {\r\n                console.error('Error evaluating effect function:', err);\r\n              }\r\n            }\r\n\r\n            if (\r\n              finalDisplayValue !== null &&\r\n              finalDisplayValue !== undefined &&\r\n              typeof finalDisplayValue === 'object'\r\n            ) {\r\n              finalDisplayValue = JSON.stringify(finalDisplayValue) as any;\r\n            }\r\n\r\n            childNodes[position].textContent = String(finalDisplayValue ?? '');\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // Update in effectiveSetState for insert handling:\r\n    if (updateObj.updateType === 'insert') {\r\n      // Use shadowMeta from beginning if it's an array\r\n      if (shadowMeta?.mapWrappers && shadowMeta.mapWrappers.length > 0) {\r\n        // Get fresh array keys after insert\r\n        const sourceArrayKeys =\r\n          store.getShadowMetadata(thisKey, path)?.arrayKeys || [];\r\n        const newItemKey = sourceArrayKeys[sourceArrayKeys.length - 1]!;\r\n        const newItemValue = store.getShadowValue(newItemKey);\r\n        const fullSourceArray = store.getShadowValue(\r\n          [thisKey, ...path].join('.')\r\n        );\r\n\r\n        if (!newItemKey || newItemValue === undefined) return;\r\n\r\n        shadowMeta.mapWrappers.forEach((wrapper) => {\r\n          let shouldRender = true;\r\n          let insertPosition = -1;\r\n\r\n          // Check if wrapper has transforms\r\n          if (wrapper.meta?.transforms && wrapper.meta.transforms.length > 0) {\r\n            // Check if new item passes all filters\r\n            for (const transform of wrapper.meta.transforms) {\r\n              if (transform.type === 'filter') {\r\n                if (!transform.fn(newItemValue, -1)) {\r\n                  shouldRender = false;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (shouldRender) {\r\n              // Get current valid keys by applying transforms\r\n              const currentValidKeys = applyTransforms(\r\n                thisKey,\r\n                path,\r\n                wrapper.meta.transforms\r\n              );\r\n\r\n              // Find where to insert based on sort\r\n              const sortTransform = wrapper.meta.transforms.find(\r\n                (t: any) => t.type === 'sort'\r\n              );\r\n              if (sortTransform) {\r\n                // Add new item to the list and sort to find position\r\n                const allItems = currentValidKeys.map((key) => ({\r\n                  key,\r\n                  value: store.getShadowValue(key),\r\n                }));\r\n\r\n                allItems.push({ key: newItemKey, value: newItemValue });\r\n                allItems.sort((a, b) => sortTransform.fn(a.value, b.value));\r\n\r\n                insertPosition = allItems.findIndex(\r\n                  (item) => item.key === newItemKey\r\n                );\r\n              } else {\r\n                // No sort, insert at end\r\n                insertPosition = currentValidKeys.length;\r\n              }\r\n            }\r\n          } else {\r\n            // No transforms, always render at end\r\n            shouldRender = true;\r\n            insertPosition = sourceArrayKeys.length - 1;\r\n          }\r\n\r\n          if (!shouldRender) {\r\n            return; // Skip this wrapper, item doesn't pass filters\r\n          }\r\n\r\n          if (wrapper.containerRef && wrapper.containerRef.isConnected) {\r\n            const itemElement = document.createElement('div');\r\n            itemElement.setAttribute('data-item-path', newItemKey);\r\n\r\n            // Insert at correct position\r\n            const children = Array.from(wrapper.containerRef.children);\r\n            if (insertPosition >= 0 && insertPosition < children.length) {\r\n              wrapper.containerRef.insertBefore(\r\n                itemElement,\r\n                children[insertPosition]!\r\n              );\r\n            } else {\r\n              wrapper.containerRef.appendChild(itemElement);\r\n            }\r\n\r\n            const root = createRoot(itemElement);\r\n            const componentId = uuidv4();\r\n            const itemPath = newItemKey.split('.').slice(1);\r\n\r\n            const arraySetter = wrapper.rebuildStateShape({\r\n              path: wrapper.path,\r\n              currentState: fullSourceArray,\r\n              componentId: wrapper.componentId,\r\n              meta: wrapper.meta,\r\n            });\r\n\r\n            root.render(\r\n              createElement(MemoizedCogsItemWrapper, {\r\n                stateKey: thisKey,\r\n                itemComponentId: componentId,\r\n                itemPath: itemPath,\r\n                localIndex: insertPosition,\r\n                arraySetter: arraySetter,\r\n                rebuildStateShape: wrapper.rebuildStateShape,\r\n                renderFn: wrapper.mapFn,\r\n              })\r\n            );\r\n          }\r\n        });\r\n      }\r\n    }\r\n    if (updateObj.updateType === 'cut') {\r\n      const arrayPath = path.slice(0, -1);\r\n      const arrayMeta = store.getShadowMetadata(thisKey, arrayPath);\r\n\r\n      if (arrayMeta?.mapWrappers && arrayMeta.mapWrappers.length > 0) {\r\n        arrayMeta.mapWrappers.forEach((wrapper) => {\r\n          if (wrapper.containerRef && wrapper.containerRef.isConnected) {\r\n            const elementToRemove = wrapper.containerRef.querySelector(\r\n              `[data-item-path=\"${fullPath}\"]`\r\n            );\r\n            if (elementToRemove) {\r\n              elementToRemove.remove();\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    const rootMeta = store.getShadowMetadata(thisKey, []);\r\n    const notifiedComponents = new Set<string>();\r\n\r\n    if (!rootMeta?.components) {\r\n      return;\r\n    }\r\n\r\n    // --- PASS 1: Notify specific subscribers based on update type ---\r\n\r\n    if (updateObj.updateType === 'update') {\r\n      // --- Bubble-up Notification ---\r\n      // When a nested property changes, notify components listening at that exact path,\r\n      // and also \"bubble up\" to notify components listening on parent paths.\r\n      // e.g., an update to `user.address.street` notifies listeners of `street`, `address`, and `user`.\r\n      let currentPath = [...path]; // Create a mutable copy of the path\r\n\r\n      while (true) {\r\n        const currentPathMeta = store.getShadowMetadata(thisKey, currentPath);\r\n\r\n        if (currentPathMeta?.pathComponents) {\r\n          currentPathMeta.pathComponents.forEach((componentId) => {\r\n            if (notifiedComponents.has(componentId)) {\r\n              return; // Avoid sending redundant notifications\r\n            }\r\n            const component = rootMeta.components?.get(componentId);\r\n            if (component) {\r\n              const reactiveTypes = Array.isArray(component.reactiveType)\r\n                ? component.reactiveType\r\n                : [component.reactiveType || 'component'];\r\n\r\n              // This notification logic applies to components that depend on object structures.\r\n              if (!reactiveTypes.includes('none')) {\r\n                component.forceUpdate();\r\n                notifiedComponents.add(componentId);\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n        if (currentPath.length === 0) {\r\n          break; // We've reached the root, stop bubbling.\r\n        }\r\n        currentPath.pop(); // Go up one level for the next iteration.\r\n      }\r\n\r\n      // ADDITIONALLY, if the payload is an object, perform a deep-check and\r\n      // notify any components that are subscribed to specific sub-paths that changed.\r\n      if (\r\n        payload &&\r\n        typeof payload === 'object' &&\r\n        !isArray(payload) &&\r\n        nestedShadowValue &&\r\n        typeof nestedShadowValue === 'object' &&\r\n        !isArray(nestedShadowValue)\r\n      ) {\r\n        // Get a list of dot-separated paths that have changed (e.g., ['name', 'address.city'])\r\n        const changedSubPaths = getDifferences(payload, nestedShadowValue);\r\n\r\n        changedSubPaths.forEach((subPathString) => {\r\n          const subPath = subPathString.split('.');\r\n          const fullSubPath = [...path, ...subPath];\r\n\r\n          // Get the metadata (and subscribers) for this specific nested path\r\n          const subPathMeta = store.getShadowMetadata(thisKey, fullSubPath);\r\n          if (subPathMeta?.pathComponents) {\r\n            subPathMeta.pathComponents.forEach((componentId) => {\r\n              // Avoid sending a redundant update\r\n              if (notifiedComponents.has(componentId)) {\r\n                return;\r\n              }\r\n              const component = rootMeta.components?.get(componentId);\r\n              if (component) {\r\n                const reactiveTypes = Array.isArray(component.reactiveType)\r\n                  ? component.reactiveType\r\n                  : [component.reactiveType || 'component'];\r\n\r\n                if (!reactiveTypes.includes('none')) {\r\n                  component.forceUpdate();\r\n                  notifiedComponents.add(componentId);\r\n                }\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }\r\n    } else if (\r\n      updateObj.updateType === 'insert' ||\r\n      updateObj.updateType === 'cut'\r\n    ) {\r\n      // For array structural changes, notify components listening to the parent array.\r\n      const parentArrayPath =\r\n        updateObj.updateType === 'insert' ? path : path.slice(0, -1);\r\n\r\n      const parentMeta = store.getShadowMetadata(thisKey, parentArrayPath);\r\n\r\n      // Handle signal updates for array length, etc.\r\n      if (parentMeta?.signals && parentMeta.signals.length > 0) {\r\n        const parentFullPath = [thisKey, ...parentArrayPath].join('.');\r\n        const parentValue = store.getShadowValue(parentFullPath);\r\n\r\n        parentMeta.signals.forEach(({ parentId, position, effect }) => {\r\n          const parent = document.querySelector(\r\n            `[data-parent-id=\"${parentId}\"]`\r\n          );\r\n          if (parent) {\r\n            const childNodes = Array.from(parent.childNodes);\r\n            if (childNodes[position]) {\r\n              let displayValue = parentValue;\r\n              if (effect) {\r\n                try {\r\n                  displayValue = new Function(\r\n                    'state',\r\n                    `return (${effect})(state)`\r\n                  )(parentValue);\r\n                } catch (err) {\r\n                  console.error('Error evaluating effect function:', err);\r\n                  displayValue = parentValue;\r\n                }\r\n              }\r\n\r\n              if (\r\n                displayValue !== null &&\r\n                displayValue !== undefined &&\r\n                typeof displayValue === 'object'\r\n              ) {\r\n                displayValue = JSON.stringify(displayValue);\r\n              }\r\n\r\n              childNodes[position].textContent = String(displayValue ?? '');\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // Notify components subscribed to the array itself.\r\n      if (parentMeta?.pathComponents) {\r\n        parentMeta.pathComponents.forEach((componentId) => {\r\n          if (!notifiedComponents.has(componentId)) {\r\n            const component = rootMeta.components?.get(componentId);\r\n            if (component) {\r\n              component.forceUpdate();\r\n              notifiedComponents.add(componentId);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    rootMeta.components.forEach((component, componentId) => {\r\n      if (notifiedComponents.has(componentId)) {\r\n        return;\r\n      }\r\n\r\n      const reactiveTypes = Array.isArray(component.reactiveType)\r\n        ? component.reactiveType\r\n        : [component.reactiveType || 'component'];\r\n\r\n      if (reactiveTypes.includes('all')) {\r\n        component.forceUpdate();\r\n        notifiedComponents.add(componentId);\r\n        return;\r\n      }\r\n\r\n      if (reactiveTypes.includes('deps')) {\r\n        if (component.depsFunction) {\r\n          const currentState = store.getShadowValue(thisKey);\r\n          const newDeps = component.depsFunction(currentState);\r\n          let shouldUpdate = false;\r\n\r\n          if (newDeps === true) {\r\n            shouldUpdate = true;\r\n          } else if (Array.isArray(newDeps)) {\r\n            if (!isDeepEqual(component.prevDeps, newDeps)) {\r\n              component.prevDeps = newDeps;\r\n              shouldUpdate = true;\r\n            }\r\n          }\r\n\r\n          if (shouldUpdate) {\r\n            component.forceUpdate();\r\n            notifiedComponents.add(componentId);\r\n          }\r\n        }\r\n      }\r\n    });\r\n    notifiedComponents.clear();\r\n    addStateLog(thisKey, newUpdate);\r\n\r\n    saveToLocalStorage(\r\n      payload,\r\n      thisKey,\r\n      latestInitialOptionsRef.current,\r\n      sessionId\r\n    );\r\n\r\n    if (latestInitialOptionsRef.current?.middleware) {\r\n      latestInitialOptionsRef.current!.middleware({\r\n        update: newUpdate,\r\n      });\r\n    }\r\n  };\r\n\r\n  if (!getGlobalStore.getState().initialStateGlobal[thisKey]) {\r\n    updateInitialStateGlobal(thisKey, stateObject);\r\n  }\r\n\r\n  const updaterFinal = useMemo(() => {\r\n    return createProxyHandler<TStateObject>(\r\n      thisKey,\r\n      effectiveSetState,\r\n      componentIdRef.current,\r\n      sessionId\r\n    );\r\n  }, [thisKey, sessionId]);\r\n\r\n  const cogsSyncFn = __useSync;\r\n  const syncOpt = latestInitialOptionsRef.current?.syncOptions;\r\n\r\n  if (cogsSyncFn) {\r\n    syncApiRef.current = cogsSyncFn(\r\n      updaterFinal as any,\r\n      syncOpt ?? ({} as any)\r\n    );\r\n  }\r\n\r\n  return updaterFinal;\r\n}\r\n\r\nexport type MetaData = {\r\n  /**\r\n   * An array of the full, unique string IDs (e.g., `\"stateKey.arrayName.id:123\"`)\r\n   * of the items that belong to the current derived \"view\" of an array.\r\n   * This is the primary mechanism for tracking the state of filtered or sorted lists.\r\n   *\r\n   * - `stateFilter` populates this with only the IDs of items that passed the filter.\r\n   * - `stateSort` reorders this list to match the new sort order.\r\n   * - All subsequent chained operations (like `.get()`, `.index()`, or `.cut()`)\r\n   *   MUST consult this list first to know which items they apply to and in what order.\r\n   */\r\n  validIds?: string[];\r\n\r\n  /**\r\n   * An array of the actual filter functions that have been applied in a chain.\r\n   * This is primarily used by reactive renderers like `$stateMap` to make predictions.\r\n   *\r\n   * For example, when a new item is inserted into the original source array, a\r\n   * `$stateMap` renderer on a filtered view can use these functions to test if the\r\n   * newly inserted item should be dynamically rendered in its view.\r\n   */\r\n  transforms?: Array<{\r\n    type: 'filter' | 'sort';\r\n    fn: Function;\r\n  }>;\r\n};\r\n\r\nfunction hashTransforms(transforms: any[]) {\r\n  if (!transforms || transforms.length === 0) {\r\n    return '';\r\n  }\r\n  // This creates a string representation of the transforms AND their dependencies.\r\n  // Example: \"filter['red']sort['score','asc']\"\r\n  return transforms\r\n    .map(\r\n      (transform) =>\r\n        // Safely stringify dependencies. An empty array becomes '[]'.\r\n        `${transform.type}${JSON.stringify(transform.dependencies || [])}`\r\n    )\r\n    .join('');\r\n}\r\nconst applyTransforms = (\r\n  stateKey: string,\r\n  path: string[],\r\n  transforms?: Array<{ type: 'filter' | 'sort'; fn: Function }>\r\n): string[] => {\r\n  let arrayKeys =\r\n    getGlobalStore.getState().getShadowMetadata(stateKey, path)?.arrayKeys ||\r\n    [];\r\n\r\n  if (!transforms || transforms.length === 0) {\r\n    return arrayKeys;\r\n  }\r\n\r\n  let itemsWithKeys = arrayKeys.map((key) => ({\r\n    key,\r\n    value: getGlobalStore.getState().getShadowValue(key),\r\n  }));\r\n\r\n  for (const transform of transforms) {\r\n    if (transform.type === 'filter') {\r\n      itemsWithKeys = itemsWithKeys.filter(({ value }, index) =>\r\n        transform.fn(value, index)\r\n      );\r\n    } else if (transform.type === 'sort') {\r\n      itemsWithKeys.sort((a, b) => transform.fn(a.value, b.value));\r\n    }\r\n  }\r\n\r\n  return itemsWithKeys.map(({ key }) => key);\r\n};\r\nconst registerComponentDependency = (\r\n  stateKey: string,\r\n  componentId: string,\r\n  dependencyPath: string[]\r\n) => {\r\n  const fullComponentId = `${stateKey}////${componentId}`;\r\n  const { addPathComponent, getShadowMetadata } = getGlobalStore.getState();\r\n\r\n  // First, check if the component should even be registered.\r\n  // This check is safe to do outside the setter.\r\n  const rootMeta = getShadowMetadata(stateKey, []);\r\n  const component = rootMeta?.components?.get(fullComponentId);\r\n\r\n  if (\r\n    !component ||\r\n    component.reactiveType === 'none' ||\r\n    !(\r\n      Array.isArray(component.reactiveType)\r\n        ? component.reactiveType\r\n        : [component.reactiveType]\r\n    ).includes('component')\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  // Now, call the single, safe, atomic function to perform the update.\r\n  addPathComponent(stateKey, dependencyPath, fullComponentId);\r\n};\r\nconst notifySelectionComponents = (\r\n  stateKey: string,\r\n  parentPath: string[],\r\n  currentSelected?: string | undefined\r\n) => {\r\n  const store = getGlobalStore.getState();\r\n  const rootMeta = store.getShadowMetadata(stateKey, []);\r\n  const notifiedComponents = new Set<string>();\r\n\r\n  // Handle \"all\" reactive components first\r\n  if (rootMeta?.components) {\r\n    rootMeta.components.forEach((component, componentId) => {\r\n      const reactiveTypes = Array.isArray(component.reactiveType)\r\n        ? component.reactiveType\r\n        : [component.reactiveType || 'component'];\r\n\r\n      if (reactiveTypes.includes('all')) {\r\n        component.forceUpdate();\r\n        notifiedComponents.add(componentId);\r\n      }\r\n    });\r\n  }\r\n\r\n  store\r\n    .getShadowMetadata(stateKey, [...parentPath, 'getSelected'])\r\n    ?.pathComponents?.forEach((componentId) => {\r\n      const thisComp = rootMeta?.components?.get(componentId);\r\n      thisComp?.forceUpdate();\r\n    });\r\n\r\n  const parentMeta = store.getShadowMetadata(stateKey, parentPath);\r\n  for (let arrayKey of parentMeta?.arrayKeys || []) {\r\n    const key = arrayKey + '.selected';\r\n    const selectedItem = store.getShadowMetadata(\r\n      stateKey,\r\n      key.split('.').slice(1)\r\n    );\r\n    if (arrayKey == currentSelected) {\r\n      selectedItem?.pathComponents?.forEach((componentId) => {\r\n        const thisComp = rootMeta?.components?.get(componentId);\r\n        thisComp?.forceUpdate();\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nfunction createProxyHandler<T>(\r\n  stateKey: string,\r\n  effectiveSetState: EffectiveSetState<T>,\r\n  componentId: string,\r\n  sessionId?: string\r\n): StateObject<T> {\r\n  const proxyCache = new Map<string, any>();\r\n  let stateVersion = 0;\r\n\r\n  function rebuildStateShape({\r\n    path = [],\r\n    meta,\r\n    componentId,\r\n  }: {\r\n    path: string[];\r\n    componentId: string;\r\n    meta?: MetaData;\r\n  }): any {\r\n    const derivationSignature = meta\r\n      ? JSON.stringify(meta.validIds || meta.transforms)\r\n      : '';\r\n    const cacheKey = path.join('.') + ':' + derivationSignature;\r\n    const stateKeyPathKey = [stateKey, ...path].join('.');\r\n    if (proxyCache.has(cacheKey)) {\r\n      return proxyCache.get(cacheKey);\r\n    }\r\n    type CallableStateObject<T> = {\r\n      (): T;\r\n    } & {\r\n      [key: string]: any;\r\n    };\r\n\r\n    const baseFunction = function () {\r\n      return getGlobalStore().getShadowValue(stateKey, path);\r\n    } as unknown as CallableStateObject<T>;\r\n\r\n    // We attach baseObj properties *inside* the get trap now to avoid recursion\r\n    // This is a placeholder for the proxy.\r\n\r\n    const handler = {\r\n      apply(target: any, thisArg: any, args: any[]) {\r\n        //return getGlobalStore().getShadowValue(stateKey, path);\r\n      },\r\n\r\n      get(target: any, prop: string) {\r\n        // V--------- THE CRUCIAL FIX IS HERE ---------V\r\n        // This handles requests for internal functions on the proxy,\r\n        // returning the function itself instead of treating it as state.\r\n        if (prop === '_rebuildStateShape') {\r\n          return rebuildStateShape;\r\n        }\r\n        const baseObjProps = Object.getOwnPropertyNames(baseObj);\r\n        if (baseObjProps.includes(prop) && path.length === 0) {\r\n          return (baseObj as any)[prop];\r\n        }\r\n        // ^--------- END OF FIX ---------^\r\n\r\n        if (prop === 'getDifferences') {\r\n          return () => {\r\n            const shadowMeta = getGlobalStore\r\n              .getState()\r\n              .getShadowMetadata(stateKey, []);\r\n            const currentState = getGlobalStore\r\n              .getState()\r\n              .getShadowValue(stateKey);\r\n\r\n            // Use the appropriate base state for comparison\r\n            let baseState;\r\n            if (\r\n              shadowMeta?.stateSource === 'server' &&\r\n              shadowMeta.baseServerState\r\n            ) {\r\n              baseState = shadowMeta.baseServerState;\r\n            } else {\r\n              baseState =\r\n                getGlobalStore.getState().initialStateGlobal[stateKey];\r\n            }\r\n\r\n            return getDifferences(currentState, baseState);\r\n          };\r\n        }\r\n        if (prop === 'sync' && path.length === 0) {\r\n          return async function () {\r\n            const options = getGlobalStore\r\n              .getState()\r\n              .getInitialOptions(stateKey);\r\n            const sync = options?.sync;\r\n\r\n            if (!sync) {\r\n              console.error(`No mutation defined for state key \"${stateKey}\"`);\r\n              return { success: false, error: `No mutation defined` };\r\n            }\r\n\r\n            const state = getGlobalStore\r\n              .getState()\r\n              .getShadowValue(stateKey, []);\r\n            const validationKey = options?.validation?.key;\r\n\r\n            try {\r\n              const response = await sync.action(state);\r\n              if (\r\n                response &&\r\n                !response.success &&\r\n                response.errors &&\r\n                validationKey\r\n              ) {\r\n                //  getGlobalStore.getState().removeValidationError(validationKey);\r\n                // response.errors.forEach((error) => {\r\n                //   const errorPath = [validationKey, ...error.path].join('.');\r\n                //   getGlobalStore\r\n                //     .getState()\r\n                //     .addValidationError(errorPath, error.message);\r\n                // });\r\n                //   notifyComponents(stateKey);\r\n              }\r\n\r\n              if (response?.success) {\r\n                // Mark as synced and not dirty\r\n                const shadowMeta = getGlobalStore\r\n                  .getState()\r\n                  .getShadowMetadata(stateKey, []);\r\n                getGlobalStore.getState().setShadowMetadata(stateKey, [], {\r\n                  ...shadowMeta,\r\n                  isDirty: false,\r\n                  lastServerSync: Date.now(),\r\n                  stateSource: 'server',\r\n                  baseServerState: state, // Update base server state\r\n                });\r\n\r\n                if (sync.onSuccess) {\r\n                  sync.onSuccess(response.data);\r\n                }\r\n              } else if (!response?.success && sync.onError)\r\n                sync.onError(response.error);\r\n\r\n              return response;\r\n            } catch (error) {\r\n              if (sync.onError) sync.onError(error);\r\n              return { success: false, error };\r\n            }\r\n          };\r\n        }\r\n        // Fixed getStatus function in createProxyHandler\r\n        if (prop === '_status' || prop === 'getStatus') {\r\n          const getStatusFunc = () => {\r\n            const shadowMeta = getGlobalStore\r\n              .getState()\r\n              .getShadowMetadata(stateKey, path);\r\n            const value = getGlobalStore\r\n              .getState()\r\n              .getShadowValue(stateKeyPathKey);\r\n\r\n            // Priority 1: Explicitly dirty items\r\n            if (shadowMeta?.isDirty === true) {\r\n              return 'dirty';\r\n            }\r\n\r\n            // Priority 2: Explicitly synced items (isDirty: false)\r\n            if (shadowMeta?.isDirty === false) {\r\n              return 'synced';\r\n            }\r\n\r\n            // Priority 3: Items from server source (should be synced even without explicit isDirty flag)\r\n            if (shadowMeta?.stateSource === 'server') {\r\n              return 'synced';\r\n            }\r\n\r\n            // Priority 4: Items restored from localStorage\r\n            if (shadowMeta?.stateSource === 'localStorage') {\r\n              return 'restored';\r\n            }\r\n\r\n            // Priority 5: Items from default/initial state\r\n            if (shadowMeta?.stateSource === 'default') {\r\n              return 'fresh';\r\n            }\r\n\r\n            // Priority 6: Check if this is part of initial server load\r\n            // Look up the tree to see if parent has server source\r\n            const rootMeta = getGlobalStore\r\n              .getState()\r\n              .getShadowMetadata(stateKey, []);\r\n            if (rootMeta?.stateSource === 'server' && !shadowMeta?.isDirty) {\r\n              return 'synced';\r\n            }\r\n\r\n            // Priority 7: If no metadata exists but value exists, it's probably fresh\r\n            if (value !== undefined && !shadowMeta) {\r\n              return 'fresh';\r\n            }\r\n\r\n            // Fallback\r\n            return 'unknown';\r\n          };\r\n\r\n          return prop === '_status' ? getStatusFunc() : getStatusFunc;\r\n        }\r\n        if (prop === 'removeStorage') {\r\n          return () => {\r\n            const initialState =\r\n              getGlobalStore.getState().initialStateGlobal[stateKey];\r\n            const initalOptionsGet = getInitialOptions(stateKey as string);\r\n            const localKey = isFunction(initalOptionsGet?.localStorage?.key)\r\n              ? initalOptionsGet.localStorage.key(initialState)\r\n              : initalOptionsGet?.localStorage?.key;\r\n            const storageKey = `${sessionId}-${stateKey}-${localKey}`;\r\n            if (storageKey) localStorage.removeItem(storageKey);\r\n          };\r\n        }\r\n        if (prop === 'showValidationErrors') {\r\n          return () => {\r\n            const meta = getGlobalStore\r\n              .getState()\r\n              .getShadowMetadata(stateKey, path);\r\n            if (\r\n              meta?.validation?.status === 'VALIDATION_FAILED' &&\r\n              meta.validation.message\r\n            ) {\r\n              return [meta.validation.message];\r\n            }\r\n            return [];\r\n          };\r\n        }\r\n\r\n        if (prop === 'getSelected') {\r\n          return () => {\r\n            const fullKey = stateKey + '.' + path.join('.');\r\n            registerComponentDependency(stateKey, componentId, [\r\n              ...path,\r\n              'getSelected',\r\n            ]);\r\n\r\n            const selectedIndicesMap =\r\n              getGlobalStore.getState().selectedIndicesMap;\r\n            if (!selectedIndicesMap || !selectedIndicesMap.has(fullKey)) {\r\n              return undefined;\r\n            }\r\n\r\n            const selectedItemKey = selectedIndicesMap.get(fullKey)!;\r\n            if (meta?.validIds) {\r\n              if (!meta.validIds.includes(selectedItemKey)) {\r\n                return undefined;\r\n              }\r\n            }\r\n\r\n            const value = getGlobalStore\r\n              .getState()\r\n              .getShadowValue(selectedItemKey);\r\n\r\n            if (!value) {\r\n              return undefined;\r\n            }\r\n\r\n            return rebuildStateShape({\r\n              path: selectedItemKey.split('.').slice(1) as string[],\r\n              componentId: componentId!,\r\n            });\r\n          };\r\n        }\r\n        if (prop === 'getSelectedIndex') {\r\n          return () => {\r\n            const selectedIndex = getGlobalStore\r\n              .getState()\r\n              .getSelectedIndex(\r\n                stateKey + '.' + path.join('.'),\r\n                meta?.validIds\r\n              );\r\n\r\n            return selectedIndex;\r\n          };\r\n        }\r\n        if (prop === 'clearSelected') {\r\n          notifySelectionComponents(stateKey, path);\r\n          return () => {\r\n            getGlobalStore.getState().clearSelectedIndex({\r\n              arrayKey: stateKey + '.' + path.join('.'),\r\n            });\r\n          };\r\n        }\r\n\r\n        if (prop === 'useVirtualView') {\r\n          return (\r\n            options: VirtualViewOptions\r\n          ): VirtualStateObjectResult<any[]> => {\r\n            const {\r\n              itemHeight = 50,\r\n              overscan = 6,\r\n              stickToBottom = false,\r\n              scrollStickTolerance = 75,\r\n            } = options;\r\n\r\n            const containerRef = useRef<HTMLDivElement | null>(null);\r\n            const [range, setRange] = useState({\r\n              startIndex: 0,\r\n              endIndex: 10,\r\n            });\r\n            const [rerender, forceUpdate] = useState({});\r\n            const initialScrollRef = useRef(true);\r\n\r\n            // Scroll state management\r\n            const scrollStateRef = useRef({\r\n              isUserScrolling: false,\r\n              lastScrollTop: 0,\r\n              scrollUpCount: 0,\r\n              isNearBottom: true,\r\n            });\r\n\r\n            // Measurement cache\r\n            const measurementCache = useRef(\r\n              new Map<string, { height: number; offset: number }>()\r\n            );\r\n\r\n            // Separate effect for handling rerender updates\r\n            useLayoutEffect(() => {\r\n              if (\r\n                !stickToBottom ||\r\n                !containerRef.current ||\r\n                scrollStateRef.current.isUserScrolling\r\n              )\r\n                return;\r\n\r\n              const container = containerRef.current;\r\n              container.scrollTo({\r\n                top: container.scrollHeight,\r\n                behavior: initialScrollRef.current ? 'instant' : 'smooth',\r\n              });\r\n            }, [rerender, stickToBottom]);\r\n\r\n            const arrayKeys =\r\n              getGlobalStore.getState().getShadowMetadata(stateKey, path)\r\n                ?.arrayKeys || [];\r\n\r\n            // Calculate total height and offsets\r\n            const { totalHeight, itemOffsets } = useMemo(() => {\r\n              let runningOffset = 0;\r\n              const offsets = new Map<\r\n                string,\r\n                { height: number; offset: number }\r\n              >();\r\n              const allItemKeys =\r\n                getGlobalStore.getState().getShadowMetadata(stateKey, path)\r\n                  ?.arrayKeys || [];\r\n\r\n              allItemKeys.forEach((itemKey) => {\r\n                const itemPath = itemKey.split('.').slice(1);\r\n                const measuredHeight =\r\n                  getGlobalStore\r\n                    .getState()\r\n                    .getShadowMetadata(stateKey, itemPath)?.virtualizer\r\n                    ?.itemHeight || itemHeight;\r\n\r\n                offsets.set(itemKey, {\r\n                  height: measuredHeight,\r\n                  offset: runningOffset,\r\n                });\r\n\r\n                runningOffset += measuredHeight;\r\n              });\r\n\r\n              measurementCache.current = offsets;\r\n              return { totalHeight: runningOffset, itemOffsets: offsets };\r\n            }, [arrayKeys.length, itemHeight]);\r\n\r\n            // Improved initial positioning effect\r\n            useLayoutEffect(() => {\r\n              if (\r\n                stickToBottom &&\r\n                arrayKeys.length > 0 &&\r\n                containerRef.current &&\r\n                !scrollStateRef.current.isUserScrolling &&\r\n                initialScrollRef.current\r\n              ) {\r\n                const container = containerRef.current;\r\n\r\n                // Wait for container to have dimensions\r\n                const waitForContainer = () => {\r\n                  if (container.clientHeight > 0) {\r\n                    const visibleCount = Math.ceil(\r\n                      container.clientHeight / itemHeight\r\n                    );\r\n                    const endIndex = arrayKeys.length - 1;\r\n                    const startIndex = Math.max(\r\n                      0,\r\n                      endIndex - visibleCount - overscan\r\n                    );\r\n\r\n                    setRange({ startIndex, endIndex });\r\n\r\n                    // Ensure scroll after range is set\r\n                    requestAnimationFrame(() => {\r\n                      scrollToBottom('instant');\r\n                      initialScrollRef.current = false; // Mark initial scroll as done\r\n                    });\r\n                  } else {\r\n                    // Container not ready, try again\r\n                    requestAnimationFrame(waitForContainer);\r\n                  }\r\n                };\r\n\r\n                waitForContainer();\r\n              }\r\n            }, [arrayKeys.length, stickToBottom, itemHeight, overscan]);\r\n\r\n            // Combined scroll handler\r\n            const handleScroll = useCallback(() => {\r\n              const container = containerRef.current;\r\n              if (!container) return;\r\n\r\n              const currentScrollTop = container.scrollTop;\r\n              const { scrollHeight, clientHeight } = container;\r\n              const scrollState = scrollStateRef.current;\r\n\r\n              // Check if user is near bottom\r\n              const distanceFromBottom =\r\n                scrollHeight - (currentScrollTop + clientHeight);\r\n              const wasNearBottom = scrollState.isNearBottom;\r\n              scrollState.isNearBottom =\r\n                distanceFromBottom <= scrollStickTolerance;\r\n\r\n              // Detect scroll direction\r\n              if (currentScrollTop < scrollState.lastScrollTop) {\r\n                // User scrolled up\r\n                scrollState.scrollUpCount++;\r\n\r\n                if (scrollState.scrollUpCount > 3 && wasNearBottom) {\r\n                  // User has deliberately scrolled away from bottom\r\n                  scrollState.isUserScrolling = true;\r\n                  console.log('User scrolled away from bottom');\r\n                }\r\n              } else if (scrollState.isNearBottom) {\r\n                // Reset if we're back near the bottom\r\n                scrollState.isUserScrolling = false;\r\n                scrollState.scrollUpCount = 0;\r\n              }\r\n\r\n              scrollState.lastScrollTop = currentScrollTop;\r\n\r\n              // Update visible range\r\n              let newStartIndex = 0;\r\n              for (let i = 0; i < arrayKeys.length; i++) {\r\n                const itemKey = arrayKeys[i];\r\n                const item = measurementCache.current.get(itemKey!);\r\n                if (item && item.offset + item.height > currentScrollTop) {\r\n                  newStartIndex = i;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              // Only update if range actually changed\r\n              if (newStartIndex !== range.startIndex) {\r\n                const visibleCount = Math.ceil(clientHeight / itemHeight);\r\n                setRange({\r\n                  startIndex: Math.max(0, newStartIndex - overscan),\r\n                  endIndex: Math.min(\r\n                    arrayKeys.length - 1,\r\n                    newStartIndex + visibleCount + overscan\r\n                  ),\r\n                });\r\n              }\r\n            }, [\r\n              arrayKeys.length,\r\n              range.startIndex,\r\n              itemHeight,\r\n              overscan,\r\n              scrollStickTolerance,\r\n            ]);\r\n\r\n            // Set up scroll listener\r\n            useEffect(() => {\r\n              const container = containerRef.current;\r\n              if (!container || !stickToBottom) return;\r\n\r\n              container.addEventListener('scroll', handleScroll, {\r\n                passive: true,\r\n              });\r\n\r\n              return () => {\r\n                container.removeEventListener('scroll', handleScroll);\r\n              };\r\n            }, [handleScroll, stickToBottom]);\r\n            const scrollToBottom = useCallback(\r\n              (behavior: ScrollBehavior = 'smooth') => {\r\n                const container = containerRef.current;\r\n                if (!container) return;\r\n\r\n                // Reset scroll state\r\n                scrollStateRef.current.isUserScrolling = false;\r\n                scrollStateRef.current.isNearBottom = true;\r\n                scrollStateRef.current.scrollUpCount = 0;\r\n\r\n                const performScroll = () => {\r\n                  // Multiple attempts to ensure we hit the bottom\r\n                  const attemptScroll = (attempts = 0) => {\r\n                    if (attempts > 5) return; // Prevent infinite loops\r\n\r\n                    const currentHeight = container.scrollHeight;\r\n                    const currentScroll = container.scrollTop;\r\n                    const clientHeight = container.clientHeight;\r\n\r\n                    // Check if we're already at the bottom\r\n                    if (currentScroll + clientHeight >= currentHeight - 1) {\r\n                      return;\r\n                    }\r\n\r\n                    container.scrollTo({\r\n                      top: currentHeight,\r\n                      behavior: behavior,\r\n                    });\r\n\r\n                    // In slow environments, check again after a short delay\r\n                    setTimeout(() => {\r\n                      const newHeight = container.scrollHeight;\r\n                      const newScroll = container.scrollTop;\r\n\r\n                      // If height changed or we're not at bottom, try again\r\n                      if (\r\n                        newHeight !== currentHeight ||\r\n                        newScroll + clientHeight < newHeight - 1\r\n                      ) {\r\n                        attemptScroll(attempts + 1);\r\n                      }\r\n                    }, 50);\r\n                  };\r\n\r\n                  attemptScroll();\r\n                };\r\n\r\n                // Use requestIdleCallback for better performance in slow environments\r\n                if ('requestIdleCallback' in window) {\r\n                  requestIdleCallback(performScroll, { timeout: 100 });\r\n                } else {\r\n                  // Fallback to rAF chain\r\n                  requestAnimationFrame(() => {\r\n                    requestAnimationFrame(performScroll);\r\n                  });\r\n                }\r\n              },\r\n              []\r\n            );\r\n            // Auto-scroll to bottom when new content arrives\r\n            // Consolidated auto-scroll effect with debouncing\r\n            useEffect(() => {\r\n              if (!stickToBottom || !containerRef.current) return;\r\n\r\n              const container = containerRef.current;\r\n              const scrollState = scrollStateRef.current;\r\n\r\n              // Debounced scroll function\r\n              let scrollTimeout: NodeJS.Timeout;\r\n              const debouncedScrollToBottom = () => {\r\n                clearTimeout(scrollTimeout);\r\n                scrollTimeout = setTimeout(() => {\r\n                  if (\r\n                    !scrollState.isUserScrolling &&\r\n                    scrollState.isNearBottom\r\n                  ) {\r\n                    scrollToBottom(\r\n                      initialScrollRef.current ? 'instant' : 'smooth'\r\n                    );\r\n                  }\r\n                }, 100);\r\n              };\r\n\r\n              // Single MutationObserver for all DOM changes\r\n              const observer = new MutationObserver(() => {\r\n                if (!scrollState.isUserScrolling) {\r\n                  debouncedScrollToBottom();\r\n                }\r\n              });\r\n\r\n              observer.observe(container, {\r\n                childList: true,\r\n                subtree: true,\r\n                attributes: true,\r\n                attributeFilter: ['style', 'class'], // More specific than just 'height'\r\n              });\r\n\r\n              // Handle image loads with event delegation\r\n              const handleImageLoad = (e: Event) => {\r\n                if (\r\n                  e.target instanceof HTMLImageElement &&\r\n                  !scrollState.isUserScrolling\r\n                ) {\r\n                  debouncedScrollToBottom();\r\n                }\r\n              };\r\n\r\n              container.addEventListener('load', handleImageLoad, true);\r\n\r\n              // Initial scroll with proper timing\r\n              if (initialScrollRef.current) {\r\n                // For initial load, wait for next tick to ensure DOM is ready\r\n                setTimeout(() => {\r\n                  scrollToBottom('instant');\r\n                }, 0);\r\n              } else {\r\n                debouncedScrollToBottom();\r\n              }\r\n\r\n              return () => {\r\n                clearTimeout(scrollTimeout);\r\n                observer.disconnect();\r\n                container.removeEventListener('load', handleImageLoad, true);\r\n              };\r\n            }, [stickToBottom, arrayKeys.length, scrollToBottom]);\r\n            // Create virtual state\r\n            const virtualState = useMemo(() => {\r\n              const store = getGlobalStore.getState();\r\n              const sourceArray = store.getShadowValue(\r\n                [stateKey, ...path].join('.')\r\n              ) as any[];\r\n              const currentKeys =\r\n                store.getShadowMetadata(stateKey, path)?.arrayKeys || [];\r\n\r\n              const slicedArray = sourceArray.slice(\r\n                range.startIndex,\r\n                range.endIndex + 1\r\n              );\r\n              const slicedIds = currentKeys.slice(\r\n                range.startIndex,\r\n                range.endIndex + 1\r\n              );\r\n\r\n              return rebuildStateShape({\r\n                path,\r\n                componentId: componentId!,\r\n                meta: { ...meta, validIds: slicedIds },\r\n              });\r\n            }, [range.startIndex, range.endIndex, arrayKeys.length]);\r\n\r\n            return {\r\n              virtualState,\r\n              virtualizerProps: {\r\n                outer: {\r\n                  ref: containerRef,\r\n                  style: {\r\n                    overflowY: 'auto',\r\n                    height: '100%',\r\n                    position: 'relative',\r\n                  },\r\n                },\r\n                inner: {\r\n                  style: {\r\n                    height: `${totalHeight}px`,\r\n                    position: 'relative',\r\n                  },\r\n                },\r\n                list: {\r\n                  style: {\r\n                    transform: `translateY(${\r\n                      measurementCache.current.get(arrayKeys[range.startIndex]!)\r\n                        ?.offset || 0\r\n                    }px)`,\r\n                  },\r\n                },\r\n              },\r\n              scrollToBottom,\r\n              scrollToIndex: (\r\n                index: number,\r\n                behavior: ScrollBehavior = 'smooth'\r\n              ) => {\r\n                if (containerRef.current && arrayKeys[index]) {\r\n                  const offset =\r\n                    measurementCache.current.get(arrayKeys[index]!)?.offset ||\r\n                    0;\r\n                  containerRef.current.scrollTo({ top: offset, behavior });\r\n                }\r\n              },\r\n            };\r\n          };\r\n        }\r\n        if (prop === 'stateMap') {\r\n          return (\r\n            callbackfn: (\r\n              setter: any,\r\n              index: number,\r\n\r\n              arraySetter: any\r\n            ) => void\r\n          ) => {\r\n            const [arrayKeys, setArrayKeys] = useState<any>(\r\n              meta?.validIds ??\r\n                getGlobalStore.getState().getShadowMetadata(stateKey, path)\r\n                  ?.arrayKeys\r\n            );\r\n            // getGlobalStore.getState().subscribeToPath(stateKeyPathKey, () => {\r\n            //   console.log(\r\n            //     \"stateKeyPathKeyccccccccccccccccc\",\r\n            //     stateKeyPathKey\r\n            //   );\r\n            //   setArrayKeys(\r\n            //     getGlobalStore.getState().getShadowMetadata(stateKey, path)\r\n            //   );\r\n            // });\r\n\r\n            const shadowValue = getGlobalStore\r\n              .getState()\r\n              .getShadowValue(stateKeyPathKey, meta?.validIds) as any[];\r\n            if (!arrayKeys) {\r\n              throw new Error('No array keys found for mapping');\r\n            }\r\n            const arraySetter = rebuildStateShape({\r\n              path,\r\n              componentId: componentId!,\r\n              meta,\r\n            });\r\n\r\n            return shadowValue.map((item, index) => {\r\n              const itemPath = arrayKeys[index]?.split('.').slice(1);\r\n              const itemSetter = rebuildStateShape({\r\n                path: itemPath as any,\r\n                componentId: componentId!,\r\n                meta,\r\n              });\r\n\r\n              return callbackfn(\r\n                itemSetter,\r\n                index,\r\n\r\n                arraySetter\r\n              );\r\n            });\r\n          };\r\n        }\r\n\r\n        if (prop === '$stateMap') {\r\n          return (callbackfn: any) =>\r\n            createElement(SignalMapRenderer, {\r\n              proxy: {\r\n                _stateKey: stateKey,\r\n                _path: path,\r\n                _mapFn: callbackfn,\r\n                _meta: meta,\r\n              },\r\n              rebuildStateShape,\r\n            });\r\n        } // In createProxyHandler -> handler -> get -> if (Array.isArray(currentState))\r\n\r\n        if (prop === 'stateFind') {\r\n          return (\r\n            callbackfn: (value: any, index: number) => boolean\r\n          ): StateObject<any> | undefined => {\r\n            // 1. Use the correct set of keys: filtered/sorted from meta, or all keys from the store.\r\n            const arrayKeys =\r\n              meta?.validIds ??\r\n              getGlobalStore.getState().getShadowMetadata(stateKey, path)\r\n                ?.arrayKeys;\r\n\r\n            if (!arrayKeys) {\r\n              return undefined;\r\n            }\r\n\r\n            // 2. Iterate through the keys, get the value for each, and run the callback.\r\n            for (let i = 0; i < arrayKeys.length; i++) {\r\n              const itemKey = arrayKeys[i];\r\n              if (!itemKey) continue; // Safety check\r\n\r\n              const itemValue = getGlobalStore\r\n                .getState()\r\n                .getShadowValue(itemKey);\r\n\r\n              // 3. If the callback returns true, we've found our item.\r\n              if (callbackfn(itemValue, i)) {\r\n                // Get the item's path relative to the stateKey (e.g., ['messages', '42'] -> ['42'])\r\n                const itemPath = itemKey.split('.').slice(1);\r\n\r\n                // 4. Rebuild a new, fully functional StateObject for just that item and return it.\r\n                return rebuildStateShape({\r\n                  path: itemPath,\r\n                  componentId: componentId,\r\n                  meta, // Pass along meta for potential further chaining\r\n                });\r\n              }\r\n            }\r\n\r\n            // 5. If the loop finishes without finding anything, return undefined.\r\n            return undefined;\r\n          };\r\n        }\r\n        if (prop === 'stateFilter') {\r\n          return (callbackfn: (value: any, index: number) => boolean) => {\r\n            const currentState = getGlobalStore\r\n              .getState()\r\n              .getShadowValue([stateKey, ...path].join('.'), meta?.validIds);\r\n            if (!Array.isArray(currentState)) return [];\r\n            const arrayKeys =\r\n              meta?.validIds ??\r\n              getGlobalStore.getState().getShadowMetadata(stateKey, path)\r\n                ?.arrayKeys;\r\n\r\n            if (!arrayKeys) {\r\n              throw new Error('No array keys found for filtering.');\r\n            }\r\n\r\n            const newValidIds: string[] = [];\r\n            const filteredArray = currentState.filter(\r\n              (val: any, index: number) => {\r\n                const didPass = callbackfn(val, index);\r\n                if (didPass) {\r\n                  newValidIds.push(arrayKeys[index]!);\r\n                  return true;\r\n                }\r\n                return false;\r\n              }\r\n            );\r\n\r\n            return rebuildStateShape({\r\n              path,\r\n              componentId: componentId!,\r\n              meta: {\r\n                validIds: newValidIds,\r\n                transforms: [\r\n                  ...(meta?.transforms || []),\r\n                  {\r\n                    type: 'filter',\r\n                    fn: callbackfn,\r\n                  },\r\n                ],\r\n              },\r\n            });\r\n          };\r\n        }\r\n        if (prop === 'stateSort') {\r\n          return (compareFn: (a: any, b: any) => number) => {\r\n            const currentState = getGlobalStore\r\n              .getState()\r\n              .getShadowValue([stateKey, ...path].join('.'), meta?.validIds);\r\n            if (!Array.isArray(currentState)) return []; // Guard clause\r\n            const arrayKeys =\r\n              meta?.validIds ??\r\n              getGlobalStore.getState().getShadowMetadata(stateKey, path)\r\n                ?.arrayKeys;\r\n            if (!arrayKeys) {\r\n              throw new Error('No array keys found for sorting');\r\n            }\r\n            const itemsWithIds = currentState.map((item, index) => ({\r\n              item,\r\n              key: arrayKeys[index],\r\n            }));\r\n\r\n            itemsWithIds\r\n              .sort((a, b) => compareFn(a.item, b.item))\r\n              .filter(Boolean);\r\n\r\n            return rebuildStateShape({\r\n              path,\r\n              componentId: componentId!,\r\n              meta: {\r\n                validIds: itemsWithIds.map((i) => i.key) as string[],\r\n                transforms: [\r\n                  ...(meta?.transforms || []),\r\n                  { type: 'sort', fn: compareFn },\r\n                ],\r\n              },\r\n            });\r\n          };\r\n        }\r\n        // In createProxyHandler, inside the get trap where you have other array methods:\r\n        if (prop === 'stream') {\r\n          return function <U = InferArrayElement<T>, R = U>(\r\n            options: StreamOptions<U, R> = {}\r\n          ): StreamHandle<U> {\r\n            const {\r\n              bufferSize = 100,\r\n              flushInterval = 100,\r\n              bufferStrategy = 'accumulate',\r\n              store,\r\n              onFlush,\r\n            } = options;\r\n\r\n            let buffer: U[] = [];\r\n            let isPaused = false;\r\n            let flushTimer: NodeJS.Timeout | null = null;\r\n\r\n            const addToBuffer = (item: U) => {\r\n              if (isPaused) return;\r\n\r\n              if (bufferStrategy === 'sliding' && buffer.length >= bufferSize) {\r\n                buffer.shift();\r\n              } else if (\r\n                bufferStrategy === 'dropping' &&\r\n                buffer.length >= bufferSize\r\n              ) {\r\n                return;\r\n              }\r\n\r\n              buffer.push(item);\r\n\r\n              if (buffer.length >= bufferSize) {\r\n                flushBuffer();\r\n              }\r\n            };\r\n\r\n            const flushBuffer = () => {\r\n              if (buffer.length === 0) return;\r\n\r\n              const toFlush = [...buffer];\r\n              buffer = [];\r\n\r\n              if (store) {\r\n                const result = store(toFlush);\r\n                if (result !== undefined) {\r\n                  const items = Array.isArray(result) ? result : [result];\r\n                  items.forEach((item) => {\r\n                    effectiveSetState(item as any, path, {\r\n                      updateType: 'insert',\r\n                    });\r\n                  });\r\n                }\r\n              } else {\r\n                toFlush.forEach((item) => {\r\n                  effectiveSetState(item as any, path, {\r\n                    updateType: 'insert',\r\n                  });\r\n                });\r\n              }\r\n\r\n              onFlush?.(toFlush);\r\n            };\r\n\r\n            if (flushInterval > 0) {\r\n              flushTimer = setInterval(flushBuffer, flushInterval);\r\n            }\r\n\r\n            const streamId = uuidv4();\r\n            const currentMeta =\r\n              getGlobalStore.getState().getShadowMetadata(stateKey, path) || {};\r\n            const streams = currentMeta.streams || new Map();\r\n            streams.set(streamId, { buffer, flushTimer });\r\n\r\n            getGlobalStore.getState().setShadowMetadata(stateKey, path, {\r\n              ...currentMeta,\r\n              streams,\r\n            });\r\n\r\n            return {\r\n              write: (data: U) => addToBuffer(data),\r\n              writeMany: (data: U[]) => data.forEach(addToBuffer),\r\n              flush: () => flushBuffer(),\r\n              pause: () => {\r\n                isPaused = true;\r\n              },\r\n              resume: () => {\r\n                isPaused = false;\r\n                if (buffer.length > 0) flushBuffer();\r\n              },\r\n              close: () => {\r\n                flushBuffer();\r\n                if (flushTimer) clearInterval(flushTimer);\r\n\r\n                const meta = getGlobalStore\r\n                  .getState()\r\n                  .getShadowMetadata(stateKey, path);\r\n                if (meta?.streams) {\r\n                  meta.streams.delete(streamId);\r\n                }\r\n              },\r\n            };\r\n          };\r\n        }\r\n\r\n        if (prop === 'stateList') {\r\n          return (\r\n            callbackfn: (\r\n              setter: any,\r\n              index: number,\r\n              arraySetter: any\r\n            ) => ReactNode\r\n          ) => {\r\n            const StateListWrapper = () => {\r\n              const componentIdsRef = useRef<Map<string, string>>(new Map());\r\n\r\n              const cacheKey =\r\n                meta?.transforms && meta.transforms.length > 0\r\n                  ? `${componentId}-${hashTransforms(meta.transforms)}`\r\n                  : `${componentId}-base`;\r\n\r\n              const [updateTrigger, forceUpdate] = useState({});\r\n\r\n              const { validIds, arrayValues } = useMemo(() => {\r\n                const cached = getGlobalStore\r\n                  .getState()\r\n                  .getShadowMetadata(stateKey, path)\r\n                  ?.transformCaches?.get(cacheKey);\r\n\r\n                let freshValidIds: string[];\r\n\r\n                if (cached && cached.validIds) {\r\n                  freshValidIds = cached.validIds;\r\n                } else {\r\n                  freshValidIds = applyTransforms(\r\n                    stateKey,\r\n                    path,\r\n                    meta?.transforms\r\n                  );\r\n\r\n                  getGlobalStore\r\n                    .getState()\r\n                    .setTransformCache(stateKey, path, cacheKey, {\r\n                      validIds: freshValidIds,\r\n                      computedAt: Date.now(),\r\n                      transforms: meta?.transforms || [],\r\n                    });\r\n                }\r\n\r\n                const freshValues = getGlobalStore\r\n                  .getState()\r\n                  .getShadowValue(stateKeyPathKey, freshValidIds);\r\n\r\n                return {\r\n                  validIds: freshValidIds,\r\n                  arrayValues: freshValues || [],\r\n                };\r\n              }, [cacheKey, updateTrigger]);\r\n\r\n              useEffect(() => {\r\n                const unsubscribe = getGlobalStore\r\n                  .getState()\r\n                  .subscribeToPath(stateKeyPathKey, (e) => {\r\n                    // A data change has occurred for the source array.\r\n\r\n                    if (e.type === 'GET_SELECTED') {\r\n                      return;\r\n                    }\r\n                    const shadowMeta = getGlobalStore\r\n                      .getState()\r\n                      .getShadowMetadata(stateKey, path);\r\n\r\n                    const caches = shadowMeta?.transformCaches;\r\n                    if (caches) {\r\n                      // Iterate over ALL keys in the cache map.\r\n                      for (const key of caches.keys()) {\r\n                        // If the key belongs to this component instance, delete it.\r\n                        // This purges caches for 'sort by name', 'sort by score', etc.\r\n                        if (key.startsWith(componentId)) {\r\n                          caches.delete(key);\r\n                        }\r\n                      }\r\n                    }\r\n\r\n                    if (\r\n                      e.type === 'INSERT' ||\r\n                      e.type === 'REMOVE' ||\r\n                      e.type === 'CLEAR_SELECTION'\r\n                    ) {\r\n                      forceUpdate({});\r\n                    }\r\n                  });\r\n\r\n                return () => {\r\n                  unsubscribe();\r\n                };\r\n\r\n                // This effect's logic now depends on the componentId to perform the purge.\r\n              }, [componentId, stateKeyPathKey]);\r\n\r\n              if (!Array.isArray(arrayValues)) {\r\n                return null;\r\n              }\r\n\r\n              const arraySetter = rebuildStateShape({\r\n                path,\r\n                componentId: componentId!,\r\n                meta: {\r\n                  ...meta,\r\n                  validIds: validIds,\r\n                },\r\n              });\r\n\r\n              return (\r\n                <>\r\n                  {arrayValues.map((item, localIndex) => {\r\n                    const itemKey = validIds[localIndex];\r\n\r\n                    if (!itemKey) {\r\n                      return null;\r\n                    }\r\n\r\n                    let itemComponentId = componentIdsRef.current.get(itemKey);\r\n                    if (!itemComponentId) {\r\n                      itemComponentId = uuidv4();\r\n                      componentIdsRef.current.set(itemKey, itemComponentId);\r\n                    }\r\n\r\n                    const itemPath = itemKey.split('.').slice(1);\r\n\r\n                    return createElement(MemoizedCogsItemWrapper, {\r\n                      key: itemKey,\r\n                      stateKey,\r\n                      itemComponentId,\r\n                      itemPath,\r\n                      localIndex,\r\n                      arraySetter,\r\n                      rebuildStateShape,\r\n                      renderFn: callbackfn,\r\n                    });\r\n                  })}\r\n                </>\r\n              );\r\n            };\r\n\r\n            return <StateListWrapper />;\r\n          };\r\n        }\r\n        if (prop === 'stateFlattenOn') {\r\n          return (fieldName: string) => {\r\n            const currentState = getGlobalStore\r\n              .getState()\r\n              .getShadowValue([stateKey, ...path].join('.'), meta?.validIds);\r\n            if (!Array.isArray(currentState)) return []; // Guard clause\r\n            const arrayToMap = currentState as any[];\r\n\r\n            stateVersion++;\r\n            const flattenedResults = arrayToMap.flatMap(\r\n              (val: any) => val[fieldName] ?? []\r\n            );\r\n            return rebuildStateShape({\r\n              path: [...path, '[*]', fieldName],\r\n              componentId: componentId!,\r\n              meta,\r\n            });\r\n          };\r\n        }\r\n        if (prop === 'index') {\r\n          return (index: number) => {\r\n            const arrayKeys = getGlobalStore\r\n              .getState()\r\n              .getShadowMetadata(stateKey, path)\r\n              ?.arrayKeys?.filter(\r\n                (key) =>\r\n                  !meta?.validIds ||\r\n                  (meta?.validIds && meta?.validIds?.includes(key))\r\n              );\r\n            const itemId = arrayKeys?.[index];\r\n            if (!itemId) return undefined;\r\n            const value = getGlobalStore\r\n              .getState()\r\n              .getShadowValue(itemId, meta?.validIds);\r\n            const state = rebuildStateShape({\r\n              path: itemId.split('.').slice(1) as string[],\r\n              componentId: componentId!,\r\n              meta,\r\n            });\r\n            return state;\r\n          };\r\n        }\r\n        if (prop === 'last') {\r\n          return () => {\r\n            const currentArray = getGlobalStore\r\n              .getState()\r\n              .getShadowValue(stateKey, path) as any[];\r\n            if (currentArray.length === 0) return undefined;\r\n            const lastIndex = currentArray.length - 1;\r\n            const lastValue = currentArray[lastIndex];\r\n            const newPath = [...path, lastIndex.toString()];\r\n            return rebuildStateShape({\r\n              path: newPath,\r\n              componentId: componentId!,\r\n              meta,\r\n            });\r\n          };\r\n        }\r\n        if (prop === 'insert') {\r\n          return (\r\n            payload: InsertParams<InferArrayElement<T>>,\r\n            index?: number\r\n          ) => {\r\n            effectiveSetState(payload as any, path, { updateType: 'insert' });\r\n            return rebuildStateShape({\r\n              path,\r\n              componentId: componentId!,\r\n              meta,\r\n            });\r\n          };\r\n        }\r\n        if (prop === 'uniqueInsert') {\r\n          return (\r\n            payload: UpdateArg<T>,\r\n            fields?: (keyof InferArrayElement<T>)[],\r\n            onMatch?: (existingItem: any) => any\r\n          ) => {\r\n            const currentArray = getGlobalStore\r\n              .getState()\r\n              .getShadowValue(stateKey, path) as any[];\r\n            const newValue = isFunction<T>(payload)\r\n              ? payload(currentArray as any)\r\n              : (payload as any);\r\n\r\n            let matchedItem: any = null;\r\n            const isUnique = !currentArray.some((item) => {\r\n              const isMatch = fields\r\n                ? fields.every((field) =>\r\n                    isDeepEqual(item[field], newValue[field])\r\n                  )\r\n                : isDeepEqual(item, newValue);\r\n              if (isMatch) matchedItem = item;\r\n              return isMatch;\r\n            });\r\n\r\n            if (isUnique) {\r\n              effectiveSetState(newValue, path, { updateType: 'insert' });\r\n            } else if (onMatch && matchedItem) {\r\n              const updatedItem = onMatch(matchedItem);\r\n              const updatedArray = currentArray.map((item) =>\r\n                isDeepEqual(item, matchedItem) ? updatedItem : item\r\n              );\r\n\r\n              effectiveSetState(updatedArray as any, path, {\r\n                updateType: 'update',\r\n              });\r\n            }\r\n          };\r\n        }\r\n\r\n        if (prop === 'cut') {\r\n          return (index?: number, options?: { waitForSync?: boolean }) => {\r\n            const currentState = getGlobalStore\r\n              .getState()\r\n              .getShadowValue([stateKey, ...path].join('.'), meta?.validIds);\r\n            const validKeys =\r\n              meta?.validIds ??\r\n              getGlobalStore.getState().getShadowMetadata(stateKey, path)\r\n                ?.arrayKeys;\r\n\r\n            if (!validKeys || validKeys.length === 0) return;\r\n\r\n            const indexToCut =\r\n              index == -1\r\n                ? validKeys.length - 1\r\n                : index !== undefined\r\n                  ? index\r\n                  : validKeys.length - 1;\r\n\r\n            const fullIdToCut = validKeys[indexToCut];\r\n            if (!fullIdToCut) return; // Index out of bounds\r\n\r\n            const pathForCut = fullIdToCut.split('.').slice(1);\r\n            effectiveSetState(currentState, pathForCut, {\r\n              updateType: 'cut',\r\n            });\r\n          };\r\n        }\r\n        if (prop === 'cutSelected') {\r\n          return () => {\r\n            const validKeys = applyTransforms(stateKey, path, meta?.transforms);\r\n            const currentState = getGlobalStore\r\n              .getState()\r\n              .getShadowValue([stateKey, ...path].join('.'), meta?.validIds);\r\n            if (!validKeys || validKeys.length === 0) return;\r\n\r\n            const indexKeyToCut = getGlobalStore\r\n              .getState()\r\n              .selectedIndicesMap.get(stateKeyPathKey);\r\n\r\n            let indexToCut = validKeys.findIndex(\r\n              (key) => key === indexKeyToCut\r\n            );\r\n\r\n            const pathForCut = validKeys[\r\n              indexToCut == -1 ? validKeys.length - 1 : indexToCut\r\n            ]\r\n              ?.split('.')\r\n              .slice(1);\r\n            getGlobalStore\r\n              .getState()\r\n              .clearSelectedIndex({ arrayKey: stateKeyPathKey });\r\n            const parentPath = pathForCut?.slice(0, -1)!;\r\n            notifySelectionComponents(stateKey, parentPath);\r\n            effectiveSetState(currentState, pathForCut!, {\r\n              updateType: 'cut',\r\n            });\r\n          };\r\n        }\r\n        if (prop === 'cutByValue') {\r\n          return (value: string | number | boolean) => {\r\n            // Step 1: Get the list of all unique keys for the current view.\r\n            const arrayMeta = getGlobalStore\r\n              .getState()\r\n              .getShadowMetadata(stateKey, path);\r\n            const relevantKeys = meta?.validIds ?? arrayMeta?.arrayKeys;\r\n\r\n            if (!relevantKeys) return;\r\n\r\n            let keyToCut: string | null = null;\r\n\r\n            // Step 2: Iterate through the KEYS, get the value for each, and find the match.\r\n            for (const key of relevantKeys) {\r\n              const itemValue = getGlobalStore.getState().getShadowValue(key);\r\n              if (itemValue === value) {\r\n                keyToCut = key;\r\n                break; // We found the key, no need to search further.\r\n              }\r\n            }\r\n\r\n            // Step 3: If we found a matching key, use it to perform the cut.\r\n            if (keyToCut) {\r\n              const itemPath = keyToCut.split('.').slice(1);\r\n              effectiveSetState(null as any, itemPath, { updateType: 'cut' });\r\n            }\r\n          };\r\n        }\r\n\r\n        if (prop === 'toggleByValue') {\r\n          return (value: string | number | boolean) => {\r\n            // Step 1: Get the list of all unique keys for the current view.\r\n            const arrayMeta = getGlobalStore\r\n              .getState()\r\n              .getShadowMetadata(stateKey, path);\r\n            const relevantKeys = meta?.validIds ?? arrayMeta?.arrayKeys;\r\n\r\n            if (!relevantKeys) return;\r\n\r\n            let keyToCut: string | null = null;\r\n\r\n            // Step 2: Iterate through the KEYS to find the one matching the value. This is the robust way.\r\n            for (const key of relevantKeys) {\r\n              const itemValue = getGlobalStore.getState().getShadowValue(key);\r\n              console.log('itemValue sdasdasdasd', itemValue);\r\n              if (itemValue === value) {\r\n                keyToCut = key;\r\n                break; // Found it!\r\n              }\r\n            }\r\n            console.log('itemValue keyToCut', keyToCut);\r\n            // Step 3: Act based on whether the key was found.\r\n            if (keyToCut) {\r\n              // Item exists, so we CUT it using its *actual* key.\r\n              const itemPath = keyToCut.split('.').slice(1);\r\n              console.log('itemValue keyToCut', keyToCut);\r\n              effectiveSetState(value as any, itemPath, {\r\n                updateType: 'cut',\r\n              });\r\n            } else {\r\n              // Item does not exist, so we INSERT it.\r\n              effectiveSetState(value as any, path, { updateType: 'insert' });\r\n            }\r\n          };\r\n        }\r\n        if (prop === 'findWith') {\r\n          return (searchKey: keyof InferArrayElement<T>, searchValue: any) => {\r\n            const arrayKeys = getGlobalStore\r\n              .getState()\r\n              .getShadowMetadata(stateKey, path)?.arrayKeys;\r\n\r\n            if (!arrayKeys) {\r\n              throw new Error('No array keys found for sorting');\r\n            }\r\n\r\n            let value = null;\r\n            let foundPath: string[] = [];\r\n\r\n            for (const fullPath of arrayKeys) {\r\n              let shadowValue = getGlobalStore\r\n                .getState()\r\n                .getShadowValue(fullPath, meta?.validIds);\r\n              if (shadowValue && shadowValue[searchKey] === searchValue) {\r\n                value = shadowValue;\r\n                foundPath = fullPath.split('.').slice(1);\r\n                break;\r\n              }\r\n            }\r\n\r\n            return rebuildStateShape({\r\n              path: foundPath,\r\n              componentId: componentId!,\r\n              meta,\r\n            });\r\n          };\r\n        }\r\n\r\n        if (prop === 'cutThis') {\r\n          let shadowValue = getGlobalStore\r\n            .getState()\r\n            .getShadowValue(path.join('.'));\r\n\r\n          return () => {\r\n            effectiveSetState(shadowValue, path, { updateType: 'cut' });\r\n          };\r\n        }\r\n\r\n        if (prop === 'get') {\r\n          return () => {\r\n            registerComponentDependency(stateKey, componentId, path);\r\n            return getGlobalStore\r\n              .getState()\r\n              .getShadowValue(stateKeyPathKey, meta?.validIds);\r\n          };\r\n        }\r\n        if (prop === 'getState') {\r\n          return () => {\r\n            return getGlobalStore\r\n              .getState()\r\n              .getShadowValue(stateKeyPathKey, meta?.validIds);\r\n          };\r\n        }\r\n\r\n        if (prop === '$derive') {\r\n          return (fn: any) =>\r\n            $cogsSignal({\r\n              _stateKey: stateKey,\r\n              _path: path,\r\n              _effect: fn.toString(),\r\n              _meta: meta,\r\n            });\r\n        }\r\n        // in CogsState.ts -> createProxyHandler -> handler -> get\r\n\r\n        if (prop === '$get') {\r\n          return () =>\r\n            $cogsSignal({ _stateKey: stateKey, _path: path, _meta: meta });\r\n        }\r\n        if (prop === 'lastSynced') {\r\n          const syncKey = `${stateKey}:${path.join('.')}`;\r\n          return getGlobalStore.getState().getSyncInfo(syncKey);\r\n        }\r\n        if (prop == 'getLocalStorage') {\r\n          return (key: string) =>\r\n            loadFromLocalStorage(sessionId + '-' + stateKey + '-' + key);\r\n        }\r\n\r\n        if (prop === 'isSelected') {\r\n          const parentPath = [stateKey, ...path].slice(0, -1);\r\n          notifySelectionComponents(stateKey, path, undefined);\r\n          if (\r\n            Array.isArray(\r\n              getGlobalStore\r\n                .getState()\r\n                .getShadowValue(parentPath.join('.'), meta?.validIds)\r\n            )\r\n          ) {\r\n            const itemId = path[path.length - 1];\r\n            const fullParentKey = parentPath.join('.');\r\n\r\n            const selectedItemKey = getGlobalStore\r\n              .getState()\r\n              .selectedIndicesMap.get(fullParentKey);\r\n\r\n            const fullItemKey = stateKey + '.' + path.join('.');\r\n\r\n            return selectedItemKey === fullItemKey;\r\n          }\r\n          return undefined;\r\n        }\r\n\r\n        // Then use it in both:\r\n        if (prop === 'setSelected') {\r\n          return (value: boolean) => {\r\n            const parentPath = path.slice(0, -1);\r\n            const fullParentKey = stateKey + '.' + parentPath.join('.');\r\n            const fullItemKey = stateKey + '.' + path.join('.');\r\n\r\n            notifySelectionComponents(stateKey, parentPath, undefined);\r\n\r\n            const selectedIndex = getGlobalStore\r\n              .getState()\r\n              .selectedIndicesMap.get(fullParentKey);\r\n\r\n            if (value) {\r\n              getGlobalStore\r\n                .getState()\r\n                .setSelectedIndex(fullParentKey, fullItemKey);\r\n            }\r\n          };\r\n        }\r\n\r\n        if (prop === 'toggleSelected') {\r\n          return () => {\r\n            const parentPath = path.slice(0, -1);\r\n            const fullParentKey = stateKey + '.' + parentPath.join('.');\r\n            const fullItemKey = stateKey + '.' + path.join('.');\r\n\r\n            const currentSelected = getGlobalStore\r\n              .getState()\r\n              .selectedIndicesMap.get(fullParentKey);\r\n\r\n            if (currentSelected === fullItemKey) {\r\n              getGlobalStore\r\n                .getState()\r\n                .clearSelectedIndex({ arrayKey: fullParentKey });\r\n            } else {\r\n              getGlobalStore\r\n                .getState()\r\n                .setSelectedIndex(fullParentKey, fullItemKey);\r\n            }\r\n          };\r\n        }\r\n        if (prop === '_componentId') {\r\n          return componentId;\r\n        }\r\n        if (path.length == 0) {\r\n          if (prop === 'addZodValidation') {\r\n            return (zodErrors: any[]) => {\r\n              const init = getGlobalStore\r\n                .getState()\r\n                .getInitialOptions(stateKey)?.validation;\r\n\r\n              // For each error, set shadow metadata\r\n              zodErrors.forEach((error) => {\r\n                const currentMeta =\r\n                  getGlobalStore\r\n                    .getState()\r\n                    .getShadowMetadata(stateKey, error.path) || {};\r\n\r\n                getGlobalStore\r\n                  .getState()\r\n                  .setShadowMetadata(stateKey, error.path, {\r\n                    ...currentMeta,\r\n                    validation: {\r\n                      status: 'VALIDATION_FAILED',\r\n                      message: error.message,\r\n                      validatedValue: undefined,\r\n                    },\r\n                  });\r\n                getGlobalStore.getState().notifyPathSubscribers(error.path, {\r\n                  type: 'VALIDATION_FAILED',\r\n                  message: error.message,\r\n                  validatedValue: undefined,\r\n                });\r\n              });\r\n            };\r\n          }\r\n          if (prop === 'clearZodValidation') {\r\n            return (path?: string[]) => {\r\n              // Clear specific paths\r\n              if (!path) {\r\n                throw new Error('clearZodValidation requires a path');\r\n                return;\r\n              }\r\n              const currentMeta =\r\n                getGlobalStore.getState().getShadowMetadata(stateKey, path) ||\r\n                {};\r\n\r\n              if (currentMeta.validation) {\r\n                getGlobalStore.getState().setShadowMetadata(stateKey, path, {\r\n                  ...currentMeta,\r\n                  validation: undefined,\r\n                });\r\n\r\n                getGlobalStore\r\n                  .getState()\r\n                  .notifyPathSubscribers([stateKey, ...path].join('.'), {\r\n                    type: 'VALIDATION_CLEARED',\r\n                  });\r\n              }\r\n            };\r\n          }\r\n          if (prop === 'applyJsonPatch') {\r\n            return (patches: Operation[]) => {\r\n              const store = getGlobalStore.getState();\r\n              const rootMeta = store.getShadowMetadata(stateKey, []);\r\n              if (!rootMeta?.components) return;\r\n\r\n              const convertPath = (jsonPath: string): string[] => {\r\n                if (!jsonPath || jsonPath === '/') return [];\r\n                return jsonPath\r\n                  .split('/')\r\n                  .slice(1)\r\n                  .map((p) => p.replace(/~1/g, '/').replace(/~0/g, '~'));\r\n              };\r\n\r\n              const notifiedComponents = new Set<string>();\r\n\r\n              for (const patch of patches) {\r\n                const relativePath = convertPath(patch.path);\r\n\r\n                switch (patch.op) {\r\n                  case 'add':\r\n                  case 'replace': {\r\n                    const { value } = patch as {\r\n                      op: 'add' | 'replace';\r\n                      path: string;\r\n                      value: any;\r\n                    };\r\n                    store.updateShadowAtPath(stateKey, relativePath, value);\r\n                    store.markAsDirty(stateKey, relativePath, { bubble: true });\r\n\r\n                    // Bubble up - notify components at this path and all parent paths\r\n                    let currentPath = [...relativePath];\r\n                    while (true) {\r\n                      const pathMeta = store.getShadowMetadata(\r\n                        stateKey,\r\n                        currentPath\r\n                      );\r\n\r\n                      if (pathMeta?.pathComponents) {\r\n                        pathMeta.pathComponents.forEach((componentId) => {\r\n                          if (!notifiedComponents.has(componentId)) {\r\n                            const component =\r\n                              rootMeta.components?.get(componentId);\r\n                            if (component) {\r\n                              component.forceUpdate();\r\n                              notifiedComponents.add(componentId);\r\n                            }\r\n                          }\r\n                        });\r\n                      }\r\n\r\n                      if (currentPath.length === 0) break;\r\n                      currentPath.pop(); // Go up one level\r\n                    }\r\n                    break;\r\n                  }\r\n                  case 'remove': {\r\n                    const parentPath = relativePath.slice(0, -1);\r\n                    store.removeShadowArrayElement(stateKey, relativePath);\r\n                    store.markAsDirty(stateKey, parentPath, { bubble: true });\r\n\r\n                    // Bubble up from parent path\r\n                    let currentPath = [...parentPath];\r\n                    while (true) {\r\n                      const pathMeta = store.getShadowMetadata(\r\n                        stateKey,\r\n                        currentPath\r\n                      );\r\n                      if (pathMeta?.pathComponents) {\r\n                        pathMeta.pathComponents.forEach((componentId) => {\r\n                          if (!notifiedComponents.has(componentId)) {\r\n                            const component =\r\n                              rootMeta.components?.get(componentId);\r\n                            if (component) {\r\n                              component.forceUpdate();\r\n                              notifiedComponents.add(componentId);\r\n                            }\r\n                          }\r\n                        });\r\n                      }\r\n\r\n                      if (currentPath.length === 0) break;\r\n                      currentPath.pop();\r\n                    }\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n            };\r\n          }\r\n\r\n          if (prop === 'getComponents')\r\n            return () =>\r\n              getGlobalStore.getState().getShadowMetadata(stateKey, [])\r\n                ?.components;\r\n          if (prop === 'getAllFormRefs')\r\n            return () =>\r\n              formRefStore.getState().getFormRefsByStateKey(stateKey);\r\n        }\r\n        if (prop === 'getFormRef') {\r\n          return () =>\r\n            formRefStore.getState().getFormRef(stateKey + '.' + path.join('.'));\r\n        }\r\n        if (prop === 'validationWrapper') {\r\n          return ({\r\n            children,\r\n            hideMessage,\r\n          }: {\r\n            children: React.ReactNode;\r\n            hideMessage?: boolean;\r\n          }) => (\r\n            <ValidationWrapper\r\n              formOpts={\r\n                hideMessage ? { validation: { message: '' } } : undefined\r\n              }\r\n              path={path}\r\n              stateKey={stateKey}\r\n            >\r\n              {children}\r\n            </ValidationWrapper>\r\n          );\r\n        }\r\n        if (prop === '_stateKey') return stateKey;\r\n        if (prop === '_path') return path;\r\n        if (prop === 'update') {\r\n          return (payload: UpdateArg<T>) => {\r\n            // Step 1: This is the same. It performs the data update.\r\n            effectiveSetState(payload as any, path, { updateType: 'update' });\r\n\r\n            return {\r\n              /**\r\n               * Marks this specific item, which was just updated, as 'synced' (not dirty).\r\n               */\r\n              synced: () => {\r\n                // This function \"remembers\" the path of the item that was just updated.\r\n                const shadowMeta = getGlobalStore\r\n                  .getState()\r\n                  .getShadowMetadata(stateKey, path);\r\n\r\n                // It updates ONLY the metadata for that specific item.\r\n                getGlobalStore.getState().setShadowMetadata(stateKey, path, {\r\n                  ...shadowMeta,\r\n                  isDirty: false, // EXPLICITLY set to false, not just undefined\r\n                  stateSource: 'server', // Mark as coming from server\r\n                  lastServerSync: Date.now(), // Add timestamp\r\n                });\r\n\r\n                // Force a re-render for components watching this path\r\n                const fullPath = [stateKey, ...path].join('.');\r\n                getGlobalStore.getState().notifyPathSubscribers(fullPath, {\r\n                  type: 'SYNC_STATUS_CHANGE',\r\n                  isDirty: false,\r\n                });\r\n              },\r\n            };\r\n          };\r\n        }\r\n\r\n        if (prop === 'toggle') {\r\n          const currentValueAtPath = getGlobalStore\r\n            .getState()\r\n            .getShadowValue([stateKey, ...path].join('.'));\r\n          const currentState = getGlobalStore\r\n            .getState()\r\n            .getShadowValue([stateKey, ...path].join('.'), meta?.validIds);\r\n          console.log('currentValueAtPath', currentValueAtPath);\r\n          if (typeof currentState != 'boolean') {\r\n            throw new Error('toggle() can only be used on boolean values');\r\n          }\r\n          return () => {\r\n            effectiveSetState(!currentValueAtPath as any, path, {\r\n              updateType: 'update',\r\n            });\r\n          };\r\n        }\r\n        if (prop === 'formElement') {\r\n          return (child: FormControl<T>, formOpts?: FormOptsType) => {\r\n            return (\r\n              <FormElementWrapper\r\n                stateKey={stateKey}\r\n                path={path}\r\n                rebuildStateShape={rebuildStateShape}\r\n                setState={effectiveSetState}\r\n                formOpts={formOpts}\r\n                renderFn={child as any}\r\n              />\r\n            );\r\n          };\r\n        }\r\n        const nextPath = [...path, prop];\r\n        const nextValue = getGlobalStore\r\n          .getState()\r\n          .getShadowValue(stateKey, nextPath);\r\n        return rebuildStateShape({\r\n          path: nextPath,\r\n          componentId: componentId!,\r\n          meta,\r\n        });\r\n      },\r\n    };\r\n\r\n    const proxyInstance = new Proxy(baseFunction, handler);\r\n    proxyCache.set(cacheKey, proxyInstance);\r\n    return proxyInstance;\r\n  }\r\n\r\n  const baseObj = {\r\n    revertToInitialState: (obj?: { validationKey?: string }) => {\r\n      const init = getGlobalStore\r\n        .getState()\r\n        .getInitialOptions(stateKey)?.validation;\r\n\r\n      const shadowMeta = getGlobalStore\r\n        .getState()\r\n        .getShadowMetadata(stateKey, []);\r\n      let revertState;\r\n\r\n      if (shadowMeta?.stateSource === 'server' && shadowMeta.baseServerState) {\r\n        // Revert to last known server state\r\n        revertState = shadowMeta.baseServerState;\r\n      } else {\r\n        // Revert to initial/default state\r\n        revertState = getGlobalStore.getState().initialStateGlobal[stateKey];\r\n      }\r\n      const initialState =\r\n        getGlobalStore.getState().initialStateGlobal[stateKey];\r\n\r\n      getGlobalStore.getState().clearSelectedIndexesForState(stateKey);\r\n\r\n      stateVersion++;\r\n      getGlobalStore.getState().initializeShadowState(stateKey, initialState);\r\n      rebuildStateShape({\r\n        path: [],\r\n        componentId: componentId!,\r\n      });\r\n      const initalOptionsGet = getInitialOptions(stateKey as string);\r\n      const localKey = isFunction(initalOptionsGet?.localStorage?.key)\r\n        ? initalOptionsGet?.localStorage?.key(initialState)\r\n        : initalOptionsGet?.localStorage?.key;\r\n\r\n      const storageKey = `${sessionId}-${stateKey}-${localKey}`;\r\n\r\n      if (storageKey) {\r\n        localStorage.removeItem(storageKey);\r\n      }\r\n\r\n      const stateEntry = getGlobalStore\r\n        .getState()\r\n        .getShadowMetadata(stateKey, []);\r\n      if (stateEntry) {\r\n        stateEntry?.components?.forEach((component) => {\r\n          component.forceUpdate();\r\n        });\r\n      }\r\n\r\n      return initialState;\r\n    },\r\n    updateInitialState: (newState: T) => {\r\n      stateVersion++;\r\n\r\n      const newUpdaterState = createProxyHandler(\r\n        stateKey,\r\n        effectiveSetState,\r\n        componentId,\r\n        sessionId\r\n      );\r\n      const initialState =\r\n        getGlobalStore.getState().initialStateGlobal[stateKey];\r\n      const initalOptionsGet = getInitialOptions(stateKey as string);\r\n      const localKey = isFunction(initalOptionsGet?.localStorage?.key)\r\n        ? initalOptionsGet?.localStorage?.key(initialState)\r\n        : initalOptionsGet?.localStorage?.key;\r\n\r\n      const storageKey = `${sessionId}-${stateKey}-${localKey}`;\r\n\r\n      if (localStorage.getItem(storageKey)) {\r\n        localStorage.removeItem(storageKey);\r\n      }\r\n      startTransition(() => {\r\n        updateInitialStateGlobal(stateKey, newState);\r\n        getGlobalStore.getState().initializeShadowState(stateKey, newState);\r\n\r\n        const stateEntry = getGlobalStore\r\n          .getState()\r\n          .getShadowMetadata(stateKey, []);\r\n\r\n        if (stateEntry) {\r\n          stateEntry?.components?.forEach((component) => {\r\n            component.forceUpdate();\r\n          });\r\n        }\r\n      });\r\n\r\n      return {\r\n        fetchId: (field: keyof T) => (newUpdaterState.get() as any)[field],\r\n      };\r\n    },\r\n  };\r\n  const returnShape = rebuildStateShape({\r\n    componentId,\r\n    path: [],\r\n  });\r\n\r\n  return returnShape;\r\n}\r\n\r\nexport function $cogsSignal(proxy: {\r\n  _path: string[];\r\n  _stateKey: string;\r\n  _effect?: string;\r\n\r\n  _meta?: MetaData;\r\n}) {\r\n  return createElement(SignalRenderer, { proxy });\r\n}\r\n\r\nfunction SignalMapRenderer({\r\n  proxy,\r\n  rebuildStateShape,\r\n}: {\r\n  proxy: {\r\n    _stateKey: string;\r\n    _path: string[];\r\n    _meta?: MetaData;\r\n    _mapFn: (\r\n      setter: any,\r\n      index: number,\r\n\r\n      arraySetter: any\r\n    ) => ReactNode;\r\n  };\r\n  rebuildStateShape: (stuff: {\r\n    currentState: any;\r\n    path: string[];\r\n    componentId: string;\r\n    meta?: MetaData;\r\n  }) => any;\r\n}): JSX.Element | null {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const instanceIdRef = useRef<string>(`map-${crypto.randomUUID()}`);\r\n  const isSetupRef = useRef(false);\r\n  const rootsMapRef = useRef<Map<string, any>>(new Map());\r\n\r\n  // Setup effect - store the map function in shadow metadata\r\n  useEffect(() => {\r\n    const container = containerRef.current;\r\n    if (!container || isSetupRef.current) return;\r\n\r\n    const timeoutId = setTimeout(() => {\r\n      // Store map wrapper in metadata\r\n      const currentMeta =\r\n        getGlobalStore\r\n          .getState()\r\n          .getShadowMetadata(proxy._stateKey, proxy._path) || {};\r\n\r\n      const mapWrappers = currentMeta.mapWrappers || [];\r\n      mapWrappers.push({\r\n        instanceId: instanceIdRef.current,\r\n        mapFn: proxy._mapFn,\r\n        containerRef: container,\r\n        rebuildStateShape: rebuildStateShape,\r\n        path: proxy._path,\r\n        componentId: instanceIdRef.current,\r\n        meta: proxy._meta,\r\n      });\r\n\r\n      getGlobalStore\r\n        .getState()\r\n        .setShadowMetadata(proxy._stateKey, proxy._path, {\r\n          ...currentMeta,\r\n          mapWrappers,\r\n        });\r\n\r\n      isSetupRef.current = true;\r\n\r\n      // Initial render\r\n      renderInitialItems();\r\n    }, 0);\r\n\r\n    // Cleanup\r\n    return () => {\r\n      clearTimeout(timeoutId);\r\n      if (instanceIdRef.current) {\r\n        const currentMeta =\r\n          getGlobalStore\r\n            .getState()\r\n            .getShadowMetadata(proxy._stateKey, proxy._path) || {};\r\n        if (currentMeta.mapWrappers) {\r\n          currentMeta.mapWrappers = currentMeta.mapWrappers.filter(\r\n            (w) => w.instanceId !== instanceIdRef.current\r\n          );\r\n          getGlobalStore\r\n            .getState()\r\n            .setShadowMetadata(proxy._stateKey, proxy._path, currentMeta);\r\n        }\r\n      }\r\n      rootsMapRef.current.forEach((root) => root.unmount());\r\n    };\r\n  }, []);\r\n\r\n  const renderInitialItems = () => {\r\n    const container = containerRef.current;\r\n    if (!container) return;\r\n\r\n    const value = getGlobalStore\r\n      .getState()\r\n      .getShadowValue(\r\n        [proxy._stateKey, ...proxy._path].join('.'),\r\n        proxy._meta?.validIds\r\n      ) as any[];\r\n\r\n    if (!Array.isArray(value)) return;\r\n\r\n    // --- BUG FIX IS HERE ---\r\n    // Prioritize the filtered IDs from the meta object, just like the regular `stateMap`.\r\n    // This ensures the keys match the filtered data.\r\n    const arrayKeys =\r\n      proxy._meta?.validIds ??\r\n      getGlobalStore.getState().getShadowMetadata(proxy._stateKey, proxy._path)\r\n        ?.arrayKeys ??\r\n      [];\r\n    // --- END OF FIX ---\r\n\r\n    const arraySetter = rebuildStateShape({\r\n      currentState: value,\r\n      path: proxy._path,\r\n      componentId: instanceIdRef.current,\r\n      meta: proxy._meta,\r\n    });\r\n\r\n    value.forEach((item, index) => {\r\n      const itemKey = arrayKeys[index]!; // Now this will be the correct key for the filtered item\r\n      if (!itemKey) return; // Safeguard if there's a mismatch\r\n\r\n      const itemComponentId = uuidv4();\r\n      const itemElement = document.createElement('div');\r\n\r\n      itemElement.setAttribute('data-item-path', itemKey);\r\n      container.appendChild(itemElement);\r\n\r\n      const root = createRoot(itemElement);\r\n      rootsMapRef.current.set(itemKey, root);\r\n\r\n      const itemPath = itemKey.split('.').slice(1) as string[];\r\n\r\n      // Render CogsItemWrapper instead of direct render\r\n      root.render(\r\n        createElement(MemoizedCogsItemWrapper, {\r\n          stateKey: proxy._stateKey,\r\n          itemComponentId: itemComponentId,\r\n          itemPath: itemPath,\r\n          localIndex: index,\r\n          arraySetter: arraySetter,\r\n          rebuildStateShape: rebuildStateShape,\r\n          renderFn: proxy._mapFn,\r\n        })\r\n      );\r\n    });\r\n  };\r\n\r\n  return <div ref={containerRef} data-map-container={instanceIdRef.current} />;\r\n}\r\n\r\nfunction SignalRenderer({\r\n  proxy,\r\n}: {\r\n  proxy: {\r\n    _path: string[];\r\n    _stateKey: string;\r\n    _effect?: string;\r\n    _meta?: MetaData;\r\n  };\r\n}) {\r\n  const elementRef = useRef<HTMLSpanElement>(null);\r\n  const instanceIdRef = useRef<string | null>(null);\r\n  const isSetupRef = useRef(false);\r\n  const signalId = `${proxy._stateKey}-${proxy._path.join('.')}`;\r\n  const value = getGlobalStore\r\n    .getState()\r\n    .getShadowValue(\r\n      [proxy._stateKey, ...proxy._path].join('.'),\r\n      proxy._meta?.validIds\r\n    );\r\n\r\n  // Setup effect - runs only once\r\n  useEffect(() => {\r\n    const element = elementRef.current;\r\n    if (!element || isSetupRef.current) return;\r\n\r\n    const timeoutId = setTimeout(() => {\r\n      if (!element.parentElement) {\r\n        console.warn('Parent element not found for signal', signalId);\r\n        return;\r\n      }\r\n\r\n      const parentElement = element.parentElement;\r\n      const childNodes = Array.from(parentElement.childNodes);\r\n      const position = childNodes.indexOf(element);\r\n\r\n      let parentId = parentElement.getAttribute('data-parent-id');\r\n      if (!parentId) {\r\n        parentId = `parent-${crypto.randomUUID()}`;\r\n        parentElement.setAttribute('data-parent-id', parentId);\r\n      }\r\n\r\n      instanceIdRef.current = `instance-${crypto.randomUUID()}`;\r\n\r\n      // Store signal info in shadow metadata\r\n      const currentMeta =\r\n        getGlobalStore\r\n          .getState()\r\n          .getShadowMetadata(proxy._stateKey, proxy._path) || {};\r\n      const signals = currentMeta.signals || [];\r\n      signals.push({\r\n        instanceId: instanceIdRef.current,\r\n        parentId,\r\n        position,\r\n        effect: proxy._effect,\r\n      });\r\n\r\n      getGlobalStore\r\n        .getState()\r\n        .setShadowMetadata(proxy._stateKey, proxy._path, {\r\n          ...currentMeta,\r\n          signals,\r\n        });\r\n\r\n      let displayValue = value;\r\n      if (proxy._effect) {\r\n        try {\r\n          displayValue = new Function(\r\n            'state',\r\n            `return (${proxy._effect})(state)`\r\n          )(value);\r\n        } catch (err) {\r\n          console.error('Error evaluating effect function:', err);\r\n        }\r\n      }\r\n\r\n      if (displayValue !== null && typeof displayValue === 'object') {\r\n        displayValue = JSON.stringify(displayValue);\r\n      }\r\n      const textNode = document.createTextNode(String(displayValue ?? ''));\r\n      element.replaceWith(textNode);\r\n      isSetupRef.current = true;\r\n    }, 0);\r\n\r\n    return () => {\r\n      clearTimeout(timeoutId);\r\n      if (instanceIdRef.current) {\r\n        const currentMeta =\r\n          getGlobalStore\r\n            .getState()\r\n            .getShadowMetadata(proxy._stateKey, proxy._path) || {};\r\n        if (currentMeta.signals) {\r\n          currentMeta.signals = currentMeta.signals.filter(\r\n            (s) => s.instanceId !== instanceIdRef.current\r\n          );\r\n          getGlobalStore\r\n            .getState()\r\n            .setShadowMetadata(proxy._stateKey, proxy._path, currentMeta);\r\n        }\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return createElement('span', {\r\n    ref: elementRef,\r\n    style: { display: 'contents' },\r\n    'data-signal-id': signalId,\r\n  });\r\n}\r\n\r\nconst MemoizedCogsItemWrapper = memo(\r\n  ListItemWrapper,\r\n  (prevProps, nextProps) => {\r\n    // Re-render if any of these change:\r\n    return (\r\n      prevProps.itemPath.join('.') === nextProps.itemPath.join('.') &&\r\n      prevProps.stateKey === nextProps.stateKey &&\r\n      prevProps.itemComponentId === nextProps.itemComponentId &&\r\n      prevProps.localIndex === nextProps.localIndex\r\n    );\r\n  }\r\n);\r\n\r\nconst useImageLoaded = (ref: RefObject<HTMLElement>): boolean => {\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  useLayoutEffect(() => {\r\n    if (!ref.current) {\r\n      setLoaded(true);\r\n      return;\r\n    }\r\n\r\n    const images = Array.from(ref.current.querySelectorAll('img'));\r\n\r\n    // If there are no images, we are \"loaded\" immediately.\r\n    if (images.length === 0) {\r\n      setLoaded(true);\r\n      return;\r\n    }\r\n\r\n    let loadedCount = 0;\r\n    const handleImageLoad = () => {\r\n      loadedCount++;\r\n      if (loadedCount === images.length) {\r\n        setLoaded(true);\r\n      }\r\n    };\r\n\r\n    images.forEach((image) => {\r\n      if (image.complete) {\r\n        handleImageLoad();\r\n      } else {\r\n        image.addEventListener('load', handleImageLoad);\r\n        image.addEventListener('error', handleImageLoad);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      images.forEach((image) => {\r\n        image.removeEventListener('load', handleImageLoad);\r\n        image.removeEventListener('error', handleImageLoad);\r\n      });\r\n    };\r\n  }, [ref.current]);\r\n\r\n  return loaded;\r\n};\r\n\r\nfunction ListItemWrapper({\r\n  stateKey,\r\n  itemComponentId,\r\n  itemPath,\r\n  localIndex,\r\n  arraySetter,\r\n  rebuildStateShape,\r\n  renderFn,\r\n}: {\r\n  stateKey: string;\r\n  itemComponentId: string;\r\n  itemPath: string[];\r\n  localIndex: number;\r\n  arraySetter: any;\r\n\r\n  rebuildStateShape: (options: {\r\n    currentState: any;\r\n    path: string[];\r\n    componentId: string;\r\n    meta?: any;\r\n  }) => any;\r\n  renderFn: (\r\n    setter: any,\r\n    index: number,\r\n\r\n    arraySetter: any\r\n  ) => React.ReactNode;\r\n}) {\r\n  const [, forceUpdate] = useState({});\r\n  const { ref: inViewRef, inView } = useInView();\r\n  const elementRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  const imagesLoaded = useImageLoaded(elementRef);\r\n  const hasReportedInitialHeight = useRef(false);\r\n  const fullKey = [stateKey, ...itemPath].join('.');\r\n  useRegisterComponent(stateKey, itemComponentId, forceUpdate);\r\n\r\n  const setRefs = useCallback(\r\n    (element: HTMLDivElement | null) => {\r\n      elementRef.current = element;\r\n      inViewRef(element); // This is the ref from useInView\r\n    },\r\n    [inViewRef]\r\n  );\r\n\r\n  useEffect(() => {\r\n    getGlobalStore.getState().subscribeToPath(fullKey, (e) => {\r\n      forceUpdate({});\r\n    });\r\n  }, []);\r\n  useEffect(() => {\r\n    if (!inView || !imagesLoaded || hasReportedInitialHeight.current) {\r\n      return;\r\n    }\r\n\r\n    const element = elementRef.current;\r\n    if (element && element.offsetHeight > 0) {\r\n      hasReportedInitialHeight.current = true;\r\n      const newHeight = element.offsetHeight;\r\n\r\n      getGlobalStore.getState().setShadowMetadata(stateKey, itemPath, {\r\n        virtualizer: {\r\n          itemHeight: newHeight,\r\n          domRef: element,\r\n        },\r\n      });\r\n\r\n      const arrayPath = itemPath.slice(0, -1);\r\n      const arrayPathKey = [stateKey, ...arrayPath].join('.');\r\n      getGlobalStore.getState().notifyPathSubscribers(arrayPathKey, {\r\n        type: 'ITEMHEIGHT',\r\n        itemKey: itemPath.join('.'),\r\n\r\n        ref: elementRef.current,\r\n      });\r\n    }\r\n  }, [inView, imagesLoaded, stateKey, itemPath]);\r\n\r\n  const fullItemPath = [stateKey, ...itemPath].join('.');\r\n  const itemValue = getGlobalStore.getState().getShadowValue(fullItemPath);\r\n\r\n  if (itemValue === undefined) {\r\n    return null;\r\n  }\r\n\r\n  const itemSetter = rebuildStateShape({\r\n    currentState: itemValue,\r\n    path: itemPath,\r\n    componentId: itemComponentId,\r\n  });\r\n  const children = renderFn(itemSetter, localIndex, arraySetter);\r\n\r\n  return <div ref={setRefs}>{children}</div>;\r\n}\r\n\r\nfunction FormElementWrapper({\r\n  stateKey,\r\n  path,\r\n  rebuildStateShape,\r\n  renderFn,\r\n  formOpts,\r\n  setState,\r\n}: {\r\n  stateKey: string;\r\n  path: string[];\r\n  rebuildStateShape: (options: {\r\n    currentState: any;\r\n    path: string[];\r\n    componentId: string;\r\n    meta?: any;\r\n  }) => any;\r\n  renderFn: (params: FormElementParams<any>) => React.ReactNode;\r\n  formOpts?: FormOptsType;\r\n  setState: any;\r\n}) {\r\n  const [componentId] = useState(() => uuidv4());\r\n  const [, forceUpdate] = useState({});\r\n\r\n  const stateKeyPathKey = [stateKey, ...path].join('.');\r\n  useRegisterComponent(stateKey, componentId, forceUpdate);\r\n  const globalStateValue = getGlobalStore\r\n    .getState()\r\n    .getShadowValue(stateKeyPathKey);\r\n  const [localValue, setLocalValue] = useState<any>(globalStateValue);\r\n  const isCurrentlyDebouncing = useRef(false);\r\n  const debounceTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !isCurrentlyDebouncing.current &&\r\n      !isDeepEqual(globalStateValue, localValue)\r\n    ) {\r\n      setLocalValue(globalStateValue);\r\n    }\r\n  }, [globalStateValue]);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = getGlobalStore\r\n      .getState()\r\n      .subscribeToPath(stateKeyPathKey, (newValue) => {\r\n        if (!isCurrentlyDebouncing.current && localValue !== newValue) {\r\n          forceUpdate({});\r\n        }\r\n      });\r\n    return () => {\r\n      unsubscribe();\r\n      if (debounceTimeoutRef.current) {\r\n        clearTimeout(debounceTimeoutRef.current);\r\n        isCurrentlyDebouncing.current = false;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const debouncedUpdate = useCallback(\r\n    (newValue: any) => {\r\n      const currentType = typeof globalStateValue;\r\n      if (currentType === 'number' && typeof newValue === 'string') {\r\n        newValue = newValue === '' ? 0 : Number(newValue);\r\n      }\r\n      setLocalValue(newValue);\r\n      isCurrentlyDebouncing.current = true;\r\n\r\n      if (debounceTimeoutRef.current) {\r\n        clearTimeout(debounceTimeoutRef.current);\r\n      }\r\n\r\n      const debounceTime = formOpts?.debounceTime ?? 200;\r\n\r\n      debounceTimeoutRef.current = setTimeout(() => {\r\n        isCurrentlyDebouncing.current = false;\r\n\r\n        // Update state\r\n        setState(newValue, path, { updateType: 'update' });\r\n\r\n        // Perform LIVE validation (gentle)\r\n        const { getInitialOptions, setShadowMetadata, getShadowMetadata } =\r\n          getGlobalStore.getState();\r\n        const validationOptions = getInitialOptions(stateKey)?.validation;\r\n        const zodSchema =\r\n          validationOptions?.zodSchemaV4 || validationOptions?.zodSchemaV3;\r\n\r\n        if (zodSchema) {\r\n          const fullState = getGlobalStore.getState().getShadowValue(stateKey);\r\n          const result = zodSchema.safeParse(fullState);\r\n\r\n          const currentMeta = getShadowMetadata(stateKey, path) || {};\r\n\r\n          if (!result.success) {\r\n            const errors =\r\n              'issues' in result.error\r\n                ? result.error.issues\r\n                : (result.error as any).errors;\r\n            const pathErrors = errors.filter(\r\n              (error: any) =>\r\n                JSON.stringify(error.path) === JSON.stringify(path)\r\n            );\r\n\r\n            if (pathErrors.length > 0) {\r\n              setShadowMetadata(stateKey, path, {\r\n                ...currentMeta,\r\n                validation: {\r\n                  status: 'INVALID_LIVE',\r\n                  message: pathErrors[0]?.message,\r\n                  validatedValue: newValue,\r\n                },\r\n              });\r\n            } else {\r\n              // This field has no errors - clear validation\r\n              setShadowMetadata(stateKey, path, {\r\n                ...currentMeta,\r\n                validation: {\r\n                  status: 'VALID_LIVE',\r\n                  validatedValue: newValue,\r\n                  message: undefined,\r\n                },\r\n              });\r\n            }\r\n          } else {\r\n            // Validation passed - clear any existing errors\r\n            setShadowMetadata(stateKey, path, {\r\n              ...currentMeta,\r\n              validation: {\r\n                status: 'VALID_LIVE',\r\n                validatedValue: newValue,\r\n                message: undefined,\r\n              },\r\n            });\r\n          }\r\n        }\r\n      }, debounceTime);\r\n      forceUpdate({});\r\n    },\r\n    [setState, path, formOpts?.debounceTime, stateKey]\r\n  );\r\n\r\n  // --- NEW onBlur HANDLER ---\r\n  // This replaces the old commented-out method with a modern approach.\r\n  const handleBlur = useCallback(async () => {\r\n    console.log('handleBlur triggered');\r\n\r\n    // Commit any pending changes\r\n    if (debounceTimeoutRef.current) {\r\n      clearTimeout(debounceTimeoutRef.current);\r\n      debounceTimeoutRef.current = null;\r\n      isCurrentlyDebouncing.current = false;\r\n      setState(localValue, path, { updateType: 'update' });\r\n    }\r\n\r\n    const { getInitialOptions } = getGlobalStore.getState();\r\n    const validationOptions = getInitialOptions(stateKey)?.validation;\r\n    const zodSchema =\r\n      validationOptions?.zodSchemaV4 || validationOptions?.zodSchemaV3;\r\n\r\n    if (!zodSchema) return;\r\n\r\n    // Get the full path including stateKey\r\n\r\n    // Update validation state to \"validating\"\r\n    const currentMeta = getGlobalStore\r\n      .getState()\r\n      .getShadowMetadata(stateKey, path);\r\n    getGlobalStore.getState().setShadowMetadata(stateKey, path, {\r\n      ...currentMeta,\r\n      validation: {\r\n        status: 'DIRTY',\r\n        validatedValue: localValue,\r\n      },\r\n    });\r\n\r\n    // Validate full state\r\n    const fullState = getGlobalStore.getState().getShadowValue(stateKey);\r\n    const result = zodSchema.safeParse(fullState);\r\n    console.log('result ', result);\r\n    if (!result.success) {\r\n      const errors =\r\n        'issues' in result.error\r\n          ? result.error.issues\r\n          : (result.error as any).errors;\r\n\r\n      console.log('All validation errors:', errors);\r\n      console.log('Current blur path:', path);\r\n\r\n      // Find errors for this specific path\r\n      const pathErrors = errors.filter((error: any) => {\r\n        console.log('Processing error:', error);\r\n\r\n        // For array paths, we need to translate indices to ULIDs\r\n        if (path.some((p) => p.startsWith('id:'))) {\r\n          console.log('Detected array path with ULID');\r\n\r\n          // This is an array item path like [\"id:xyz\", \"name\"]\r\n          const parentPath = path[0]!.startsWith('id:')\r\n            ? []\r\n            : path.slice(0, -1);\r\n\r\n          console.log('Parent path:', parentPath);\r\n\r\n          const arrayMeta = getGlobalStore\r\n            .getState()\r\n            .getShadowMetadata(stateKey, parentPath);\r\n\r\n          console.log('Array metadata:', arrayMeta);\r\n\r\n          if (arrayMeta?.arrayKeys) {\r\n            const itemKey = [stateKey, ...path.slice(0, -1)].join('.');\r\n            const itemIndex = arrayMeta.arrayKeys.indexOf(itemKey);\r\n\r\n            console.log('Item key:', itemKey, 'Index:', itemIndex);\r\n\r\n            // Compare with Zod path\r\n            const zodPath = [...parentPath, itemIndex, ...path.slice(-1)];\r\n            const match =\r\n              JSON.stringify(error.path) === JSON.stringify(zodPath);\r\n\r\n            console.log('Zod path comparison:', {\r\n              zodPath,\r\n              errorPath: error.path,\r\n              match,\r\n            });\r\n            return match;\r\n          }\r\n        }\r\n\r\n        const directMatch = JSON.stringify(error.path) === JSON.stringify(path);\r\n        console.log('Direct path comparison:', {\r\n          errorPath: error.path,\r\n          currentPath: path,\r\n          match: directMatch,\r\n        });\r\n        return directMatch;\r\n      });\r\n\r\n      console.log('Filtered path errors:', pathErrors);\r\n      // Update shadow metadata with validation result\r\n      getGlobalStore.getState().setShadowMetadata(stateKey, path, {\r\n        ...currentMeta,\r\n        validation: {\r\n          status: 'VALIDATION_FAILED',\r\n          message: pathErrors[0]?.message,\r\n          validatedValue: localValue,\r\n        },\r\n      });\r\n    } else {\r\n      // Validation passed\r\n      getGlobalStore.getState().setShadowMetadata(stateKey, path, {\r\n        ...currentMeta,\r\n        validation: {\r\n          status: 'VALID_PENDING_SYNC',\r\n          validatedValue: localValue,\r\n        },\r\n      });\r\n    }\r\n    forceUpdate({});\r\n  }, [stateKey, path, localValue, setState]);\r\n\r\n  const baseState = rebuildStateShape({\r\n    currentState: globalStateValue,\r\n    path: path,\r\n    componentId: componentId,\r\n  });\r\n\r\n  const stateWithInputProps = new Proxy(baseState, {\r\n    get(target, prop) {\r\n      if (prop === 'inputProps') {\r\n        return {\r\n          value: localValue ?? '',\r\n          onChange: (e: any) => {\r\n            debouncedUpdate(e.target.value);\r\n          },\r\n          // 5. Wire the new onBlur handler to the input props.\r\n          onBlur: handleBlur,\r\n          ref: formRefStore\r\n            .getState()\r\n            .getFormRef(stateKey + '.' + path.join('.')),\r\n        };\r\n      }\r\n\r\n      return target[prop];\r\n    },\r\n  });\r\n\r\n  return (\r\n    <ValidationWrapper formOpts={formOpts} path={path} stateKey={stateKey}>\r\n      {renderFn(stateWithInputProps)}\r\n    </ValidationWrapper>\r\n  );\r\n}\r\nfunction useRegisterComponent(\r\n  stateKey: string,\r\n  componentId: string,\r\n  forceUpdate: (o: object) => void\r\n) {\r\n  const fullComponentId = `${stateKey}////${componentId}`;\r\n\r\n  useLayoutEffect(() => {\r\n    const { registerComponent, unregisterComponent } =\r\n      getGlobalStore.getState();\r\n\r\n    // Call the safe, centralized function to register\r\n    registerComponent(stateKey, fullComponentId, {\r\n      forceUpdate: () => forceUpdate({}),\r\n      paths: new Set(),\r\n      reactiveType: ['component'],\r\n    });\r\n\r\n    // The cleanup now calls the safe, centralized unregister function\r\n    return () => {\r\n      unregisterComponent(stateKey, fullComponentId);\r\n    };\r\n  }, [stateKey, fullComponentId]); // Dependencies are stable and correct\r\n}\r\n"],"names":["setAndMergeOptions","stateKey","newOptions","getInitialOptions","getGlobalStore","setInitialStateOptions","initialOptions","setOptions","options","initialOptionsPart","initialOptionsPartState","mergedOptions","needToAdd","key","isDeepEqual","addStateOptions","initialState","formElements","validation","createCogsState","opt","newInitialState","statePart","transformStateFunc","existingOptions","existingGlobalOptions","useCogsState","componentId","useState","uuidv4","thiState","partialState","useCogsStateFn","setCogsOptions","loadAndApplyLocalStorage","notifyComponents","createCogsStateFromSync","syncSchema","useSync","schemas","apiParamsMap","entry","addStateLog","updateInitialStateGlobal","saveToLocalStorage","state","thisKey","currentInitialOptions","sessionId","lastSyncedWithServer","isFunction","storageKey","existingLastSynced","loadFromLocalStorage","shadowMeta","data","superJsonResult","superjson","localStorageKey","storedData","error","currentState","useCogsConfig","localkey","localData","stateEntry","updates","component","update","notifyComponent","fullComponentId","markEntireStateAsServerSynced","path","timestamp","store","currentMeta","arrayMeta","itemKey","index","itemPath","itemData","fieldPath","fieldData","stateObject","localStorage","reactiveDeps","reactiveType","defaultState","syncUpdate","dependencies","serverState","__useSync","syncOptions","reactiveForce","forceUpdate","noStateKey","componentIdRef","useRef","latestInitialOptionsRef","useEffect","syncKey","resolveInitialState","useCallback","overrideOptions","currentOptions","finalDefaultState","localKey","event","serverStateData","mergeConfig","incomingData","keyField","existingIds","item","newUniqueItems","newItemKey","newItemPath","itemValue","fieldKey","meta","existingMeta","resolvedState","source","useLayoutEffect","componentKey","rootMeta","components","fullPath","pathMeta","syncApiRef","effectiveSetState","newStateOrFunction","updateObj","nestedShadowValue","payload","newUpdate","parentArrayPath","displayValue","parentId","position","effect","parent","childNodes","finalDisplayValue","err","sourceArrayKeys","newItemValue","fullSourceArray","wrapper","shouldRender","insertPosition","transform","currentValidKeys","applyTransforms","sortTransform","t","allItems","a","b","itemElement","children","root","createRoot","arraySetter","createElement","MemoizedCogsItemWrapper","arrayPath","elementToRemove","notifiedComponents","currentPath","currentPathMeta","isArray","getDifferences","subPathString","subPath","fullSubPath","subPathMeta","parentMeta","parentFullPath","parentValue","reactiveTypes","newDeps","shouldUpdate","updaterFinal","useMemo","createProxyHandler","cogsSyncFn","syncOpt","hashTransforms","transforms","arrayKeys","itemsWithKeys","value","registerComponentDependency","dependencyPath","addPathComponent","getShadowMetadata","notifySelectionComponents","parentPath","currentSelected","arrayKey","selectedItem","proxyCache","rebuildStateShape","derivationSignature","cacheKey","stateKeyPathKey","baseFunction","handler","target","thisArg","args","prop","baseObj","baseState","sync","validationKey","response","getStatusFunc","initalOptionsGet","fullKey","selectedIndicesMap","selectedItemKey","itemHeight","overscan","stickToBottom","scrollStickTolerance","containerRef","range","setRange","rerender","initialScrollRef","scrollStateRef","measurementCache","container","totalHeight","itemOffsets","runningOffset","offsets","measuredHeight","waitForContainer","visibleCount","endIndex","startIndex","scrollToBottom","handleScroll","currentScrollTop","scrollHeight","clientHeight","scrollState","distanceFromBottom","wasNearBottom","newStartIndex","i","behavior","performScroll","attemptScroll","attempts","currentHeight","currentScroll","newHeight","newScroll","scrollTimeout","debouncedScrollToBottom","observer","handleImageLoad","e","sourceArray","currentKeys","slicedIds","offset","callbackfn","setArrayKeys","shadowValue","itemSetter","SignalMapRenderer","newValidIds","val","compareFn","itemsWithIds","bufferSize","flushInterval","bufferStrategy","onFlush","buffer","isPaused","flushTimer","addToBuffer","flushBuffer","toFlush","result","streamId","streams","componentIdsRef","updateTrigger","validIds","arrayValues","cached","freshValidIds","freshValues","unsubscribe","caches","jsx","Fragment","localIndex","itemComponentId","fieldName","itemId","currentArray","lastIndex","newPath","fields","onMatch","newValue","matchedItem","isMatch","field","updatedItem","updatedArray","validKeys","indexToCut","fullIdToCut","pathForCut","indexKeyToCut","relevantKeys","keyToCut","searchKey","searchValue","foundPath","fn","$cogsSignal","fullParentKey","fullItemKey","zodErrors","patches","convertPath","jsonPath","p","patch","relativePath","formRefStore","hideMessage","ValidationWrapper","currentValueAtPath","child","formOpts","FormElementWrapper","nextPath","proxyInstance","obj","newState","newUpdaterState","startTransition","proxy","SignalRenderer","instanceIdRef","isSetupRef","rootsMapRef","timeoutId","mapWrappers","renderInitialItems","w","elementRef","signalId","element","parentElement","signals","textNode","memo","ListItemWrapper","prevProps","nextProps","useImageLoaded","ref","loaded","setLoaded","images","loadedCount","image","renderFn","inViewRef","inView","useInView","imagesLoaded","hasReportedInitialHeight","useRegisterComponent","setRefs","arrayPathKey","fullItemPath","setState","globalStateValue","localValue","setLocalValue","isCurrentlyDebouncing","debounceTimeoutRef","debouncedUpdate","debounceTime","setShadowMetadata","validationOptions","zodSchema","fullState","pathErrors","handleBlur","errors","itemIndex","zodPath","match","directMatch","stateWithInputProps","registerComponent","unregisterComponent"],"mappings":"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"}